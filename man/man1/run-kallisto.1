.TH RUN-KALLISTO 1 2019-12-11 Bash
.SH NAME
run-kallisto \-
Run kallisto on multiple FASTQs inside a directory.
.SH SYNOPSIS
.B run-kallisto
\fB\-\-fasta-file\fP=\fI"XXX.fa.gz"\fP
\fB\-\-index-file\fP=\fI"XXX.idx"\fP
[\fB\-\-fastq-dir\fP=\fI"fastq/"\fP]
[\fB\-\-output-dir\fP=\fI"kallisto/"\fP]
[\fB--r1-tail\fP=\fI"_R1_001.fastq.gz"\fP]
[\fB--r2-tail\fP=\fI"_R2_001.fastq.gz"\fP]
.SH OPTIONS
.TP
.B \-\-fasta-file
Transcriptome-level (i.e. cDNA) FASTA file.
Ensembl or GENCODE reference is recommended over RefSeq or UCSC.
This will generate a new kallisto index, which gets saved in the output directory specified by \fB--output-dir\fP.
Example: Homo_sapiens.GRCh38.cdna.all.fa.gz
.TP
[OR]
.TP
.B \-\-index-file
Kallisto index, previously generated using \fBkallisto index\fP.
If \fB--fasta-file\fP is defined, this gets generated on the fly.
Example: kallisto.idx
.TP
.B \-\-fastq-dir
Directory path containing paired-end FASTQ files.
.TP
.B \-\-output-dir
Output directory path.
.TP
.B \-\-r1-tail \-\-r2-tail
Paired-end FASTQ R1 and R2 file suffix tail.
This also can commonly be '_R1.fq.gz' (fastq-dump) or '_1.fq.gz' (fasterq-dump) for sra-tools output.
Note that regular expression matching is not yet supported here.
.SH DESCRIPTION
This script supports quick analysis of multiple paired-end FASTQ samples
inside a directory.
It builds a kallisto index on the fly, if necessary
(unless the \fB--index-file\fP argument is set),
and outputs per sample automatically.
The script will intentionally error if the output directory specified by
\fB--output-dir\fP already exists, to prevent accidental overwrite.
.SS Strandedness
.PP
kallisto quant args:
.TP
\fB--fr-stranded\fP
Strand specific reads, first read forward
.TP
\fB--rf-stranded\fP
Strand specific reads, first read reverse
.PP
Illumina TruSeq stranded library type is first read reverse.
This corresponds to the \fB--rf-stranded\fP flag for kallisto quant.
Previously, this was \fB--library-type fr-firststrand\fP for TopHat.
.PP
Note that we are not manually setting either flag in this script.
.SS BAM generation
Note that GTF file is only required for pseudobam generation,
which we're skipping here in this simple, fast mode script.
.SH SEE ALSO
.IP
\(bu https://pachterlab.github.io/kallisto/manual
.IP
\(bu https://github.com/bcbio/bcbio-nextgen/blob/master/bcbio/rnaseq/
.IP
\(bu https://fishycat.netlify.com/en/2017/08/strandness_in_rnaseq/
.SH EXAMPLES
.nf
Generate an index file on the fly.
.B run-kallisto --fasta-file="Homo_sapiens.GRCh38.cdna.all.fa.gz"
.PP
Use a pre-defined kallisto index.
.B run-kallisto --index-file="kallisto.idx"
.fi
