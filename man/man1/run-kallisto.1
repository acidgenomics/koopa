


    --fasta-file="FASTA" --index-file="INDEX"
    [--fastq-dir="${fastq_dir}"] [--output-dir="${output_dir}"]

Run kallisto on multiple samples.

required arguments:
    --fasta-file
        Transcriptome-level (i.e. cDNA) FASTA file.
        Ensembl or GENCODE reference is recommended over RefSeq or UCSC.
        Example: Homo_sapiens.GRCh38.cdna.all.fa.gz
        This will generate a new kallisto index, which gets saved in the output
        directory specified by '--output-dir'.
    [OR]
    --index-file
        Kallisto index, previously generated using 'kallisto index'.
        Example: kallisto.idx
        If '--fasta-file' is defined, this gets generated on the fly.

required arguments with defaults:
    --fastq-dir
        Directory path containing paired-end FASTQ files.
        Defaults to '${fastq_dir}'.
    --output-dir
        Output directory path.
        Defaults to '${output_dir}'.

$(_koopa_help_args)

details:
    This script supports quick analysis of multiple paired-end FASTQ samples
    inside a directory. It builds a kallisto index on the fly, if necessary
    (unless the '--index-file' argument is set), and outputs per sample
    automatically.

    The script will intentionally error if the output directory specified by
    '--output-dir' already exists, to prevent accidental overwrite.

    Strandedness:
    Illumina TruSeq stranded library prep is 'fr-firststrand'.
    This corresponds to '--rf-stranded' flag for kallisto quant.
    kallisto quant args:
        --fr-stranded       Strand specific reads, first read forward
        --rf-stranded       Strand specific reads, first read reverse
    Note that we are not manually setting either flag in this script.

    BAM generation:
    Note that GTF file is only required for pseudobam generation, which we're
    skipping here in this simple, fast mode script.

internal variables:
    bootstraps: ${bootstraps}
    threads: ${threads}
    r1_tail: ${r1_tail}
    r2_tail: ${r2_tail}

see also:
    - https://pachterlab.github.io/kallisto/manual
    - https://github.com/bcbio/bcbio-nextgen/blob/master/bcbio/rnaseq/
          kallisto.py
    - https://fishycat.netlify.com/en/2017/08/strandness_in_rnaseq/

examples:
    # Generate index file on the fly.
    run-kallisto --fasta-file="Homo_sapiens.GRCh38.cdna.all.fa.gz" \
        --fastq-dir="fastq/" --output-dir="kallisto/"

    # Use pre-defined kallisto index.
    run-kallisto --index-file="kallisto.idx" --fastq-dir="fastq/" \
        --output-dir="kallisto/"

note:
    Bash script.
    Updated 2019-10-23.
