#!/usr/bin/env bash

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

# """
# Check package source repo:
# https://packages.ubuntu.com/
#
#
# How to replicate installed packages across machines:
# https://serverfault.com/questions/56848
#
# To backup:
# > sudo dpkg --get-selections > /tmp/dpkglist.txt
#
# To Restore:
# > sudo dpkg --set-selections < /tmp/dpkglist.txt
# > sudo apt-get -y update
# > sudo apt-get dselect-upgrade
#
#
# libcurl4-dev madness:
# Package libcurl-dev is a virtual package provided by:
#   libcurl4-openssl-dev 7.58.0-2ubuntu3.8
#   libcurl4-nss-dev 7.58.0-2ubuntu3.8
#   libcurl4-gnutls-dev 7.58.0-2ubuntu3.8
# You should explicitly select one to install.
# """

bioconductor=0
compact=0

dev=1
extra=1
remove=1
upgrade=1

pos=()
while (("$#"))
do
    case "$1" in
        --bioconductor)
            bioconductor=1
            shift 1
            ;;
        --compact)
            compact=1
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
        --*|-*)
            _koopa_invalid_arg "$1"
            ;;
        *)
            pos+=("$1")
            shift 1
            ;;
    esac
done
set -- "${pos[@]}"

_koopa_assert_has_no_args "$@"

_koopa_is_docker && extra=0

# Use system libraries for GDAL, etc. for these configs.
[[ "$bioconductor" -eq 1 ]] && remove=0
[[ "$compact" -eq 1 ]] && remove=0

name_fancy="Debian base system"

_koopa_install_start "$name_fancy"

_koopa_assert_is_installed sed sudo

# Nuke caches before installing packages.
sudo rm -fr \
    /var/cache/apt/* \
    /var/lib/dpkg/available
sudo dpkg --clear-avail

# Debian symlinks '/usr/local/man' to '/usr/local/share/man' by default, which
# is non-standard and can cause cellar link script to break.
if [[ -L /usr/local/man ]]
then
    sudo rm -v /usr/local/man
fi

# Requiring universe repo to be enabled on Ubuntu.
enabled_repos="$(_koopa_apt_enabled_repos)"
if _koopa_is_ubuntu && \
    ! _koopa_is_matching_fixed "$enabled_repos" "universe"
then
    _koopa_stop "The Ubuntu 'universe' repo is disabled. \
Check '/etc/apt/sources.list'."
fi

# Upgrade  {{{1
# ==============================================================================

if [[ "$upgrade" -eq 1 ]]
then
    _koopa_h2 "Upgrading install via 'dist-upgrade'."
    __koopa_apt_get dist-upgrade
fi

# Remove packages  {{{1
# ==============================================================================

if [[ "$remove" -eq 1 ]]
then
    _koopa_h2 "Removing legacy packages."
    # Alternative approach:
    # > apt_installed="$(dpkg --get-selections | grep -v deinstall)"
    # See also:
    # - https://askubuntu.com/questions/17823
    apt_installed="$(sudo apt list --installed 2> /dev/null)"
    legacy_pkgs=(
        cargo                   # use 'install-rust'
        containerd              # docker legacy
        docker                  # docker legacy
        docker-engine           # docker legacy
        docker.io               # docker legacy
        emacs                   # use 'install-emacs'
        emacs25                 # gets installed by zsh
        fish                    # use 'install-fish'
        libgdal-dev             # use 'install-gdal'
        libgeos-dev             # use 'install-geos'
        libproj-dev             # use 'install-proj'
        proj-bin                # use 'install-proj'
        proj-data               # use 'install-proj'
        runc                    # docker legacy
        zsh                     # use 'install-zsh'
        zsh-common
    )
    remove_pkgs=()
    for pkg in "${legacy_pkgs[@]}"
    do
        if _koopa_is_matching_regex "$apt_installed" "^${pkg}/"
        then
            remove_pkgs+=("$pkg")
        fi
    done
    if _koopa_is_array_non_empty "${remove_pkgs[@]}"
    then
        sudo apt-get --yes remove "${remove_pkgs[@]}"
    fi
fi

# Default  {{{1
# ==============================================================================

_koopa_h2 "Installing default packages."

pkgs=(
    apt-listchanges
    apt-transport-https
    apt-utils
    autoconf
    automake
    bc
    build-essential
    byacc
    bzip2
    ca-certificates
    cmake
    coreutils
    curl
    dirmngr
    findutils
    fortran77-compiler
    g++
    gcc
    gdb
    gdebi-core
    gettext
    gfortran
    git
    gnupg
    gpg-agent
    htop
    less
    libtool
    libtool-bin
    lsb-release
    make
    man-db
    nano
    parallel
    pkg-config
    # This is needed for RStudio Server to install.
    psmisc
    software-properties-common
    sudo
    texinfo  # makeinfo
    tmux
    tree
    tzdata
    unzip
    vim
    wget
    xz-utils
)

# Developer  {{{1
# ==============================================================================

if [[ "$dev" -eq 1 ]]
then
    _koopa_h2 "Installing developer packages."
    if [[ "$bioconductor" -eq 1 ]] || [[ "$compact" -eq 1 ]]
    then
        pkgs+=(
            libgdal-dev
            libgeos-dev
            libproj-dev
            proj-bin
        )
    fi
    pkgs+=(
        libacl1-dev
        libapparmor-dev
        libbz2-dev
        libc-dev
        libcairo2-dev
        libcurl4-gnutls-dev
        libevent-dev
        libffi-dev
        libfftw3-dev
        libfreetype6-dev
        # The R nlme package requires this.
        libgfortran5
        libgif-dev
        libgl1-mesa-dev
        libglu1-mesa-dev
        libgmp-dev
        libgnutls28-dev
        libgsl-dev
        libgtk-3-0
        libgtk-3-dev
        libgtk2.0-0
        libgtk2.0-dev
        libgtkmm-2.4-dev
        libharfbuzz-dev
        libhdf5-dev
        liblapack-dev
        liblzma-dev
        libmagick++-dev
        libmariadb-dev
        libmodule-build-perl
        libmpc-dev
        libmpfr-dev
        libncurses-dev
        libnetcdf-dev
        libopenbabel-dev
        libopenblas-base
        libopenblas-dev
        libopenjp2-7-dev  # GDAL
        libopenmpi-dev
        libpcre2-dev  # rJava
        libperl-dev
        libpng-dev
        libpoppler-cpp-dev
        libpq-dev
        libprotobuf-dev
        libprotoc-dev
        librdf0-dev
        libreadline-dev
        libsasl2-dev
        libssh2-1-dev
        libssl-dev
        libstdc++6
        libtiff5-dev
        libudunits2-dev
        libv8-dev
        libx11-dev
        libxml2-dev
        libxpm-dev
        libxt-dev
        libz-dev
        sqlite3
        tcl-dev
        tk-dev
    )
fi

# Extra  {{{1
# ==============================================================================

if [[ "$extra" -eq 1 ]]
then
    _koopa_h2 "Installing extra recommended packages."
    pkgs+=(
        # default-jdk
        alien
        biber
        ggobi
        gnutls-bin
        graphviz
        gtk-doc-tools
        imagemagick
        jags
        keyboard-configuration
        mpi-default-bin
        openmpi-bin
        openmpi-common
        openmpi-doc
        pandoc
        pandoc-citeproc
        pass
        protobuf-compiler
        systemd
        tabix
        texlive
        unattended-upgrades
        xfonts-100dpi
        xfonts-75dpi
        xorg
    )

    if _koopa_is_ubuntu
    then
        _koopa_info "Installing Ubuntu-specific packages."
        pkgs+=(
            firefox
        )
    fi
fi

_koopa_apt_install "${pkgs[@]}"
_koopa_apt_configure_sources
_koopa_apt_import_keys

# Clean up  {{{1
# ==============================================================================

_koopa_h2 "Removing unused packages."
sudo apt-get --yes clean
sudo apt-get --yes autoremove

_koopa_install_success "$name_fancy"
