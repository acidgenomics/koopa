## Shared R profile configuration.
## Updated 2019-10-27 by Michael Steinbaugh.

## See `help(Startup)` for documentation on `~/.Rprofile` and `Rprofile.site`.



## Notes                                                                    {{{1
## =============================================================================

## Tested on Linux and macOS.

## > help(topic = "Rprofile")

## Never set `options(stringsAsFactors = FALSE)`.
## Code will be non-portable.

## Restart R clean inside RStudio project with:
##     Session -> Restart R (Ctrl + Shift + F10).
##
## `.rs.restartR()` will reload but not detach packages, which isn't helpful.
##
## See also:
## - https://stackoverflow.com/questions/6313079
## - https://support.rstudio.com/hc/en-us/community/posts/200653076

## If devtools runs into an unzip error, set option: `unzip = "/usr/bin/unzip"`.



## Examples                                                                 {{{1
## =============================================================================

## - Stephen Turner's profile
##   http://gettinggeneticsdone.blogspot.com/2013/07/customize-rprofile.html
## - Jim Hester's profile
##   https://github.com/jimhester/dotfiles/blob/master/R/Rprofile
## - Mike Love's profile
##   https://gist.github.com/mikelove/c3f7ff05ce18541b8b92
## - Efficient R programming
##   https://csgillespie.github.io/efficientR/set-up.html
## - Debian example config file by Dirk Eddelbuettel.

## From the default Debian configuration:

## Example `.Rprofile` file:
## > options(width = 65L, digits = 5L)
## > options(show.signif.stars = FALSE)
## > setHook(
## >     packageEvent("grDevices", "onLoad"),
## >     function(...) grDevices::ps.options(horizontal = FALSE)
## > )
## > set.seed(1234L)
## > .First <- function() cat("\n   Welcome to R!\n\n")
## > .Last <- function()  cat("\n   Goodbye!\n\n")

## Example `Rprofile.site` file:
## > local({
## >     ## Add MASS to the default packages, set a CRAN mirror.
## >     old <- getOption("defaultPackages")
## >     r <- getOption("repos")
## >     r["CRAN"] <- "http://my.local.cran"
## >     options(defaultPackages = c(old, "MASS"), repos = r)
## > })



## Pre-flight                                                               {{{1
## =============================================================================

## Keeping these commands out of `.First()`, otherwise the user `.Rprofile`
## won't pick up the return values correctly.

options("rprofile.site" = TRUE)



## Hidden environment                                                       {{{1
## =============================================================================

## Create hidden environment to stash values.
.env <- new.env()

## Set seed for reproducibility. Using Fibonacci sequence.
assign(x = "seed", value = 1123581321L, envir = .env)
stopifnot(is.integer(.env[["seed"]]))
set.seed(.env[["seed"]])

## Check if a package is installed.
assign(
    x = ".isInstalled",
    value = function(pkg) {
        pkg %in% rownames(utils::installed.packages())
    },
    envir = .env
)

attach(.env)



## Package installation                                                     {{{1
## =============================================================================

## We set the cloud mirror, which is 'network-close' to everybody, as default.
## Consider using a versioned MRAN snapshot for increased reproducibility.

## Alternatively, this lets you install Bioconductor packages using
## `install.packages()`, but this causes a slight R session load delay.
## > options(repos = BiocManager::repositories())

local({
    repos <- getOption("repos")
    ## Can use "https://cloud.r-project.org" here instead.
    repos["CRAN"] <- "https://cran.rstudio.com"
    options("repos" = repos)
})

## Always install from source on Linux.
## Allow binary install on macOS and Windows.
if (identical(R.Version()[["os"]], "linux-gnu")) {
    options("pkgType" = "source")
} else {
    options("pkgType" = "both")
}

## Set custom compiler options.
## > options(
## >     "configure.args" = NULL,
## >     "configure.vars" = NULL
## > )

## Binary package mode. Doesn't work on Linux.
## > options(
## >     "install.packages.check.source" = "no",
## >     "install.packages.compile.from.source" = "binary",
## >     "pkgType" = "binary"
## > )



## Console and interface                                                    {{{1
## =============================================================================

options(
    "browserNLdisabled" = TRUE,
    ## Remove "+" line prefix in output, making code easier to copy.
    "continue" = " ",
    "max.print" = 1000L,
    "menu.graphics" = FALSE,
    "prompt" = "> ",
    "show.signif.stars" = FALSE,
    "verbose" = FALSE,
    "width" = 80L
)

## Turn on auto-completion of installed package names.
if (isTRUE(interactive())) {
    utils::rc.settings(ipck = TRUE)
}



## Debugging                                                                {{{1
## =============================================================================

## Improve the warnings and include backtrace of call stack.
options(
    "deparse.max.lines" = 3L,
    "showErrorCalls" = TRUE,
    "showWarnCalls" = TRUE,
    ## Timeouts default to 60 seconds, which is too long.
    "timeout" = 5L,
    "warn" = 1L,
    ## Set to maximum supported length.
    "warning.length" = 8170L
)

## Note that edgeR and pheatmap currently fail these checks.
options(
    "warnPartialMatchAttr" = TRUE,
    "warnPartialMatchDollar" = TRUE
)

## Improve stack traces for error messages.
##
## Use either:
## - `rlang::entrace()` (recommended)
## - `utils::recover()`
##
## See also:
## - https://twitter.com/krlmlr/status/1086995664591044608
## - https://gist.github.com/krlmlr/33ec72d196b1542b9c4f9497d981de49
##
## Verbose error debugging is currently crashing RStudio 1.2 unless
## `rstudio.errors.suppressed` is defined.
##
## Related issues:
## - https://github.com/rstudio/rstudio/issues/4723
## - https://github.com/rstudio/rstudio/pull/4726

if (.isInstalled("rlang")) {
    options(
        "error" = quote(rlang::entrace()),
        "rlang_backtrace_on_error" = "full",
        "rstudio.errors.suppressed" = FALSE
    )
}

## Quiet down about registered S3 method collisons.
## See also:
## - https://svn.r-project.org/R/trunk/src/library/base/R/namespace.R
## - https://github.com/wch/r-source/blob/master/src/library/base/R/namespace.R
Sys.setenv("_R_S3_METHOD_REGISTRATION_NOTE_OVERWRITES_" = "0")



## Package-specific options                                                 {{{1
## =============================================================================

if (.isInstalled("crayon")) {
    options(
        "crayon.enabled" = TRUE,
        "crayon.colors" = 256L
    )
}

if (.isInstalled("httr")) {
    ## Enable OAuth token generation using httr on a remote R server.
    ## This is used by googlesheets, for example.
    options(
        "httr_oob_default" = TRUE
    )
}

if (.isInstalled("parallel")) {
    ## Improve the default multi-core settings.
    ## Minimum of 1 core, maximum of n - 1 cores.
    ## `BiocParallel::MulticoreParam()` should inherit this setting.
    options(
        "mc.cores" = max(1L, parallel::detectCores() - 1L)
    )
    ## `install.packages()` looks for "Ncpus" global.
    options(
        "Ncpus" = getOption("mc.cores")
    )
}

if (.isInstalled("readr")) {
    options(
        "readr.num_columns" = 0L,
        "readr.show_progress" = FALSE
    )
}



## Initialization at start of an R session                                  {{{1
## =============================================================================

## > help(topic = "Startup", package = "base")

.First <- function() {
    ## Get the full R version, including patch (e.g. 3.6.1).
    r_ver_full <- numeric_version(paste(
        R.version[["major"]],
        R.version[["minor"]],
        sep = "."
    ))
    ## Get the short R version without patch (e.g. 3.6).
    r_ver_short <- numeric_version(paste(
        R.version[["major"]],
        substr(x = R.version[["minor"]], start = 1, stop = 1),
        sep = "."
    ))

    ## Conda                                                                {{{2
    ## -------------------------------------------------------------------------

    ## Check for active conda.
    ## Can cause compilation issues due to GCC version mismatch.

    if (Sys.which("conda") != "") {
        if (isTRUE(interactive())) {
            message(sprintf(
                fmt = paste(
                    "conda '%s' environment detected.",
                    "Don't install packages from source with conda active!",
                    "",
                    sep = "\n"
                ),
                Sys.getenv("CONDA_DEFAULT_ENV")
            ))
        }
        conda <- TRUE
    } else {
        conda <- FALSE
    }

    ## Compiler                                                             {{{2
    ## -------------------------------------------------------------------------

    ## Check that the compiler is expected GCC version on Linux or expected
    ## Clang version on macOS.
    ##
    ## Do not compile packages from source on macOS using Apple LLVM Clang/GCC.
    ## Instead, install specific Clang and GNU Fortran binaries:
    ## https://cran.r-project.org/bin/macosx/tools/
    
    if (!isTRUE(conda)) {
        if (Sys.getenv("HMS_CLUSTER") == "o2") {
            ## > module load gcc/6.2.0
            ## > module load R/3.6.1
            ## > module load hdf5/1.10.1
            gcc_bin_dir <- file.path("", "n", "app", "gcc", "6.2.0", "bin")
            stopifnot(identical(
                x = Sys.which(c("R", "gcc", "g++", "gfortran", "h5cc")),
                y = c(
                    "R"        = file.path(
                                     "", "n", "app",
                                     "R", r_ver_full, "bin", "R"
                                 ),
                    "gcc"      = file.path(gcc_bin_dir, "gcc"),
                    "g++"      = file.path(gcc_bin_dir, "g++"),
                    "gfortran" = file.path(gcc_bin_dir, "gfortran"),
                    "h5cc"     = file.path(
                                     "", "n", "app",
                                     "hdf5", "1.10.1", "bin", "h5cc"
                                 )
                )
            ))
            rm(gcc_bin_dir)
        } else if (Sys.info()[["sysname"]] == "Darwin") {
            ## Use recommended CRAN compiler settings.
            if (r_ver_short == "3.5") {
                clang_ver <- "6"
            } else if (r_ver_short == "3.6") {
                clang_ver <- "7"
            }
            clang_bin_dir <- file.path(
                "", "usr", "local",
                paste0("clang", clang_ver), "bin"
            )
            stopifnot(identical(
                x = Sys.which(c("clang", "clang++", "gfortran")),
                y = c(
                    "clang"    = file.path(clang_bin_dir, "clang"),
                    "clang++"  = file.path(clang_bin_dir, "clang++"),
                    "gfortran" = file.path(
                                     "", "usr", "local",
                                     "gfortran", "bin", "gfortran"
                                 )
                )
            ))
            rm(clang_bin_dir, clang_ver)
        } else if (Sys.info()[["sysname"]] == "Linux") {
            stopifnot(identical(
                x = Sys.which(c("gcc", "g++", "gfortran")),
                y = c(
                    "gcc"      = file.path("", "usr", "bin", "gcc"),
                    "g++"      = file.path("", "usr", "bin", "g++"),
                    "gfortran" = file.path("", "usr", "bin", "gfortran")
                )
            ))
        } 
    }

    ## Library path                                                         {{{2
    ## -------------------------------------------------------------------------

    ## Check that library matches R version.

    if (!isTRUE(conda)) {
        libs <- .libPaths()
        if (
            ## Site library.
            !any(grepl(pattern = "site-library", x = libs)) &&
            ## User library.
            !any(grepl(
                pattern = file.path(
                    paste0(Sys.getenv("R_PLATFORM"), "-library"), r_ver_short
                ),
                x = libs
            ))
        ) {
            stop(sprintf(
                "Failed to detect R %s library in '.libPaths()':\n%s",
                r_ver_short,
                paste(libs, collapse = "\n")
            ))
        }
        rm(libs)
    }

    ## RStudio                                                              {{{2
    ## -------------------------------------------------------------------------

    ## Check if session is running inside RStudio.
    if (isTRUE(nzchar(Sys.getenv("RSTUDIO_USER_IDENTITY")))) {
        rstudio <- TRUE
    } else {
        rstudio <- FALSE
    }
    ## Fix file permissions. RStudio doesn't pick up the system umask.
    ## Note that we're allowing group write here by default.
    if (isTRUE(rstudio)) {
        Sys.umask("0002")
    }
    ## Inform user that session is running inside of RStudio.
    ## > if (isTRUE(rstudio) && isTRUE(interactive())) {
    ## >     message("RStudio detected.")
    ## > }
    rm(rstudio)

    ## Secrets                                                              {{{2
    ## -------------------------------------------------------------------------

    ## Load per-user secrets that we don't want to save in a shared Renviron.
    secrets_file <- file.path("~", ".Rsecrets")
    if (file.exists(secrets_file)) {
        source(secrets_file)
        if (isTRUE(interactive())) {
            message(sprintf("Loaded '%s' file.", secrets_file))
        }
    }

    ## Minimal session info                                                 {{{2
    ## -------------------------------------------------------------------------

    if (isTRUE(interactive())) {
        path_string <- paste0("  %.", getOption("width") - 4L, "s")
        cat(sprintf(
            fmt = paste(
                "",
                "R Home:",            path_string,
                "Package Library:",   path_string,
                "Working Directory:", path_string,
                "",
                "",
                sep = "\n"
            ),
            normalizePath(R.home(), mustWork = TRUE),
            normalizePath(.libPaths()[[1L]], mustWork = TRUE),
            normalizePath(getwd(), mustWork = TRUE)
        ))
        rm(path_string)
        if (isTRUE(
            "BiocVersion" %in% rownames(utils::installed.packages())
        )) {
            ## Alternatively can use 'BiocManager::version()', but this approach
            ## is faster because the package doesn't get loaded.
            bioc_ver <- numeric_version(sub(
                pattern = "^([[:digit:]]+)\\.([[:digit:]]+)\\.([[:digit:]]+)$",
                replacement="\\1.\\2",
                x = utils::packageVersion("BiocVersion")
            ))
            cat(sprintf(
                fmt = "R %s / Bioconductor %s\n",
                r_ver_full, bioc_ver
            ))
        } else {
            cat(sprintf(fmt = "R %s\n", r_ver_full))
        }
        cat("\n")
    }

    rm(conda, r_ver_full, r_ver_short)
}



## Initialization at end of an R session                                    {{{1
## =============================================================================

.Last <- function() {
    if (interactive()) {
        message(sprintf("Goodbye at %s.", date()))
    }
}
