## Shared R environment configuration.
## Updated 2019-09-11 by Michael Steinbaugh.

## See `help(Startup)` for documentation on `~/.Renviron` and `Renviron.site`.

## See also:
## - https://support.rstudio.com/hc/en-us/articles/215733837
## - https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Managing-libraries
## - https://community.rstudio.com/t/setting-up-a-site-library/3916
## - Debian example config file by Dirk Eddelbuettel.

## Example `~/.Renviron` on Unix.
## > R_LIBS="~/R/library"



## System path                                                              {{{1
## =============================================================================

## Restrict path, so we don't load any binaries from conda or python virtualenv.
PATH="/usr/local/bin:/usr/bin:/bin"



## Package configuration                                                    {{{1
## =============================================================================

## This is necessary for rgdal, sf packages to install clean.
PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig"



## Package library path                                                     {{{1
## =============================================================================

## Note that RStudio Server can disable user package installations.
## Set `allow-package-installation=0` in `/etc/rstudio/rsession.conf`.

## Check the return of these in an R session:
## - `.libPaths()`
## - `.Library`
## - `.Library.site`

R_LIBS_SITE="${R_HOME}/site-library"

## `@R_PLATFORM@` can be e.g. `x86_64-pc-linux-gnu`.
## `@MAJ_MIN_VERSION@` is likely something like '3.6'.
## Set this per-user via `%p` and `%v` for platform and version.
R_LIBS_USER="${R_LIBS_USER-'~/R/@R_PLATFORM@-library/@MAJ_MIN_VERSION@'}"



## Default packages                                                         {{{1
## =============================================================================

## Example of setting `R_DEFAULT_PACKAGES` (from `R CMD check`).
## This loads the packages in the order given, so they appear on the search path
## in reverse order.
# > R_DEFAULT_PACKAGES="utils,grDevices,graphics,stats"



## GitHub remote installs                                                   {{{1
## =============================================================================

## Always upgrade GitHub R packages, without prompting.
## See `remotes::update_packages()` for details.
R_REMOTES_UPGRADE="always"



## Miscellaneous useful defaults                                            {{{1
## =============================================================================

## R can sometimes error due to time zone, unless this is set.
## This is particularly important to set on rocker Debian images.
TZ="America/New_York"



## Compiler flags                                                           {{{1
## =============================================================================

## Debian (and its derivatives) impose a set of compiler flags to prevent some
## known security issues with compiled code. These flags then become defaults
## for R as well (see eg `/etc/R/Makeconf`), but nevertheless confuse R as
## warnings get triggered.  Users, on the other hand, are often stumped about
## these. So with this variable we declare these options as known for the local
## checks on the machine this file is on.
##
## See Section 8 of the R Internals manual for many more options.
_R_CHECK_COMPILATION_FLAGS_KNOWN_='-Wformat -Werror=format-security -Wdate-time'



## Logical coercion                                                         {{{1
## =============================================================================

## Verbose information on 'length(x) = n > 1' coercion to 'logical(1)' errors.
## https://twitter.com/henrikbengtsson/status/1172155983935631360
## Set to 'false' to disable.

_R_CHECK_LENGTH_1_CONDITION_="${_R_CHECK_LENGTH_1_CONDITION_-verbose}"
_R_CHECK_LENGTH_1_LOGIC2_="${_R_CHECK_LENGTH_1_LOGIC2_-verbose}"
