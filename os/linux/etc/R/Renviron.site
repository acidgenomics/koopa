## Shared R environment configuration.
## Updated 2019-12-09 by Michael Steinbaugh.

## See `help(Startup)` for documentation on `~/.Renviron` and `Renviron.site`.

## See also:
## - https://support.rstudio.com/hc/en-us/articles/215733837
## - https://cran.r-project.org/doc/manuals/r-release/
##       R-admin.html#Managing-libraries
## - https://community.rstudio.com/t/setting-up-a-site-library/3916
## - Debian example config file by Dirk Eddelbuettel.



## System path                                                              {{{1
## =============================================================================

## Restrict path, so we don't mask compiler binaries with conda or venv.
PATH="/usr/local/bin:/usr/bin:/bin"



## Temporary files                                                          {{{1
## =============================================================================

## RStudio doesn't inherit 'TMPDIR' from current shell session, so we need to
## provide a fallback symlink for virtual machines using a temporary SSD.
##
## For example on Azure:
## > sudo ln -fnsv /mnt/resource /tmp/rstudio-tmp
##
## If this symlink doesn't exist, RStudio will fall back to '/tmp'.
##
## Refer to 'tempdir()' in R for details.
TMPDIR="${TMPDIR-/tmp/rstudio-tmp}"



## Package configuration                                                    {{{1
## =============================================================================

## This is necessary for rgdal, sf packages to install clean.
PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig"



## Package library path                                                     {{{1
## =============================================================================

## General:
## - `Sys.getenv()`.
## - `help(topic = "R_LIBS_USER")`.
## - `help(topic = ".libPaths")`.
##
## Bioconductor-specific:
## - https://www.bioconductor.org/developers/how-to/useDevel/
##
## Variables:
## - `%V`: R version number including the patchlevel (e.g., `2.5.0`).
## - `%v`: R version number excluding the patchlevel (e.g., `2.5`).
## - `%p`: The platform for which R was built; value of `R.version$platform`.
## - `%o`: The underlying operating system; value of `R.version$os`.
## - `%a`: The CPU architecture (CPU); value of `R.version$arch`.

## Note that RStudio Server can disable user package installations.
## Set `allow-package-installation=0` in `/etc/rstudio/rsession.conf`.

## Check the return of these in an R session:
## - `.libPaths()`
## - `.Library`
## - `.Library.site`

## Linux default:
## R_LIBS_USER="~/R/%p-library/%v"
##
## Windows default:
## R_LIBS_USER="~/R/win-library/%v"
##
## `@R_PLATFORM@` can be e.g. `x86_64-pc-linux-gnu`.
## `@MAJ_MIN_VERSION@` is likely something like '3.6'.
## Set this per-user via `%p` and `%v` for platform and version.
## > R_LIBS_USER="${R_LIBS_USER-'~/R/@R_PLATFORM@-library/@MAJ_MIN_VERSION@'}"

R_LIBS_SITE="${R_HOME}/site-library"
R_LIBS_USER="~/R/%p-library/%v"



## Default packages                                                         {{{1
## =============================================================================

## Example of setting `R_DEFAULT_PACKAGES` (from `R CMD check`).
## This loads the packages in the order given, so they appear on the search path
## in reverse order.
# > R_DEFAULT_PACKAGES="utils,grDevices,graphics,stats"



## GitHub remote installs                                                   {{{1
## =============================================================================

## Always upgrade GitHub R packages, without prompting.
## See `remotes::update_packages()` for details.
R_REMOTES_UPGRADE="always"



## Reticulate                                                               {{{1
## =============================================================================

## Reticulate allows you to run Python code inside of R.

## Here's how to force Python available for reticulate.
## Instead, call `use_virtualenv()` or `use_condaenv()`.
## > RETICULATE_PYTHON="~/miniconda3/envs/reticulate/bin/python"



## ROracle                                                                  {{{1
## =============================================================================

## This requires installation of the Oracle Database Instant Client.
## Install using RPM files.
##
## Previous version on RHEL 7: 12.2.0.1.0-1
##
## Install basic, devel, jdbc, odbc, and sqlplus.
##
## Fedora/RHEL:
## > sudo yum list installed | grep 'oracle-instantclient'
## > sudo yum remove 'oracle-instantclient*'
## > sudo rpm -i oracle-instantclient*-basic-*.x86_64.rpm
## > sudo rpm -i oracle-instantclient*-devel-*.x86_64.rpm
## > sudo rpm -i oracle-instantclient*-sqlplus-*.x86_64.rpm
## > sudo rpm -i oracle-instantclient*-jdbc-*.x86_64.rpm
## > sudo rpm -i oracle-instantclient*-odbc-*.x86_64.rpm
##
## For Debian/Ubuntu, convert the RPM into DEB format using alien.
## > sudo apt-get install alien
##
## See also:
## - https://www.oracle.com/database/technologies/instant-client/
##       linux-x86-64-downloads.html
## - https://www.oracle.com/database/technologies/instant-client.html
## - http://www.oracle.com/technetwork/database/features/instant-client/
##       index-097480.html
## - https://help.ubuntu.com/community/Oracle%20Instant%20Client
## - https://docs.oracle.com/en/database/oracle/r-enterprise/1.5.1/oread/
##       installing-oracle-database-instant-client.html
##       #GUID-A61C2824-B9C7-4344-A7A2-E7FE0F05695D
##
## Do not set `LD_LIBRARY_PATH`.
## Use `/etc/ld.so.conf.d/oracle-instantclient.conf` approach instead.
## This can break GCC compilation of rhdf5, if set in bash profile.
## Contains: /usr/lib/oracle/12.2/client64/lib
##
## See also:
## - http://cran.cnr.berkeley.edu/web/packages/ROracle/INSTALL
## - https://docs.oracle.com/cd/E83411_01/OREAD/
##       installing-rstudio-server.htm#OREAD223
##
## Updated 2019-12-09.

ORACLE_VERSION="${ORACLE_VERSION-19.5}"

ORACLE_HOME="${ORACLE_HOME-/usr/lib/oracle/${ORACLE_VERSION}/client64}"
OCI_INC="${OCI_INC-/usr/include/oracle/${ORACLE_VERSION}/client64}"

OCI_LIB="${ORACLE_HOME}/lib"
TNS_ADMIN="${ORACLE_HOME}/network/admin"
PATH="${PATH}:${ORACLE_HOME}/bin"



## Miscellaneous useful defaults                                            {{{1
## =============================================================================

## R can sometimes error due to time zone, unless this is set.
## This is particularly important to set on rocker Debian images.
TZ="America/New_York"



## Compiler flags                                                           {{{1
## =============================================================================

## Debian (and its derivatives) impose a set of compiler flags to prevent some
## known security issues with compiled code. These flags then become defaults
## for R as well (see eg `/etc/R/Makeconf`), but nevertheless confuse R as
## warnings get triggered.  Users, on the other hand, are often stumped about
## these. So with this variable we declare these options as known for the local
## checks on the machine this file is on.
##
## See Section 8 of the R Internals manual for many more options.
_R_CHECK_COMPILATION_FLAGS_KNOWN_='-Wformat -Werror=format-security -Wdate-time'



## Logical coercion                                                         {{{1
## =============================================================================

## Verbose information on 'length(x) = n > 1' coercion to 'logical(1)' errors.
## Set to 'false' to disable.
##
## Note that setting these can cause Shiny Server to crash.
## https://github.com/rstudio/rstudio/issues/5268
##
## See also:
## - https://twitter.com/henrikbengtsson/status/1172155983935631360
## - https://twitter.com/henrikbengtsson/status/1188197161780989953

_R_CHECK_LENGTH_1_CONDITION_="${_R_CHECK_LENGTH_1_CONDITION_-verbose}"
_R_CHECK_LENGTH_1_LOGIC2_="${_R_CHECK_LENGTH_1_LOGIC2_-verbose}"



# https://twitter.com/michael_chirico/status/1193831562724331520
# https://yihui.name/en/2017/12/last-13-lines-of-output/
_R_CHECK_TESTS_NLINES_=0
