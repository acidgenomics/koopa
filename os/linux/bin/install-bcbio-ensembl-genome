#!/usr/bin/env bash

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

_koopa_help "$@"
_koopa_assert_has_args "$@"
_koopa_assert_is_installed bcbio_nextgen.py



# Variables                                                                 {{{1
# ==============================================================================

while (("$#"))
do
    case "$1" in
        --build=*)
            build="${1#*=}"
            shift 1
            ;;
        --build)
            build="$2"
            shift 2
            ;;
        --indexes=*)
            indexes="${1#*=}"
            shift 1
            ;;
        --indexes)
            indexes="$2"
            shift 2
            ;;
        --organism=*)
            organism="${1#*=}"
            shift 1
            ;;
        --organism)
            organism="$2"
            shift 2
            ;;
        --release=*)
            release="${1#*=}"
            shift 1
            ;;
        --release)
            release="$2"
            shift 2
            ;;
        *)
            _koopa_invalid_arg "$1"
            ;;
    esac
done

if [[ -z "${organism:-}" ]] ||
    [[ -z "${build:-}" ]] ||
    [[ -z "${release:-}" ]]
then
    _koopa_missing_arg
fi

[[ -z "${indexes:-}" ]] && indexes="bowtie2 seq star"

# Convert string to array.
indexes=("$indexes")

# Check for valid organism input.
if ! echo "$organism" | grep -Eq "^([A-Z][a-z]+)(\s|_)([a-z]+)$"
then
    _koopa_stop "Invalid organism: '${organism}'."
fi

# Sanitize spaces into underscores.
# Use bash built-in rather than sed, when possible.
organism="${organism// /_}"

source="Ensembl"
bcbio_genome_name="${build}-${source}-${release}"

# e.g. "Hsapiens".
bcbio_species_dir="$( \
    echo "$organism" \
    | sed -r "s/^([A-Z]).+_([a-z]+)$/\1\2/g" \
)"

log_dir="${HOME}/logs/${HOSTNAME}/bcbio"
timestamp="$(date "+%Y%m%d-%H%M%S")"
log_file="${log_dir}/genome-${bcbio_genome_name}-${timestamp}.log"

tmp_dir="$(_koopa_tmp_dir)/${bcbio_genome_name}"
cores="$CPU_COUNT"



# Script                                                                    {{{1
# ==============================================================================

(
    mkdir -pv "$log_dir"
    rm -fr "$tmp_dir"
    mkdir -p "$tmp_dir"
    cd "$tmp_dir" || exit 1
    # e.g. Homo_sapiens.GRCh38.dna.primary_assembly.fa
    ensembl-fasta --organism "$organism" --build "$build" --type "dna"
    gtf="${organism}.${build}.dna.primary_assembly.fa"
    [[ ! -f "$fasta" ]] && _koopa_stop "FASTA failure."
    fasta="$(realpath "$fasta")"
    # e.g. Homo_sapiens.GRCh38.96.gtf
    ensembl-gtf --organism "$organism" --build "$build" --release "$release"
    gtf="${organism}.${build}.${release}.gtf"
    [[ ! -f "$gtf" ]] && _koopa_stop "GTF failure."
    gtf="$(realpath "$gtf")"
    bcbio_setup_genome.py \
        --name "$bcbio_species_dir" \
        --build "$bcbio_genome_name" \
        --cores "$cores" \
        --fasta "$fasta" \
        --gtf "$gtf" \
        --indexes "${indexes[@]}" \
        2>&1 | tee "$log_file"
    rm -fr "$tmp_dir"
)
