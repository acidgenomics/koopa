#!/usr/bin/env bash

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

link_cellar=1
version=

while (("$#"))
do
    case "$1" in
        --cellar-only)
            link_cellar=0
            shift 1
            ;;
        --version=*)
            version="${1#*=}"
            shift 1
            ;;
        --version)
            version="$2"
            shift 2
            ;;
        *)
            _koopa_invalid_arg "$1"
            ;;
    esac
done

name="bash"
[[ -z "$version" ]] && version="$(_koopa_variable "$name")"
prefix="$(_koopa_cellar_prefix)/${name}/${version}"
_koopa_exit_if_dir "$prefix"

name_fancy="${name} ${version}"
_koopa_install_start "$name_fancy" "$prefix"

_koopa_assert_has_no_args "$@"
_koopa_assert_has_no_envs

gnu_mirror="$(_koopa_gnu_mirror)"
jobs="$(_koopa_cpu_count)"
minor_version="$(_koopa_major_minor_version "$version")"
patches="$(_koopa_print "$version" | cut -d '.' -f 3)"
tmp_dir="$(_koopa_tmp_dir)"

(
    _koopa_cd_tmp_dir "$tmp_dir"
    file="bash-${minor_version}.tar.gz"
    url="${gnu_mirror}/bash/${file}"
    _koopa_download "$url"
    _koopa_extract "$file"
    cd "bash-${minor_version}" || exit 1
    # Apply patches. 
    (
        mkdir -pv patches
        cd patches || exit 1
        # Note that GNU mirror doesn't seem to work correctly here.
        base_url="https://ftp.gnu.org/gnu/bash/bash-${minor_version}-patches"
        mv_tr="$(_koopa_print "$minor_version" | tr -d '.')"
        range="$(printf "%03d-%03d" "1" "$patches")"
        request="${base_url}/bash${mv_tr}-[${range}]"
        curl "$request" -O
        cd .. || exit 1
        for file in patches/*
        do
            _koopa_info "Applying patch '${file}'."
            # Alternatively, can pipe curl call directly to 'patch -p0'.
            # https://stackoverflow.com/questions/14282617
            patch -p0 --ignore-whitespace --input="$file"
        done
    )
    ./configure --prefix="$prefix"
    make --jobs="$jobs"
    # > make test
    make install
) 2>&1 | tee "$(_koopa_tmp_log_file)"

rm -fr "$tmp_dir"

if [[ "$link_cellar" -eq 1 ]]
then
    _koopa_link_cellar "$name" "$version"
    _koopa_enable_shell "$name"
fi

_koopa_install_success "$name_fancy"
_koopa_note "Reload the shell to complete activation."
