#!/usr/bin/env bash

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
$(_koopa_help_header)
    name [version]

Find cellar symbolic links.

required positional arguments:
    1.  Program name.

optional positional arguments:
    2.  Program version.
        If left unset, the script looks for the latest version installed.

$(_koopa_help_args)

details:
    Find symbolic links for a cellarized program installed by koopa.

examples:
    find-cellar-symlinks R 3.6.1
    find-cellar-symlinks emacs 26.3
    find-cellar-symlinks vim

note:
    Bash script.
    Updated 2019-10-23.
EOF
}

_koopa_assert_has_args "$@"
_koopa_help "$@"



# Arguments                                                                 {{{1
# ==============================================================================

name="$1"
version="${2:-}"



# Script                                                                    {{{1
# ==============================================================================

build_prefix="$(_koopa_build_prefix)"

# Automatically detect version, if left unset.
cellar_prefix="$(_koopa_cellar_prefix)/${name}"
if [[ -n "$version" ]]
then
    cellar_prefix="${cellar_prefix}/${version}"
else
    cellar_prefix="$( \
        find "$cellar_prefix" -maxdepth 1 -type d \
        | sort \
        | tail -n 1 \
    )"
fi

links=()
while IFS=  read -r -d $'\0'; do
    links+=("$REPLY")
done < <( \
    find -L "$build_prefix" \
    -type f \
    -path "${cellar_prefix}/*" \
    ! -path "${build_prefix}/koopa" \
    -print0
)

# Sort the array.
# > IFS=$'\n' links=($(sort <<<"${links[*]}"))
# > unset IFS
readarray -t links < <(printf '%s\0' "${links[@]}" | sort -z | xargs -0n1)

# Replace the cellar prefix with our build prefix.
for file in "${links[@]}"
do
    echo "${file//$cellar_prefix/$build_prefix}"
done
