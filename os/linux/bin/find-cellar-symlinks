#!/usr/bin/env bash
set -Eeu -o pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"
_koopa_assert_has_args "$@"

name="$1"
version="${2:-}"

build_prefix="$(_koopa_make_prefix)"

# Automatically detect version, if left unset.
cellar_prefix="$(_koopa_cellar_prefix)/${name}"
if [[ -n "$version" ]]
then
    cellar_prefix="${cellar_prefix}/${version}"
else
    cellar_prefix="$( \
        find "$cellar_prefix" -maxdepth 1 -type d \
        | sort \
        | tail -n 1 \
    )"
fi

# > _koopa_h1 "Finding symlinks for '${cellar_prefix}' in '${build_prefix}'."

# Pipe GNU find into array.
links=()
while IFS= read -r -d $'\0'
do
    links+=("$REPLY")
done < <( \
    find -L "$build_prefix" \
        -type f \
        -path "${cellar_prefix}/*" \
        ! -path "${build_prefix}/koopa" \
        -print0 \
    | sort -z \
)

# Sort the array.
# > IFS=$'\n' links=($(sort <<<"${links[*]}"))
# > unset IFS
readarray -t links < <(printf '%s\0' "${links[@]}" | sort -z | xargs -0n1)

# Replace the cellar prefix with our build prefix.
for file in "${links[@]}"
do
    echo "${file//$cellar_prefix/$build_prefix}"
done
