#!/usr/bin/env bash
set -Eeu -o pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

# """
# Official GCC links:
# - https://ftp.gnu.org/gnu/gcc/
# - https://gcc.gnu.org/install/
# - https://gcc.gnu.org/install/prerequisites.html
# - https://gcc.gnu.org/wiki/InstallingGCC
# - https://gcc.gnu.org/wiki/FAQ
#
#
# Do not run './configure' from within the source directory.
# Instead, you need to run configure from outside the source directory,
# in a separate directory created for the build.
#
#
# Prerequisites:
#
# If you do not have the GMP, MPFR and MPC support libraries already installed
# as part of your operating system then there are two simple ways to proceed,
# and one difficult, error-prone way. For some reason most people choose the
# difficult way. The easy ways are:
#
# If it provides sufficiently recent versions, use your OS package management
# system to install the support libraries in standard system locations.
#
# For Debian-based systems, including Ubuntu, you should install:
# - libgmp-dev
# - libmpc-dev
# - libmpfr-dev
#
# For RPM-based systems, including Fedora and SUSE, you should install:
# - gmp-devel
# - libmpc-devel (or mpc-devel on SUSE)
# - mpfr-devel
#
# The packages will install the libraries and headers in standard system
# directories so they can be found automatically when building GCC.
#
# Alternatively, after extracting the GCC source archive, simply run the
# './contrib/download_prerequisites' script in the GCC source directory.
# That will download the support libraries and create symlinks, causing them to
# be built automatically as part of the GCC build process.
# Set 'GRAPHITE_LOOP_OPT=no' in the script if you want to build GCC without ISL,
# which is only needed for the optional Graphite loop optimizations. 
#
# The difficult way, which is not recommended, is to download the sources for
# GMP, MPFR and MPC, then configure and install each of them in non-standard
# locations.
#
# See also:
# - https://solarianprogrammer.com/2016/10/07/building-gcc-ubuntu-linux/
# - https://medium.com/@darrenjs/building-gcc-from-source-dcc368a3bb70
# """

name="gcc"
version="$(_koopa_variable "$name")"

prefix="$(_koopa_cellar_prefix)/${name}/${version}"
_koopa_exit_if_dir "$prefix"

# Check if system GCC is recent enough that we can skip building from source.
# Here we're requiring that that the major version always matches.
# This speeds up Docker builds on Linux distros with relatively recent
# configurations, such as Fedora.
# > if _koopa_is_installed "$name"
# > then
# >     current="$(_koopa_get_version "$name")"
# >     current="$(_koopa_major_version "$current")"
# >     expected="$(_koopa_major_version "$version")"
# >     if _koopa_check_version "$current" "$expected"
# >     then
# >         _koopa_note "${name} ${current} is installed. Skipping source build."
# >         exit 0
# >     fi
# > fi

_koopa_h1 "Installing ${name} ${version} at '${prefix}'."

_koopa_assert_has_no_args "$@"
_koopa_assert_has_no_envs

# default: x86_64-linux-gnu
build="$(_koopa_make_build_string)"
gnu_mirror="$(_koopa_gnu_mirror)"
jobs="$(_koopa_cpu_count)"
tmp_dir="$(_koopa_tmp_dir)"

(
    _koopa_cd_tmp_dir "$tmp_dir"
    file="${name}-${version}.tar.xz"
    url="${gnu_mirror}/${name}/${name}-${version}/${file}"
    _koopa_download "$url"
    _koopa_extract "$file"
    # Need to build outside of source code directory.
    mkdir build
    _koopa_cd build
    flags=(
        # "--enable-checking=release"
        # "--enable-languages=c,c++,fortran"
        # "--host=${build}"
        # "--program-suffix=-$(_koopa_minor_version "$version")"
        # "--target=${build}"
        "--build=${build}"
        "--disable-multilib"
        "--prefix=${prefix}"
        "-v"
    )
    "../${name}-${version}/configure" "${flags[@]}"
    make --jobs="$jobs"
    # > make check
    # > make install-strip
    make install
) 2>&1 | tee "$(_koopa_tmp_log_file)"

rm -fr "$tmp_dir"

# Keeping this cellar only for testing.
# > _koopa_link_cellar "$name" "$version"

_koopa_install_success "$name"

