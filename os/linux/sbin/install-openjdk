#!/usr/bin/env bash
set -Eeu -o pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

# """
# Don't early return if directory exists here.
# We need to ensure alternatives code runs (see below).
#
# See also:
# - https://openjdk.java.net/
# - https://jdk.java.net/13/
# """

name="openjdk"
version="$(_koopa_variable "java")"
jdk_dir="$(_koopa_openjdk_prefix)"
prefix="${jdk_dir}/${version}"
_koopa_exit_if_exists "$prefix"

name_fancy="OpenJDK ${version}"

_koopa_install_start "$name_fancy" "$prefix"

_koopa_mkdir "$jdk_dir"
tmp_dir="$(_koopa_tmp_dir)/${name}")"

(
    _koopa_cd_tmp_dir "$tmp_dir"
    file="${name}-${version}_linux-x64_bin.tar.gz"
    case "$version" in
        13)
            unique="5b8a42f3905b406298b72d750b6919f6/33"
            ;;
        13.0.1)
            unique="cec27d702aa74d5a8630c65ae61e4305/9"
            ;;
        13.0.2)
            unique="d4173c853231432d94f001e99d882ca7/8"
            ;;
        *)
            _koopa_stop "Unsupported version: '${version}'."
    esac
    url="https://download.java.net/java/GA/jdk${version}/\
${unique}/GPL/${file}"
    _koopa_download "$url"
    _koopa_extract "$file"
    _koopa_mv "jdk-${version}" "$prefix"
) 2>&1 | tee "$(_koopa_tmp_log_file)"

rm -fr "$tmp_dir"

(
    _koopa_cd "$jdk_dir"
    _koopa_ln "$version" "latest"
)

_koopa_set_permissions --recursive "$jdk_dir"

_koopa_java_update_alternatives "$prefix"

_koopa_install_success "$name_fancy"
