#!/usr/bin/env bash
set -Eeu -o pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

_koopa_h1 "Configuring virtual machine."

_koopa_assert_has_no_envs

# > export GPG_TTY=/dev/null
export FORCE_UNSAFE_CONFIGURE=1
export KOOPA_FORCE=1
export PYTHONDONTWRITEBYTECODE=true

_koopa_enable_passwordless_sudo

# FIXME Convert to a function here, so I don't resource functions.
fix-sudo-setrlimit-error

# Remove default configuration files.
sudo rm -frv /etc/skel /root
sudo mkdir -pv /root
sudo chmod 0700 /root
# > sudo mkdir -pv /etc/skel
# > sudo chmod 0755 /etc/skel

# Reactivate koopa for root user, since we removed local config files above.
# shellcheck disable=SC1090,SC2153
if [[ "$(id -u)" -eq 0 ]]
then
    set +u
    source "${KOOPA_PREFIX}/activate"
    set -u
fi

# e.g. '/usr/local/koopa'.
koopa_prefix="$(_koopa_prefix)"
# e.g. '/usr/local'.
make_prefix="$(_koopa_make_prefix)"
# e.g. '/usr/local/opt'.
# For data disk, linked to '/mnt/data01/n/opt' (see below).
app_prefix="$(_koopa_app_prefix)"

# Note that compact applies to a persistent VM with a small '/' mount.
# This is not always the case for Docker images.
compact=0

docker=0
_koopa_is_docker && docker=1
if [[ "$docker" -eq 1 ]]
then
    _koopa_info "Configuring for Docker image."
fi

config="${KOOPA_CONFIG:-}"
data_disk=
source_ip=
rsync=0

# Set up data disk and rsync configuration for persistent VM.
if [[ "$docker" -eq 0 ]]
then
    case "$config" in
        constellation-aws)
            data_disk="/mnt/data01"
            source_ip="10.201.20.32"
            ;;
        constellation-azure)
            data_disk="/data00"
            source_ip="10.100.100.132"
            ;;
    esac
    # Attempt to detect attached data disk automatically.
    # This is the current standard configuration on AWS.
    if [[ ! -e "$data_disk" ]]
    then
        [[ -e "/mnt/data01" ]] && data_disk="/mnt/data01"
    fi
    if [[ -e "$data_disk" ]]
    then
        _koopa_info "Data disk detected at '${data_disk}'."
    else
        compact=1
    fi
fi

_koopa_info "Checking available local disk space."
df -h '/'
gb_total="$(_koopa_disk_gb_total)"
[ "$gb_total" -lt 10 ] && compact=1
gb_free="$(_koopa_disk_gb_free)"
[ "$gb_free" -lt 10 ] && compact=1

if [[ "$compact" -eq 1 ]]
then
    _koopa_note "Configuring VM in compact mode."
fi

# Prepare app prefix on external disk for write access.
# e.g. '/n'.
data_disk_link="$(_koopa_data_disk_link_prefix)"
if [[ -e "$data_disk" ]] && \
    { [[ ! -L "$data_disk_link" ]] || [[ ! -L "$app_prefix" ]]; }
then
    _koopa_h2 "Symlinking '${data_disk_link}' on '${data_disk}'."
    _koopa_rm "$data_disk_link" "$app_prefix"
    # e.g. '/mnt/data01/n'.
    data_disk_real="${data_disk}${data_disk_link}"
    _koopa_ln "$data_disk_real" "$data_disk_link"
    # e.g. 'opt'.
    app_prefix_bn="$(basename "$app_prefix")"
    # e.g. '/mnt/data01/n/opt'
    app_prefix_real="${data_disk_real}/${app_prefix_bn}"
    _koopa_mkdir "$app_prefix_real"
    # e.g. '/mnt/data01/n/opt' to '/usr/local/opt'.
    _koopa_ln "$app_prefix_real" "$app_prefix"
else
    _koopa_mkdir "$app_prefix"
fi

_koopa_update_etc_profile_d
_koopa_install_dotfiles
_koopa_mkdir "$make_prefix"

_koopa_h2 "Installing base system."

_koopa_assert_is_installed install-base

if [[ "$compact" -eq 1 ]] && _koopa_is_debian
then
    install-base --compact
else
    install-base
fi

# Maybe include: tclsh
_koopa_assert_is_installed \
    autoconf \
    bc \
    bzip2 \
    g++ \
    gcc \
    gfortran \
    gzip \
    make \
    man \
    msgfmt \
    tar \
    unzip \
    xml2-config \
    xz

_koopa_assert_is_file \
    /usr/bin/gcc \
    /usr/bin/g++

if [[ "$config" == "constellation-aws" ]]
then
    # Constellation AWS  {{{1
    # --------------------------------------------------------------------------
    # Set up '/etc/profile.d'.
    _koopa_h2 "Updating '/etc/profile.d'."
    sudo ln -fnsv \
        "${koopa_prefix}/host/aws/etc/profile.d/constellation.sh" \
        "/etc/profile.d/."
    # Using '/n/opt' instead of '/n/app'.
    _koopa_rm /n/app
    # Install RStudio Server Pro, if applicable.
    if _koopa_is_matching_fixed "$HOSTNAME" awslabapp32
    then
        install-rstudio-server-pro
    fi
elif [[ "$config" == "constellation-azure" ]]
then
    # Constellation Azure  {{{1
    # --------------------------------------------------------------------------
    # Don't attempt to patch system env to support '-S' flag.
    # Should no longer be an issue on VMs, as of 2020.
    if [[ -e "/bin/env.bak" ]]
    then
        sudo rm -v "/bin/env"
        sudo mv -v "/bin/env.bak" "/bin/env"
    fi
    sudo rm -frv "/opt/jdk"
    # Set up '/etc/profile.d'.
    _koopa_h2 "Updating '/etc/profile.d'."
    sudo ln -fnsv \
        "${koopa_prefix}/host/azure/etc/profile.d/constellation.sh" \
        "/etc/profile.d/."
    # Set up '/etc/cron.d'.
    _koopa_h2 "Updating '/etc/cron.d'."
    sudo cp -fv \
        "${koopa_prefix}/host/azure/etc/cron.d/constellation" \
        "/etc/cron.d/constellation"
    # Ensure that shared bioinfo user has correct dotfiles.
    if [[ -d "${koopa_prefix}/dotfiles" ]]
    then
        _koopa_h2 "Updating bioinfo user dotfiles."
        sudo -u bioinfo -H "$SHELL" -c "\
            rm -fv ~/.bash_logout && \
            rm -fv ~/.bash_profile && \
            rm -fv ~/.bashrc && \
            rm -fv ~/.condarc && \
            /usr/local/koopa/bin/link-dotfile --force \
                app/emacs/minimal/emacs.el emacs \
        "
    fi
    # Ensure data disk has consistency directory structure.
    _koopa_h2 "Updating '${data_disk}' structure."
    sudo rm -frv "${data_disk}/"{R,bcbio,cellranger,cellranger-atac,conda,\
docker,var}
    # Install RStudio Server Pro, if applicable.
    if _koopa_is_matching_fixed "$HOSTNAME" azlabapp32
    then
        install-rstudio-server-pro
    fi
fi

if [[ -n "$source_ip" ]]
then
    host_ip="$(_koopa_local_ip_address)"
    if [[ "$source_ip" == "$host_ip" ]]
    then
        _koopa_note "Skipping rsync because '${host_ip}' is source machine."
        rsync=0
    else
        rsync=1
        rsync-vm --source-ip="$source_ip"
        # We're detecting the presence of this file in 'koopa update' call.
        touch "$(_koopa_config_prefix)/rsync"
    fi
fi

# LLVM. Always run if available, as this works well for R and Python packages.
_koopa_run_if_installed install-llvm

# Always run this because it must configure alternatives for '/bin/ on Debian
# systems or distros that support 'update-alternatives'.
install-openjdk                                                         # 0.316G

if [[ "$rsync" -eq 0 ]]
then
    # Core.
    install-cmake
    install-make
    install-autoconf
    install-automake
    install-libtool
    # Skipping this, as we can run into problems with CMake and Rcpp.
    # > install-gcc  # cellar only
    # Install texinfo before binutils, which requires makeinfo.
    install-texinfo
    install-binutils
    install-coreutils                                                   # 0.038G
    install-findutils                                                   # 0.005G
    install-patch
    install-ncurses
    install-gnupg                                                       # 0.038G
    install-grep
    install-gawk
    install-parallel

    # Shells.
    install-bash                                                        # 0.014G
    install-zsh                                                         # 0.011G
    [[ "$compact" -eq 0 ]] && install-fish                              # 0.082G

    # General tools.
    install-git                                                         # 0.177G
    install-lua                                                         # 0.001G
    install-luarocks                                                    # 0.002G

    # Environment managers.
    install-conda                                                       # 0.493G
    if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
    then
        _koopa_run_if_installed install-docker
        install-perlbrew                                                # 0.003G
        install-pyenv                                                   # 0.009G
        install-rbenv                                                   # 0.006G
        install-lmod                                                    # 0.002G
    fi

    # Password management.
    install-pass
    [[ "$docker" -eq 0 ]] && install-docker-credential-pass

    # Languages.
    install-r                                                           # 0.182G
    install-python                                                      # 0.195G
    install-perl                                                        # 0.081G
    if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
    then
        install-go                                                      # 0.338G
        install-julia                                                   # 0.339G
        install-ruby                                                    # 0.178G
        install-rust                                                    # 0.724G
    fi

    # Libraries.
    if [[ "$compact" -eq 0 ]] || [[ "$docker" -eq 1 ]]
    then
        install-geos
        install-sqlite                                                  # 0.026G
        # Install PROJ after SQLite.
        install-proj                                                    # 0.132G
        # Install GDAL after Python and PROJ.
        install-gdal                                                    # 0.611G
        # Install HDF5 after GDAL.
        install-hdf5                                                    # 0.022G
        install-gsl                                                     # 0.043G
        install-udunits
    fi

    # Shell tools.
    install-htop                                                        # 0.001G
    install-neofetch                                                    # 0.003G
    install-shellcheck                                                  # 0.008G
    install-shunit2
    install-tmux                                                        # 0.001G
    if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
    then
        install-autojump                                                # 0.000G
        # FZF requires Go.
        install-fzf                                                     # 0.003G
        install-the-silver-searcher                                     # 0.000G
    fi

    # Text editors.
    install-vim
    install-neovim                                                      # 0.029G
    # Emacs currently doesn't build easily on Docker.
    [[ "$docker" -eq 0 ]] && install-emacs

    # Bioinformatics tools.
    if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
    then
        install-aspera-connect                                          # 0.090G
        conda-create-bioinfo-envs --all
        install-bcbio-nextgen
    fi
fi

sudo ldconfig -v
_koopa_update_r_config
_koopa_update_lmod_config

# RStudio packages.
_koopa_run_if_installed install-rstudio-server
[[ "$compact" -eq 0 ]] && _koopa_run_if_installed install-shiny-server

# Cloud APIs.
# Note that Azure CLI requires Python 3, so install at the end.
_koopa_run_if_installed install-aws-cli
if [[ "$compact" -eq 0 ]]
then
    _koopa_run_if_installed \
        install-azure-cli \
        install-google-cloud-sdk
fi

# R, Python, Rust packages.
if [[ "$rsync" -eq 0 ]]
then
    install-python-packages
    if [[ -e "$data_disk" ]] || [[ "$docker" -eq 1 ]]
    then
        install-r-packages
    fi
    [[ "$compact" -eq 0 ]] && install-rust-packages
fi

# Generate an SSH key automatically, when we are outside of Docker.
[[ "$docker" -eq 0 ]] && generate-ssh-key

_koopa_set_permissions --recursive "$make_prefix"
_koopa_remove_broken_symlinks "$make_prefix"
_koopa_remove_empty_dirs "$make_prefix"

_koopa_set_permissions --recursive "$app_prefix"
_koopa_remove_broken_symlinks "$app_prefix"
_koopa_remove_empty_dirs "$app_prefix"

_koopa_fix_pyenv_permissions
_koopa_fix_rbenv_permissions
_koopa_fix_zsh_permissions

if [[ "$compact" -eq 1 ]] || [[ "$docker" -eq 1 ]]
then
    _koopa_h2 "Removing caches, logs, and temporary files."
    sudo rm -frv \
        /root/.cache \
        /tmp/* \
        /var/backups/* \
        /var/cache/* \
        /var/log/*
    if _koopa_is_debian
    then
        sudo rm -fr /var/lib/apt/lists/*
    fi
fi

_koopa_success "Configuration completed successfully."
