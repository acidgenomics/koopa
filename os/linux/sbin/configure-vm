#!/usr/bin/env bash

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

_koopa_assert_has_no_envs

# Skip building on CentOS inside Docker for the time being.
if _koopa_is_centos && _koopa_is_docker
then
    _koopa_stop "CentOS inside Docker not supported due to GDAL issues."
fi

# Argument parsing  {{{1
# ==============================================================================

# Allow custom configuration via global variable.
# e.g. 'constellation-aws'.
config="${KOOPA_CONFIG:-}"

# Default placeholders for custom config.
data_disk=
source_ip=

# Bioconductor mode skips installation of GNU utils and other dependencies that
# can take a long time to build from source.
bioconductor=0
# Compact mode applies to a persistent VM with a small '/' mount.
# This is not always the case for Docker images.
compact=0
# Docker mode skips installation of some packages (e.g. Emacs) that fail to
# install inside a container.
docker=0
# rsync mode, which depends on 'source_ip' being defined.
rsync=0

pos=()
while (("$#"))
do
    case "$1" in
        --bioconductor)
            bioconductor=1
            shift 1
            ;;
        --compact)
            compact=1
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
        --*|-*)
            _koopa_invalid_arg "$1"
            ;;
        *)
            pos+=("$1")
            shift 1
            ;;
    esac
done
set -- "${pos[@]}"

_koopa_assert_has_no_args "$@"

# Set the docker flag automatically when applicable.
_koopa_is_docker && docker=1

# Start configuration  {{{1
# ==============================================================================

_koopa_h1 "Configuring virtual machine."

if [[ "$docker" -eq 1 ]]
then
    _koopa_info "Configuring for Docker image."
fi

# Enable useful global variables that make configuration easier.
# > export GPG_TTY=/dev/null
export FORCE_UNSAFE_CONFIGURE=1
export KOOPA_FORCE=1
export PYTHONDONTWRITEBYTECODE=true

# Root user and sudo fixes  {{{1
# ==============================================================================

_koopa_enable_passwordless_sudo
_koopa_fix_sudo_setrlimit_error

# Remove default configuration files.
sudo rm -frv /etc/skel /root
sudo mkdir -pv /root
sudo chmod 0700 /root
# > sudo mkdir -pv /etc/skel
# > sudo chmod 0755 /etc/skel

# Reactivate koopa for root user, since we removed local config files above.
# shellcheck disable=SC1090,SC2153
if [[ "$(id -u)" -eq 0 ]]
then
    set +u
    source "${KOOPA_PREFIX}/activate"
    set -u
fi

# Koopa paths  {{{1
# ==============================================================================

# e.g. '/usr/local/koopa'.
koopa_prefix="$(_koopa_prefix)"
# e.g. '/usr/local'.
make_prefix="$(_koopa_make_prefix)"
# e.g. '/usr/local/opt'.
# For data disk, linked to '/mnt/data01/n/opt' (see below).
app_prefix="$(_koopa_app_prefix)"

# Local disk configuration  {{{1
# ==============================================================================

# Set up data disk and rsync configuration for persistent VM.
if [[ "$docker" -eq 0 ]]
then
    case "$config" in
        constellation-aws)
            data_disk="/mnt/data01"
            source_ip="10.201.20.32"
            ;;
        constellation-azure)
            data_disk="/data00"
            source_ip="10.100.100.132"
            ;;
    esac
    # Attempt to detect attached data disk automatically.
    # This is the current standard configuration on AWS.
    if [[ ! -e "$data_disk" ]]
    then
        [[ -e "/mnt/data01" ]] && data_disk="/mnt/data01"
    fi
    if [[ -e "$data_disk" ]]
    then
        _koopa_info "Data disk detected at '${data_disk}'."
    fi
fi

_koopa_info "Checking available local disk space."
df -h '/'
gb_total="$(_koopa_disk_gb_total)"
[ "$gb_total" -lt 10 ] && compact=1
gb_free="$(_koopa_disk_gb_free)"
[ "$gb_free" -lt 10 ] && compact=1

if [[ "$compact" -eq 1 ]]
then
    _koopa_note "Configuring VM in compact mode."
fi

# Prepare app prefix on external disk for write access.
# e.g. '/n'.
data_disk_link="$(_koopa_data_disk_link_prefix)"
if [[ -e "$data_disk" ]] && \
    { [[ ! -L "$data_disk_link" ]] || [[ ! -L "$app_prefix" ]]; }
then
    _koopa_h2 "Symlinking '${data_disk_link}' on '${data_disk}'."
    _koopa_rm "$data_disk_link" "$app_prefix"
    # e.g. '/mnt/data01/n'.
    data_disk_real="${data_disk}${data_disk_link}"
    _koopa_ln "$data_disk_real" "$data_disk_link"
    # e.g. 'opt'.
    app_prefix_bn="$(basename "$app_prefix")"
    # e.g. '/mnt/data01/n/opt'
    app_prefix_real="${data_disk_real}/${app_prefix_bn}"
    _koopa_mkdir "$app_prefix_real"
    # e.g. '/mnt/data01/n/opt' to '/usr/local/opt'.
    _koopa_ln "$app_prefix_real" "$app_prefix"
else
    _koopa_mkdir "$app_prefix"
fi

# Base system  {{{1
# ==============================================================================

_koopa_h2 "Installing base system."

_koopa_update_etc_profile_d
_koopa_install_dotfiles
_koopa_mkdir "$make_prefix"

_koopa_assert_is_installed install-base

# This install script differs depending on the Linux distro.
if [[ "$bioconductor" -eq 1 ]]
then
    install-base --bioconductor
elif [[ "$compact" -eq 1 ]] && _koopa_is_debian
then
    install-base --compact
else
    install-base
fi

# Maybe include: tclsh
_koopa_assert_is_installed \
    autoconf \
    bc \
    bzip2 \
    g++ \
    gcc \
    gfortran \
    gzip \
    make \
    man \
    msgfmt \
    tar \
    unzip \
    xml2-config \
    xz

_koopa_assert_is_file \
    /usr/bin/gcc \
    /usr/bin/g++

sudo ldconfig

# Custom config  {{{1
# ==============================================================================

if [[ "$config" == "constellation-aws" ]]
then
    # Constellation AWS  {{{2
    # --------------------------------------------------------------------------
    # Set up '/etc/profile.d'.
    _koopa_h2 "Updating '/etc/profile.d'."
    sudo ln -fnsv \
        "${koopa_prefix}/host/aws/etc/profile.d/constellation.sh" \
        "/etc/profile.d/."
    # Using '/n/opt' instead of '/n/app'.
    _koopa_rm /n/app
    # Install RStudio Server Pro, if applicable.
    if _koopa_is_matching_fixed "$HOSTNAME" awslabapp32
    then
        install-rstudio-server-pro
    fi
elif [[ "$config" == "constellation-azure" ]]
then
    # Constellation Azure  {{{2
    # --------------------------------------------------------------------------
    # Don't attempt to patch system env to support '-S' flag.
    # Should no longer be an issue on VMs, as of 2020.
    if [[ -e "/bin/env.bak" ]]
    then
        sudo rm -v "/bin/env"
        sudo mv -v "/bin/env.bak" "/bin/env"
    fi
    sudo rm -frv "/opt/jdk"
    # Set up '/etc/profile.d'.
    _koopa_h2 "Updating '/etc/profile.d'."
    sudo ln -fnsv \
        "${koopa_prefix}/host/azure/etc/profile.d/constellation.sh" \
        "/etc/profile.d/."
    # Set up '/etc/cron.d'.
    _koopa_h2 "Updating '/etc/cron.d'."
    sudo cp -fv \
        "${koopa_prefix}/host/azure/etc/cron.d/constellation" \
        "/etc/cron.d/constellation"
    # Ensure that shared bioinfo user has correct dotfiles.
    if [[ -d "${koopa_prefix}/dotfiles" ]]
    then
        _koopa_h2 "Updating bioinfo user dotfiles."
        sudo -u bioinfo -H "$SHELL" -c "\
            rm -fv ~/.bash_logout && \
            rm -fv ~/.bash_profile && \
            rm -fv ~/.bashrc && \
            rm -fv ~/.condarc && \
            /usr/local/koopa/bin/link-dotfile --force \
                app/emacs/minimal/emacs.el emacs \
        "
    fi
    # Ensure data disk has consistency directory structure.
    _koopa_h2 "Updating '${data_disk}' structure."
    sudo rm -frv "${data_disk}/"{R,bcbio,cellranger,cellranger-atac,conda,\
docker,var}
    # Install RStudio Server Pro, if applicable.
    if _koopa_is_matching_fixed "$HOSTNAME" azlabapp32
    then
        install-rstudio-server-pro
    fi
fi

# rsync mode  {{{1
# ==============================================================================

if [[ -n "$source_ip" ]]
then
    host_ip="$(_koopa_local_ip_address)"
    if [[ "$source_ip" == "$host_ip" ]]
    then
        _koopa_note "Skipping rsync because '${host_ip}' is source machine."
    else
        rsync=1
        rsync-vm --source-ip="$source_ip"
        # We're detecting the presence of this file in 'koopa update' call.
        touch "$(_koopa_config_prefix)/rsync"
    fi
fi

# LLVM  {{{1
# ==============================================================================

# On Debian/Ubuntu, this will install the latest stable release.
_koopa_run_if_installed install-llvm

# OpenJDK  {{{1
# ==============================================================================

# Install the latest release, which can vary widely across Linux distros.
install-openjdk

# GNU core  {{{1
# ==============================================================================

if [[ "$bioconductor" -eq 0 ]]
then
    install-cmake
    install-make
    install-autoconf
    install-automake
    install-libtool
    # Install texinfo before binutils, which requires makeinfo.
    install-texinfo
    install-binutils
    install-coreutils
    install-findutils
    install-patch
    install-ncurses
    install-gnupg
    install-grep
    install-gawk
    install-parallel
    # Skipping GCC, as we can run into problems with CMake and Rcpp.
    # > install-gcc  # cellar only
fi

# Shells  {{{1
# ==============================================================================

if [[ "$bioconductor" -eq 0 ]]
then
    install-bash
    install-zsh
    install-fish
fi

# General tools  {{{1
# ==============================================================================

if [[ "$bioconductor" -eq 0 ]] && [[ "$compact" -eq 0 ]]
then
    install-git
    install-lua
    install-luarocks
    install-pass
fi

# Containers and environments  {{{1
# ==============================================================================

# Docker  {{{2
# ------------------------------------------------------------------------------

if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
then
    _koopa_run_if_installed install-docker
    install-docker-credential-pass
fi

# Conda  {{{2
# ------------------------------------------------------------------------------

install-conda

# Lmod  {{{2
# ------------------------------------------------------------------------------

if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
then
    install-lmod
fi

# This will skip if Lmod isn't installed.
# Can be necessary for updating config on persistent VMs.
_koopa_update_lmod_config

# Languages  {{{1
# ==============================================================================

# Python  {{{2
# ------------------------------------------------------------------------------

# This will consistently install the latest version from source across all
# Linux distros.
install-python

# R  {{{2
# ------------------------------------------------------------------------------

# Note that this will use apt package on Debian/Ubuntu and otherwise install
# from source on other Linux distros.
if [[ "$bioconductor" -eq 0 ]]
then
    install-r
    if [[ "$compact" -eq 0 ]]
    then
        _koopa_run_if_installed \
            install-rstudio-server \
            install-shiny-server
    fi
fi

# Ensure consistent R configuration across platforms.
_koopa_update_r_config

# Secondary  {{{2
# ------------------------------------------------------------------------------

if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
then
    install-perl
    install-go
    install-julia
    install-ruby
    install-rust
fi

# Libraries  {{{1
# ==============================================================================

if [[ "$bioconductor" -eq 0 ]] && [[ "$compact" -eq 0 ]]
then
    install-geos
    install-sqlite
    # Install PROJ after SQLite.
    install-proj
    # Install GDAL after Python and PROJ.
    install-gdal
    # Install HDF5 after GDAL.
    install-hdf5
    install-gsl
    install-udunits
fi

# Shell tools  {{{1
# ==============================================================================

install-htop
install-neofetch
install-shellcheck
install-shunit2
install-tmux

if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
then
    # Autojump is currently a bit buggy with Bash in nounset mode.
    install-autojump
    # FZF requires Go.
    install-fzf
    install-the-silver-searcher
fi

# Text editors  {{{1
# ==============================================================================

install-vim
install-neovim

# Emacs currently doesn't build easily on Docker.
if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
then
    install-emacs
fi

# Language-specific packages  {{{1
# ==============================================================================

# Install these after all languages and libraries have been installed.

sudo ldconfig

# Python  {{{2
# ------------------------------------------------------------------------------

if [[ "$compact" -eq 0 ]] && [[ "$rsync" -eq 0 ]]
then
    install-python-packages
    venv-create-r-reticulate
fi

# R  {{{2
# ------------------------------------------------------------------------------

if [[ "$rsync" -eq 0 ]] &&
    { [[ -e "$data_disk" ]] || [[ "$docker" -eq 1 ]]; }
then
    install-r-packages
fi

# Rust  {{{2
# ------------------------------------------------------------------------------

# These must be built from source and are frequently updated.
if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]] && [[ "$rsync" -eq 0 ]]
then
    install-rust-packages
fi

# Bioinformatics tools  {{{1
# ==============================================================================

if [[ "$compact" -eq 0 ]] && [[ "$docker" -eq 0 ]]
then
    install-aspera-connect
    if [[ "$rsync" -eq 0 ]]
    then
        conda-create-bioinfo-envs --all
        # > install-bcbio-nextgen
    fi
fi

# Cloud APIs  {{{1
# ==============================================================================

# Note that Azure CLI requires Python 3, so install after.
_koopa_run_if_installed \
    install-aws-cli \
    install-azure-cli \
    install-google-cloud-sdk

# Generate SSH key  {{{1
# ==============================================================================

# Generate an SSH key automatically, when we are outside of Docker.
if [[ "$docker" -eq 0 ]]
then
    generate-ssh-key
fi

# Clean up  {{{1
# ==============================================================================

# Remove legacy packages  {{{2
# ------------------------------------------------------------------------------

# Ensure that perlbrew, pyenv, and rbenv are no longer installed by default.
_koopa_rm \
    "${app_prefix}/perl" \
    "${app_prefix}/python/pyenv" \
    "${app_prefix}/perl"

# Otherwise, ensure permissions are correct:
# > _koopa_fix_pyenv_permissions
# > _koopa_fix_rbenv_permissions

# Fix permissions  {{{2
# ------------------------------------------------------------------------------

_koopa_set_permissions --recursive "$make_prefix"
_koopa_set_permissions --recursive "$app_prefix"
_koopa_fix_zsh_permissions

# Remove symlinks and dirs  {{{2
# ------------------------------------------------------------------------------

_koopa_remove_broken_symlinks "$make_prefix"
_koopa_remove_broken_symlinks "$app_prefix"
_koopa_remove_empty_dirs "$make_prefix"
_koopa_remove_empty_dirs "$app_prefix"

# Remove temporary files  {{{2
# ------------------------------------------------------------------------------

if [[ "$compact" -eq 1 ]] || [[ "$docker" -eq 1 ]]
then
    _koopa_h2 "Removing caches, logs, and temporary files."
    # Don't clear '/var/log/' here, as this can mess with 'sshd'.
    sudo rm -frv \
        /root/.cache \
        /tmp/* \
        /var/backups/* \
        /var/cache/*
    if _koopa_is_debian
    then
        sudo rm -fr /var/lib/apt/lists/*
    fi
fi

_koopa_success "Configuration completed successfully."
