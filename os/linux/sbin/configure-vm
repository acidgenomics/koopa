#!/usr/bin/env bash
set -Eeu -o pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

_koopa_assert_has_no_envs

koopa_prefix="$(_koopa_prefix)"
make_prefix="$(_koopa_make_prefix)"
app_prefix="$(_koopa_app_prefix)"
config="${KOOPA_CONFIG:-unknown}"

data_disk=
source_ip=

case "$config" in
    constellation-aws)
        data_disk="/mnt/data01"
        source_ip="10.201.20.32"
        ;;
    constellation-azure)
        data_disk="/data00"
        source_ip="10.100.100.132"
        ;;
esac

_koopa_h1 "Configuring '${config}' virtual machine."

source=0

while (("$#"))
do
    case "$1" in
        --source)
            source=1
            shift 1
            ;;
        *)
            _koopa_invalid_arg "$1"
            ;;
    esac
done

# Remove default root configuration files.
sudo rm -fv "/root/."\
{bash_logout,bash_profile,bashrc,cshrc,profile,tcshrc,zshrc}

# Remove default user shell configuration files.
sudo rm -fv "/etc/skel/."\
{bash_logout,bash_profile,bashrc,cshrc,emacs,profile,tcshrc,zshrc}

# Remove local user install cruft.
rm -frv \
    "${HOME}/.local/bin/activate-global-python-argcomplete" \
    "${HOME}/.local/bin/black" \
    "${HOME}/.local/bin/blackd" \
    "${HOME}/.local/bin/distro" \
    "${HOME}/.local/bin/epylint" \
    "${HOME}/.local/bin/flake8" \
    "${HOME}/.local/bin/pipx" \
    "${HOME}/.local/bin/py.test" \
    "${HOME}/.local/bin/pyflakes" \
    "${HOME}/.local/bin/pylint" \
    "${HOME}/.local/bin/pyreverse" \
    "${HOME}/.local/bin/pytest" \
    "${HOME}/.local/bin/python-argcomplete-check-easy-install-script" \
    "${HOME}/.local/bin/python-argcomplete-tcsh" \
    "${HOME}/.local/bin/register-python-argcomplete" \
    "${HOME}/.local/bin/symilar" \
    "${HOME}/.local/bin/userpath" \
    "${HOME}/.local/lib/python3.7" \
    "${HOME}/.local/lib/python3.8" \
    "${HOME}/.local/pipx" \
    "${HOME}/.local/share/pyenv" \
    "${HOME}/.local/share/rbenv" \
    "${HOME}/.local/share/virtualenvs" \
    "${HOME}/.virtualenvs"

_koopa_enable_passwordless_sudo

# Prepare '/usr/local' for write access.
_koopa_mkdir "$make_prefix"
_koopa_set_sticky_group "$make_prefix"

# Prepare '/n/' share on data disk.
if [[ -d "$data_disk" ]]
then
    _koopa_h1 "Symlinking '/n' on '${data_disk}'."
    # e.g. '/mnt/data01/n/app'.
    app_prefix_real="${data_disk}${app_prefix}"
    sudo mkdir -pv "$app_prefix_real"
    _koopa_set_sticky_group "$app_prefix_real"
    n_real="$(dirname "$app_prefix_real")"
    sudo ln -fnsv "$n_real" "/n"
fi

if [[ "$config" == "constellation-aws" ]]
then
    # Constellation AWS                                                   # {{{1
    # --------------------------------------------------------------------------
    install-debian-base
    # Set up '/etc/profile.d'.
    _koopa_h1 "Updating '/etc/profile.d'."
    _koopa_update_profile
    sudo ln -fnsv \
        "${koopa_prefix}/host/aws/etc/profile.d/constellation.sh" \
        "/etc/profile.d/."
    # Install RStudio Server Pro, if applicable.
    if _koopa_is_matching_fixed "$HOSTNAME" awslabapp32
    then
        install-rstudio-server-pro
    fi
elif [[ "$config" == "constellation-azure" ]]
then
    # Constellation Azure                                                 # {{{1
    # --------------------------------------------------------------------------
    install-rhel-7-base
    # Don't attempt to patch system env to support '-S' flag.
    # Should no longer be an issue on VMs, as of 2020.
    if [[ -e "/bin/env.bak" ]]
    then
        sudo rm -v "/bin/env"
        sudo mv -v "/bin/env.bak" "/bin/env"
    fi
    # OpenJDK moved to '/n/app'.
    sudo rm -frv "/opt/jdk"
    # Set up '/etc/profile.d'.
    _koopa_h1 "Updating '/etc/profile.d'."
    _koopa_update_profile
    sudo ln -fnsv \
        "${koopa_prefix}/host/azure/etc/profile.d/constellation.sh" \
        "/etc/profile.d/."
    # Set up '/etc/cron.d'.
    _koopa_h1 "Updating '/etc/cron.d'."
    sudo cp -fv \
        "${koopa_prefix}/host/azure/etc/cron.d/constellation" \
        "/etc/cron.d/constellation"
    # Ensure that shared bioinfo user has correct dotfiles.
    if [[ -d "${koopa_prefix}/dotfiles" ]]
    then
        _koopa_h1 "Updating bioinfo user dotfiles."
        sudo -u bioinfo -H "$SHELL" -c "\
            rm -fv ~/.bash_logout; \
            rm -fv ~/.bash_profile; \
            rm -fv ~/.bashrc; \
            rm -fv ~/.condarc; \
            /usr/local/koopa/bin/link-dotfile --force \
                app/emacs/minimal/emacs.el emacs \
        "
    fi
    # Ensure data disk has consistency directory structure.
    _koopa_h1 "Updating '${data_disk}' structure."
    sudo rm -frv "${data_disk}/"{R,bcbio,cellranger,cellranger-atac,conda,\
docker,var}
    # Install RStudio Server Pro, if applicable.
    if _koopa_is_matching_fixed "$HOSTNAME" azlabapp32
    then
        install-rstudio-server-pro
    fi
fi

if [[ -d "$data_disk" ]] && [[ -n "$source_ip" ]]
then
    rsync-vm --data-disk="$data_disk" --source-ip="$source_ip"
fi

if [[ -d "$app_prefix" ]]
then
    install-openjdk
fi

if [[ "$source" -eq 1 ]]
then
    install-coreutils
    install-bash
    install-zsh
    install-fish
    install-tmux
    install-git
    install-gnupg
    install-lua
    install-luarocks
    install-r
    install-python
    install-vim
    install-neovim
    install-emacs
    install-sqlite
    install-proj
    install-gdal
    install-hdf5
    install-gsl
    install-perl
    install-ruby
    install-julia
    install-htop
    install-shellcheck
    install-neofetch
    install-genrich
    install-autojump
    install-the-silver-searcher
    if [[ -d "$app_prefix" ]]
    then
        # install-bcbio
        # install-cellranger
        # install-cellranger-atac
        # install-chromhmm
        # install-ensembl-perl-api
        # install-lmod
        install-conda
        install-fzf
        install-go
        install-rust
        install-perlbrew
        install-pyenv
        install-rbenv
        (conda-create-bioinfo-envs)
        (install-rust-crates)
        (pipx-install-envs)
    fi
    r-javareconf
fi

if _koopa_is_azure
then
    _koopa_h1 "Installing Azure-specific apps."
    install-azure-cli
fi

if _koopa_is_installed install-rstudio-server
then
    install-rstudio-server
fi

if _koopa_is_installed install-shiny-server
then
    install-shiny-server
fi

_koopa_update_lmod_config

_koopa_success "Configuration completed successfully."
