#!/usr/bin/env bash
set -Eeux -o pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

_koopa_assert_has_no_envs

# e.g. '/usr/local/koopa'.
koopa_prefix="$(_koopa_prefix)"
# e.g. '/usr/local'.
make_prefix="$(_koopa_make_prefix)"
# e.g. '/usr/local/opt'.
# For data disk, linked to '/mnt/data01/n/opt' (see below).
app_prefix="$(_koopa_app_prefix)"

if _koopa_is_docker
then
    docker=1
else
    docker=0
fi

config="${KOOPA_CONFIG:-}"
data_disk=
source_ip=
rsync=0

case "$config" in
    constellation-aws)
        data_disk="/mnt/data01"
        source_ip="10.201.20.32"
        ;;
    constellation-azure)
        data_disk="/data00"
        source_ip="10.100.100.132"
        ;;
esac

if [[ -n "$config" ]]
then
    _koopa_h1 "Configuring '${config}' virtual machine."
else
    _koopa_h1 "Configuring virtual machine."
fi

export FORCE_UNSAFE_CONFIGURE=1
fix-sudo-setrlimit-error

# Remove default root configuration files.
sudo rm -fv "/root/."\
{bash_logout,bash_profile,bashrc,cshrc,profile,tcshrc,zshrc}

# Remove default user shell configuration files.
sudo rm -fv "/etc/skel/."\
{bash_logout,bash_profile,bashrc,cshrc,emacs,profile,tcshrc,zshrc}

# Remove local user install cruft.
rm -frv \
    "${HOME}/.local/bin/activate-global-python-argcomplete" \
    "${HOME}/.local/bin/black" \
    "${HOME}/.local/bin/blackd" \
    "${HOME}/.local/bin/distro" \
    "${HOME}/.local/bin/epylint" \
    "${HOME}/.local/bin/flake8" \
    "${HOME}/.local/bin/pipx" \
    "${HOME}/.local/bin/py.test" \
    "${HOME}/.local/bin/pyflakes" \
    "${HOME}/.local/bin/pylint" \
    "${HOME}/.local/bin/pyreverse" \
    "${HOME}/.local/bin/pytest" \
    "${HOME}/.local/bin/python-argcomplete-check-easy-install-script" \
    "${HOME}/.local/bin/python-argcomplete-tcsh" \
    "${HOME}/.local/bin/register-python-argcomplete" \
    "${HOME}/.local/bin/symilar" \
    "${HOME}/.local/bin/userpath" \
    "${HOME}/.local/lib/python3.7" \
    "${HOME}/.local/lib/python3.8" \
    "${HOME}/.local/pipx" \
    "${HOME}/.local/share/pyenv" \
    "${HOME}/.local/share/rbenv" \
    "${HOME}/.local/share/virtualenvs" \
    "${HOME}/.virtualenvs"

_koopa_enable_passwordless_sudo
_koopa_update_etc_profile_d
_koopa_mkdir "$make_prefix"

# Prepare app prefix on external disk for write access.
# e.g. '/n'.
dd_link="$(_koopa_data_disk_link_prefix)"
if [[ -d "$data_disk" ]] && \
    { [[ ! -L "$dd_link" ]] || [[ ! -L "$app_prefix" ]]; }
then
    _koopa_h2 "Symlinking '${dd_link}' on '${data_disk}'."
    _koopa_rm "$dd_link" "$app_prefix"
    # e.g. '/mnt/data01/n'.
    dd_real="${data_disk}${dd_link}"
    _koopa_ln "$dd_real" "$dd_link"
    # e.g. 'opt'.
    app_prefix_bn="$(basename "$app_prefix")"
    # e.g. '/mnt/data01/n/opt'
    app_prefix_real="${dd_real}/${app_prefix_bn}"
    _koopa_mkdir "$app_prefix_real"
    # e.g. '/mnt/data01/n/opt' to '/usr/local/opt'.
    _koopa_ln "$app_prefix_real" "$app_prefix"
else
    _koopa_mkdir "$app_prefix"
fi

_koopa_h2 "Installing base system."

if _koopa_is_alpine
then
    install-alpine-base
elif _koopa_is_arch
then
    install-arch-base
elif _koopa_is_debian
then
    install-debian-base --all
elif _koopa_is_fedora
then
    install-fedora-base --all
elif _koopa_is_opensuse
then
    install-opensuse-base
fi

_koopa_is_rhel_7 && install-rhel-7-base
_koopa_is_rhel_8 && install-rhel-8-base

_koopa_assert_is_installed \
    autoconf \
    bc \
    bzip2 \
    g++ \
    gcc \
    gfortran \
    gzip \
    make \
    msgfmt \
    tar \
    tclsh \
    xz

if [[ "$config" == "constellation-aws" ]]
then
    # Constellation AWS  {{{1
    # --------------------------------------------------------------------------
    # Set up '/etc/profile.d'.
    _koopa_h2 "Updating '/etc/profile.d'."
    sudo ln -fnsv \
        "${koopa_prefix}/host/aws/etc/profile.d/constellation.sh" \
        "/etc/profile.d/."
    # Using '/n/opt' instead of '/n/app'.
    _koopa_rm /n/app
    # Install RStudio Server Pro, if applicable.
    if _koopa_is_matching_fixed "$HOSTNAME" awslabapp32
    then
        install-rstudio-server-pro
    fi
elif [[ "$config" == "constellation-azure" ]]
then
    # Constellation Azure  {{{1
    # --------------------------------------------------------------------------
    # Don't attempt to patch system env to support '-S' flag.
    # Should no longer be an issue on VMs, as of 2020.
    if [[ -e "/bin/env.bak" ]]
    then
        sudo rm -v "/bin/env"
        sudo mv -v "/bin/env.bak" "/bin/env"
    fi
    sudo rm -frv "/opt/jdk"
    # Set up '/etc/profile.d'.
    _koopa_h2 "Updating '/etc/profile.d'."
    sudo ln -fnsv \
        "${koopa_prefix}/host/azure/etc/profile.d/constellation.sh" \
        "/etc/profile.d/."
    # Set up '/etc/cron.d'.
    _koopa_h2 "Updating '/etc/cron.d'."
    sudo cp -fv \
        "${koopa_prefix}/host/azure/etc/cron.d/constellation" \
        "/etc/cron.d/constellation"
    # Ensure that shared bioinfo user has correct dotfiles.
    if [[ -d "${koopa_prefix}/dotfiles" ]]
    then
        _koopa_h2 "Updating bioinfo user dotfiles."
        sudo -u bioinfo -H "$SHELL" -c "\
            rm -fv ~/.bash_logout; \
            rm -fv ~/.bash_profile; \
            rm -fv ~/.bashrc; \
            rm -fv ~/.condarc; \
            /usr/local/koopa/bin/link-dotfile --force \
                app/emacs/minimal/emacs.el emacs \
        "
    fi
    # Ensure data disk has consistency directory structure.
    _koopa_h2 "Updating '${data_disk}' structure."
    sudo rm -frv "${data_disk}/"{R,bcbio,cellranger,cellranger-atac,conda,\
docker,var}
    # Install RStudio Server Pro, if applicable.
    if _koopa_is_matching_fixed "$HOSTNAME" azlabapp32
    then
        install-rstudio-server-pro
    fi
fi

if [[ -d "$data_disk" ]] && [[ -n "$source_ip" ]]
then
    host_ip="$(ip-address)"
    if [[ "$source_ip" == "$host_ip" ]]
    then
        _koopa_note "Skipping rsync because '${host_ip}' is source machine."
        rsync=0
    else
        rsync=1
        rsync-vm --source-ip="$source_ip"
        # We're detecting the presence of this file in 'koopa update' call.
        touch "$(_koopa_config_prefix)/rsync"
    fi
fi

# Compilers.
if [[ "$docker" -eq 0 ]]
then
    # /usr/lib/llvm-9                                                   # 0.285G
    _koopa_run_if_installed install-llvm
fi

# Always run this because it must configure java alternatives.
if ! _koopa_is_alpine
then
    install-openjdk                                                     # 0.316G
fi

if [[ "$rsync" -eq 0 ]]
then
    # Environment managers.
    if ! _koopa_is_alpine && ! _koopa_is_opensuse
    then
        install-conda                                                   # 0.493G
    fi
    if [[ "$docker" -eq 0 ]]
    then
        _koopa_run_if_installed install-docker
        install-perlbrew                                                # 0.003G
        install-pyenv                                                   # 0.009G
        install-rbenv                                                   # 0.006G
        install-lmod                                                    # 0.002G
    fi

    # Core.
    install-coreutils                                                   # 0.038G
    install-findutils                                                   # 0.005G
    install-grep
    install-parallel
    install-patch

    # Shells.
    if ! _koopa_is_alpine
    then
        install-bash                                                    # 0.014G
    fi
    install-zsh                                                         # 0.011G
    if [[ "$docker" -eq 0 ]]
    then
        install-fish                                                    # 0.082G
    fi

    # General tools.
    install-git                                                         # 0.177G
    if [[ "$docker" -eq 0 ]]
    then
        install-gnupg                                                   # 0.038G
        install-lua                                                     # 0.001G
        install-luarocks                                                # 0.002G
    fi

    # Password management.
    if [[ "$docker" -eq 0 ]]
    then
        install-pass
        install-docker-credential-pass
    fi

    # Languages.
    install-r                                                           # 0.182G
    install-python                                                      # 0.195G
    install-perl                                                        # 0.081G
    if [[ "$docker" -eq 0 ]]
    then
        install-go                                                      # 0.338G
        install-julia                                                   # 0.339G
        install-ruby                                                    # 0.178G
        install-rust                                                    # 0.724G
    fi

    # Heavy libraries.
    if [[ "$docker" -eq 0 ]]
    then
        install-geos
        install-sqlite                                                  # 0.026G
        install-proj                # install after sqlite              # 0.132G
        install-gdal                # requires proj, python; slow       # 0.611G
        install-hdf5                # requires gdal                     # 0.022G
        install-gsl                                                     # 0.043G
    fi

    # Shell tools.
    install-htop                                                        # 0.001G
    install-neofetch                                                    # 0.003G
    install-shellcheck                                                  # 0.008G
    install-shunit2
    install-tmux                                                        # 0.001G
    if [[ "$docker" -eq 0 ]]
    then
        install-autojump                                                # 0.000G
        install-fzf                 # requires go                       # 0.003G
        install-the-silver-searcher                                     # 0.000G
    fi

    # Text editors.
    install-vim
    if [[ "$docker" -eq 0 ]]
    then
        install-emacs               # can't build on docker             #     NA
        install-neovim                                                  # 0.029G
    fi

    # Bioinformatics tools.
    if [[ "$docker" -eq 0 ]]
    then
        install-aspera-connect                                          # 0.090G
    fi

    # Software packages.
    install-python-packages
    if [[ "$docker" -eq 0 ]]
    then
        install-rust-packages
        _koopa_link_r_site_library
        install-r-packages
        conda-create-bioinfo-envs --all
        install-bcbio
    fi
fi

_koopa_link_r_etc
_koopa_link_r_site_library
_koopa_r_javareconf

if [[ "$docker" -eq 0 ]]
then
    _koopa_run_if_installed \
        install-rstudio-server \
        install-shiny-server
    _koopa_update_lmod_config
fi

# Cloud APIs.
# Note that Azure CLI requires Python 3, so install at the end.
_koopa_run_if_installed \
    install-aws-cli-2 \
    install-azure-cli \
    install-google-cloud-sdk

if [[ "$docker" -eq 0 ]]
then
    generate-ssh-key
fi

_koopa_set_permissions --recursive "$make_prefix"
_koopa_remove_broken_symlinks "$make_prefix"

_koopa_set_permissions --recursive "$app_prefix"
_koopa_remove_broken_symlinks "$app_prefix"

_koopa_fix_pyenv_permissions
_koopa_fix_rbenv_permissions

if [[ "$docker" -eq 1 ]]
then
    _koopa_h2 "Performing cleanup for Docker image."
    sudo rm -frv /root/.cache
    if _koopa_is_debian
    then
        sudo rm -rf /var/lib/apt/lists/*
    fi
fi

_koopa_success "Configuration completed successfully."
koopa check
