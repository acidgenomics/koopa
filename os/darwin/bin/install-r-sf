#!/usr/bin/env bash

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)"
# shellcheck source=/dev/null
source "${script_dir}/../include/header.sh"

# """
# Note that osgeo-gdal (GDAL 3) Homebrew recipe doesn't work.
# Fall back to using gdal (GDAL 2) recipe instead.
#
# Versions (2020-03-04):
# - GDAL: 2.4.4
# - GEOS: 3.8.0
# - PROJ: 6.3.1
#
#
# Seeing this error with osgeo-gdal linked still:
#
# checking GDAL: checking whether PROJ is available for linking:... no
# Undefined symbols for architecture x86_64:
#  "OGRCreateCoordinateTransformation(OGRSpatialReference const*,
#  OGRSpatialReference const*)", referenced from:
#      _main in gdal_proj-565155.o
# ld: symbol(s) not found for architecture x86_64
# clang-7: error: linker command failed with exit code 1
#   (use -v to see invocation)
# configure: Install failure: compilation and/or linkage problems.
# configure: error: cannot link projection code
# ERROR: configuration failed for package ‘sf’
#
# See also:
# https://github.com/r-spatial/sf/issues/1207
#
# Alternatively, this works:
# > brew unlink osgeo-gdal
# > brew unlink osgeo-hdf4
# > brew unlink osgeo-libgeotiff
# > brew unlink osgeo-libkml
# > brew unlink osgeo-libspatialite
# > brew unlink osgeo-netcdf
# > brew unlink osgeo-postgresql
# > brew unlink osgeo-proj
# > brew link gdal
# > brew link proj
# """

_koopa_assert_is_installed Rscript

Rscript -e "\
    install.packages(
        pkgs = \"sf\",
        type = \"source\",
        configure.args = paste(
            \"--with-gdal-config=/usr/local/opt/gdal/bin/gdal-config\",
            \"--with-geos-config=/usr/local/opt/geos/bin/geos-config\",
            \"--with-proj-data=/usr/local/opt/proj/share/proj\",
            \"--with-proj-include=/usr/local/opt/proj/include\",
            \"--with-proj-lib=/usr/local/opt/proj/lib\",
            \"--with-proj-share=/usr/local/opt/proj/share\"
        )
    )"
