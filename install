#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091
set -Ee -o pipefail

# Error on root user.
if [[ "$(id -u)" -eq 0 ]]
then
    >&2 echo "Error: Don't install koopa as root."
    exit 1
fi

usage() {
cat << EOF
usage: install [--help|-h] [--shared] [--dotfiles] [--mike]

Install koopa.

optional arguments:
  --help, -h
        Show this help message and exit.
  --shared
        Enable shared user configuration via '/etc/profile.d/zzz-koopa.sh' file.
        Linux only. Not supported on macOS.
  --dotfiles
        Clone the dotfiles repo (https://github.com/mjsteinbaugh/dotfiles)
        and automatically symlink recommended default configuration files.
  --mike
        Install Mike-specific configuration.
        This flag automatically enables '--dotfiles'.

note:
    Bash script.
    Updated 2019-11-04.
EOF
}

dotfiles=0
mike=0
shared=0

while (("$#"))
do
    case "$1" in
        --help|-h)
            usage
            exit 0
            ;;
        --dotfiles)
            dotfiles=1
            shift 1
            ;;
        --mike)
            mike=1
            shift 1
            ;;
        --shared)
            shared=1
            shift 1
            ;;
        --) 
            shift 1
            break
            ;;
        --*|-*)
            >&2 echo "Error: Invalid argument: '${1}'."
            exit 1
            ;;
    esac
done

# Automatically clone dotfiles in Mike mode.
if [[ "$mike" -eq 1 ]]
then
    dotfiles=1
fi

_koopa_group() {
    if groups | grep -Eq "\b(admin)\b"
    then
        group="admin"
    elif groups | grep -Eq "\b(sudo)\b"
    then
        group="sudo"
    elif groups | grep -Eq "\b(wheel)\b"
    then
        group="wheel"
    else
        group="$(whoami)"
    fi
}

_koopa_has_sudo() {
    groups | grep -Eq "\b(admin|sudo|wheel)\b"
}

_koopa_is_linux() {
    [[ "$(uname -s)" == "Linux" ]]
}

# In a piped install script call, we'll clone the repo from GitHub first.
if [[ -z "${BASH_SOURCE[0]}" ]]
then
    export KOOPA_PIPED_INSTALL=1
    source_repo="https://github.com/acidgenomics/koopa.git"
    if [[ "$shared" -eq 1 ]]
    then
        # Previously '/usr/local' until 2019-11-14.
        prefix="/n/app"
    else
        XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
        prefix="$XDG_DATA_HOME"
    fi
    target_dir="${prefix}/koopa"
    # Error if target destination directory already exists.
    if [[ -d "$target_dir" ]]
    then
        >&2 echo "Error: Directory exists: '${target_dir}'."
        exit 1
    fi
    # Set correct admin permissions, if applicable.
    if [[ "$shared" -eq 1 ]]
    then
        if ! _koopa_has_sudo
        then
            >&2 echo "Error: sudo is required for shared installation."
            exit 1
        fi
        sudo mkdir -pv "$target_dir"
        group="$(_koopa_group)"
        sudo chgrp "$group" "$target_dir"
        sudo chmod g+w "$target_dir"
        if _koopa_is_linux
        then
            sudo chgrp -Rh "$group" "$prefix"
            sudo chmod g+w -R "$prefix"
            sudo chmod g+s "$prefix"
        fi
    fi
    git clone --recursive "$source_repo" "$target_dir"
    KOOPA_PREFIX="$target_dir"
else
    KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")" \
        >/dev/null 2>&1 && pwd -P)"
fi
export KOOPA_PREFIX

rm -frv "${KOOPA_PREFIX}/"{config,include}
rm -frv "${KOOPA_PREFIX}/bin/"{host,os,sudo}

echo "Activating koopa."
force=1 source "${KOOPA_PREFIX}/activate"

if [[ "$shared" -eq 0 ]] && echo "$KOOPA_PREFIX" | grep -qE "^/(opt|usr)/"
then
    echo "Shared installation detected at '${KOOPA_PREFIX}'"
    shared=1
fi

if [[ "$shared" -eq 1 ]]
then
    _koopa_update_profile
fi

if [[ "$mike" -eq 1 ]]
then
    _koopa_install_mike
elif [[ "$dotfiles" -eq 1 ]]
then
    install-dotfiles
fi

echo "Installation was successful."
