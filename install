#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091
set -Ee -o pipefail



# Pre-flight checks                                                         {{{1
# ==============================================================================

# Error on root user.
if [[ "$(id -u)" -eq 0 ]]
then
    >&2 echo "Error: Don't install koopa as root."
    exit 1
fi



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
usage: install [--help|-h] [--shared] [--dotfiles] [--mike]

Install koopa.

optional arguments:
  --help, -h
        Show this help message and exit.
  --shared
        Enable shared user configuration via '/etc/profile.d/zzz-koopa.sh' file.
        Linux only. Not supported on macOS.
  --dotfiles
        Clone the dotfiles repo (https://github.com/mjsteinbaugh/dotfiles)
        and automatically symlink recommended default configuration files.
  --mike
        Install Mike-specific configuration.
        This flag automatically enables '--dotfiles'.

note:
    Bash script.
    Updated 2019-10-23.
EOF
}



# Arguments                                                                 {{{1
# ==============================================================================

dotfiles=0
mike=0
shared=0

while (("$#"))
do
    case "$1" in
        --help|-h)
            usage
            exit 0
            ;;
        --dotfiles)
            dotfiles=1
            shift 1
            ;;
        --mike)
            mike=1
            shift 1
            ;;
        --shared)
            shared=1
            shift 1
            ;;
        --) 
            shift 1
            break
            ;;
        --*|-*)
            >&2 echo "Error: Invalid argument: '${1}'."
            exit 1
            ;;
    esac
done

# Automatically clone dotfiles in Mike mode.
if [[ "$mike" -eq 1 ]]
then
    dotfiles=1
fi



# Functions                                                                 {{{1
# ==============================================================================

_koopa_group() {
    if groups | grep -Eq "\b(admin)\b"
    then
        group="admin"
    elif groups | grep -Eq "\b(sudo)\b"
    then
        group="sudo"
    elif groups | grep -Eq "\b(wheel)\b"
    then
        group="wheel"
    else
        group="$(whoami)"
    fi
}

_koopa_has_sudo() {
    groups | grep -Eq "\b(admin|sudo|wheel)\b"
}

_koopa_is_linux() {
    [[ "$(uname -s)" == "Linux" ]]
}



# Script                                                                    {{{1
# ==============================================================================

# In a piped install script call, clone the repo from GitHub first.
if [[ -z "${BASH_SOURCE[0]}" ]]
then
    export KOOPA_PIPED_INSTALL=1
    source_repo="https://github.com/acidgenomics/koopa.git"
    if [[ "$shared" -eq 1 ]]
    then
        prefix="/usr/local"
    else
        XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
        prefix="$XDG_DATA_HOME"
    fi
    target_dir="${prefix}/koopa"
    # Error if target destination directory already exists.
    if [[ -d "$target_dir" ]]
    then
        >&2 echo "Error: Directory exists: '${target_dir}'."
        exit 1
    fi
    # Set correct admin permissions, if applicable.
    if [[ "$shared" -eq 1 ]]
    then
        if ! _koopa_has_sudo
        then
            >&2 echo "Error: sudo is required for shared installation."
            exit 1
        fi
        sudo mkdir -pv "$target_dir"
        group="$(_koopa_group)"
        sudo chgrp "$group" "$target_dir"
        sudo chmod g+w "$target_dir"
        # Ensure build prefix is group writable, for cellar scripts.
        if _koopa_is_linux
        then
            sudo chgrp -Rh "$group" "$prefix"
            sudo chmod g+w -R /usr/local
            sudo chmod g+s /usr/local
        fi
    fi
    git clone --recursive "$source_repo" "$target_dir"
    KOOPA_HOME="$target_dir"
else
    KOOPA_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")" \
        >/dev/null 2>&1 && pwd -P)"
fi
export KOOPA_HOME

# Remove legacy cruft                                                       {{{2
# ------------------------------------------------------------------------------

rm -frv "${KOOPA_HOME}/"{config,include}
rm -frv "${KOOPA_HOME}/bin/"{host,os,sudo}

# Activate koopa                                                            {{{2
# ------------------------------------------------------------------------------

echo "Activating koopa."
force=1 source "${KOOPA_HOME}/activate"

# Shared user configuration                                                 {{{2
# ------------------------------------------------------------------------------

# Check for shared installation automatically.
if [[ "$shared" -eq 0 ]] && echo "$KOOPA_HOME" | grep -qE "^/(opt|usr)/"
then
    echo "Shared installation detected at '${KOOPA_HOME}'"
    shared=1
fi

# Configure shared profile automatically.
if [[ "$shared" -eq 1 ]]
then
    _koopa_update_profile
fi

# Dot files                                                                 {{{2
# ------------------------------------------------------------------------------

if [[ "$dotfiles" -eq 1 ]]
then
    echo "Configuring dotfiles."
    # Clone dotfiles repo, if necessary.
    if [[ ! -d "${KOOPA_HOME}/dotfiles" ]]
    then
        install-dotfiles
    fi
    # Always create these dotfiles.
    link-dotfile --force "condarc"
    link-dotfile --force "gitignore"
    link-dotfile --force "spacemacs"
    link-dotfile --force "tmux.conf"
    link-dotfile --force "vim"
    link-dotfile --force "vimrc"
    # Create local config files.
    if [[ "$shared" -eq 0 ]]
    then
        host_type="$(_koopa_host_type)"
        os_type="$(_koopa_os_type)"
        link-dotfile --force "Rprofile"
        link-dotfile --force "bash_profile"
        link-dotfile --force "bashrc"
        link-dotfile --force "kshrc"
        link-dotfile --force "shrc"
        link-dotfile --force "zshrc"
        # R
        if [[ "$os_type" == "darwin" ]]
        then
            link-dotfile --force "os/darwin/R"
        elif [[ "$host_type" == "harvard-o2" ]]
        then
            link-dotfile --force "host/harvard-o2/Renviron"
        elif [[ "$host_type" == "harvard-odyssey" ]]
        then
            link-dotfile --force "host/harvard-odyssey/Renviron"
        fi
    fi
    # Add Mike-specific dotfiles, if necessary.
    if [[ "$mike" -eq 1 ]]
    then
        source_repo="git@github.com:mjsteinbaugh/dotfiles-private.git"
        target_dir="$(_koopa_config_dir)/dotfiles-private"
        if [[ ! -d "$target_dir" ]]
        then
            git clone "$source_repo" "$target_dir"
        fi
        if _koopa_is_darwin
        then
            link-dotfile --force os/darwin/gitconfig
        else
            link-dotfile --force gitconfig
        fi
        link-dotfile --force --private Rsecrets
        link-dotfile --force --private secrets
        link-dotfile --force --private travis
        link-dotfile --force Rprofile
        link-dotfile --force forward
    fi
fi

# Additional                                                                {{{2
# ------------------------------------------------------------------------------

# Mike-specific configuration.
if [[ "$mike" -eq 1 ]]
then
    # Ensure the koopa remote is using SSH and not HTTPS.
    (
        cd "$KOOPA_HOME" || exit 1
        git remote set-url origin git@github.com:acidgenomics/koopa.git
    )
    
    # Clone the docker repo.
    source_repo="git@github.com:acidgenomics/docker.git"
    target_dir="$(_koopa_config_dir)/docker"
    if [[ ! -d "$target_dir" ]]
    then
        git clone --recursive "$source_repo" "$target_dir"
    fi

    # Clone the scripts-private repo.
    source_repo="git@github.com:mjsteinbaugh/scripts-private.git"
    target_dir="$(_koopa_config_dir)/scripts-private"
    if [[ ! -d "$target_dir" ]]
    then
        git clone --recursive "$source_repo"  "$target_dir"
    fi
fi

echo "Installation was successful."
