#!/usr/bin/env bash
set -Eeu -o pipefail

# """
# koopa shell
# https://koopa.acidgenomics.com/
# Refer to 'LICENSE' file for terms of usage.
#
# Note that ancient versions of Bash (e.g. < 4; macOS) don't support the '-i'
# flag for 'read', so we're handling that case here. Alternatively, can use
# '-n 1' for single letter 'y/n' prompt.
#
# Note that we can use 'cp -T' on Linux to avoid subdirectory creation, but this
# doesn't work on macOS because the coreutils are ancient. So instead, we're
# removing the directory right before creation.
# """

koopa:::install_koopa_usage() { # {{{1
    # """
    # Help usage for koopa installer.
    # @note Updated 2021-05-15.
    # """
cat << END
usage: install [--help|-h] [--non-interactive] [--test]

Install koopa.

Optional arguments:
    --help, -h
        Show this help message and exit.
    --non-interactive
        Don't prompt about configuration variables.
    --prefix=PREFIX
        Set the installation path prefix.
        Defaults to '/opt/koopa' for shared installs,
        and '\${XDG_DATA_HOME}/koopa' when installing for current user only.
        Note that attempting to install into /opt' or '/usr/local' requires
        administrator (sudo) permissions.
    --verbose; or --test
        Verbose (test) mode.
        Recommended for Travis CI checks and building Docker images.

Non-interactive configuration arguments:
    --dotfiles (default); --no-dotfiles
        Install dot files from https://github.com/acidgenomics/dotfiles?
    --passwordless-sudo; --no-passwordless-sudo (default)
        Enable passwordless sudo. Can be a potential security risk.
    --profile (default); --no-profile
        Automatically add koopa activation to shell configuration file. Note
        that if configuration file is a symlink, this will skip.
        Config file per shell:
        - Bash: ~/.bashrc
        - Dash: ~/.profile
        - Zsh: ~/.zshrc
    --shared (default); --no-shared
        Install for all users, if current user has administrator (sudo)
        permissions. Otherwise, install for current user only.
END
}

koopa:::stop() { # {{{1
    # """
    # Print error messages to the console and abort.
    # @note Updated 2021-05-14.
    # """
    local arg
    for arg in "$@"
    do
        printf 'ERROR: %s\n' "$arg" >&2
    done
    exit 1
}

koopa::install_koopa() { # {{{1
    # """
    # Install koopa.
    # @note Updated 2021-05-14.
    # """
    local dict
    declare -A dict=(
        [dotfiles]=1
        [interactive]=1
        [koopa_prefix]=''
        [modify_user_profile]=0
        [passwordless]=0
        [test]=0
    )
    while (("$#"))
    do
        case "$1" in
            --help|-h)
                koopa:::install_koopa_usage
                return 0
                ;;
            --dotfiles)
                dict[dotfiles]=1
                shift 1
                ;;
            --interactive)
                dict[interactive]=1
                shift 1
                ;;
            --no-dotfiles)
                dict[dotfiles]=0
                shift 1
                ;;
            --no-passwordless-sudo)
                dict[passwordless]=0
                shift 1
                ;;
            --no-profile)
                dict[modify_user_profile]=0
                shift 1
                ;;
            --no-shared)
                dict[shared]=0
                shift 1
                ;;
            --no-test|--no-verbose)
                dict[test]=0
                shift 1
                ;;
            --non-interactive)
                dict[interactive]=0
                shift 1
                ;;
            --passwordless-sudo)
                dict[passwordless]=1
                shift 1
                ;;
            --profile)
                dict[modify_user_profile]=1
                shift 1
                ;;
            --prefix=*)
                dict[koopa_prefix]="${1#*=}"
                shift 1
                ;;
            --shared)
                dict[shared]=1
                shift 1
                ;;
            --test|--verbose)
                dict[test]=1
                shift 1
                ;;
            *)
                koopa:::stop "Invalid arg: '${1:?}'."
                ;;
        esac
    done

    # Pre-flight checks {{{1
    # ==========================================================================

    if [[ -d "${KOOPA_PREFIX:-}" ]]
    then
        koopa:::stop "Koopa is already installed at '${KOOPA_PREFIX}'."
    fi
    unset KOOPA_PREFIX
    dict[script_dir]="$( \
        cd "$(dirname "${BASH_SOURCE[0]}")" \
        &>/dev/null \
        && pwd -P \
    )"
    KOOPA_FORCE=1
    KOOPA_TEST="${dict[test]}"
    export KOOPA_FORCE KOOPA_TEST
    # shellcheck source=/dev/null
    . "${dict[script_dir]}/lang/shell/bash/include/header.sh" || return 1
    if [[ -z "${KOOPA_PREFIX:-}" ]]
    then
        koopa:::stop "Installer failed to set 'KOOPA_PREFIX'."
    fi
    # Ensure existing user configuration gets removed.
    dict[config_prefix]="$(koopa::config_prefix)"
    koopa::rm "${dict[config_prefix]}"

    # Additional non-interactive pre-configuration {{{1
    # ==========================================================================

    # Locate the user configuration profile (e.g. '~/.bashrc').
    dict[user_profile]="$(koopa::find_user_profile)"
    # Set the default install prefix.
    if [[ -z "${dict[koopa_prefix]:-}" ]]
    then
        dict[xdg_data_home]="${XDG_DATA_HOME:-${HOME:?}/.local/share}"
        dict[koopa_prefix_user]="${dict[xdg_data_home]}/koopa"
        dict[koopa_prefix_system]='/opt/koopa'
        if [[ "${dict[shared]}" -eq 1 ]]
        then
            dict[koopa_prefix]="${dict[koopa_prefix_system]}"
        else
            dict[koopa_prefix]="${dict[koopa_prefix_user]}"
        fi
    fi
    # Set whether we want to install for all users.
    if [[ -z "${dict[shared]:-}" ]]
    then
        if koopa::is_admin
        then
            dict[shared]=1
        else
            dict[shared]=0
        fi
    fi

    # Interactive configuration {{{1
    # ==========================================================================

    if [[ "${dict[interactive]}" -eq 1 ]]
    then
        # Install for all users? {{{2
        # ----------------------------------------------------------------------

        if [[ "${dict[shared]}" -eq 1 ]] && \
            [[ -z "${dict[koopa_prefix]}" ]]
        then
            dict[shared]="$( \
                koopa::read_yn \
                    'Install for all users' \
                    "${dict[shared]}" \
            )"
            if [[ "${dict[shared]}" -eq 1 ]]
            then
                dict[koopa_prefix]="${dict[koopa_prefix_system]}"
            else
                dict[koopa_prefix]="${dict[koopa_prefix_user]}"
            fi
        fi

        # Target installation prefix {{{2
        # ----------------------------------------------------------------------

        dict[koopa_prefix]="$( \
            koopa::read \
                'Install prefix' \
                "${dict[koopa_prefix]}" \
        )"
        # Catch if the user is attempting to install into a shared space.
        if [[ "${dict[shared]}" -eq 0 ]] && \
            ! koopa::str_match_regex "${dict[koopa_prefix]}" "^${HOME:?}"
        then
            dict[shared]=1
        fi

        # Passwordless sudo {{{2
        # ----------------------------------------------------------------------

        # Prompt if the user wants to enable passwordless sudo.
        if [[ "${dict[shared]}" -eq 1 ]]
        then
            dict[passwordless]="$( \
                koopa::read_yn \
                    'Enable passwordless sudo' \
                    "${dict[passwordless]}" \
            )"
        fi

        # Dotfiles {{{2
        # ----------------------------------------------------------------------

        # Check if a user profile already exists, and alert.
        if [[ -e "${dict[user_profile]}" ]]
        then
            koopa::alert_note \
                "User profile exists: '${dict[user_profile]}'." \
                'This will be overwritten if dotfiles are linked.'
        fi
        # Prompt the user if we want to link dot files.
        dict[dotfiles]="$( \
            koopa::read_yn \
                'Install and link dotfiles' \
                "${dict[dotfiles]}" \
        )"

        # User profile {{{2
        # ----------------------------------------------------------------------

        if ! koopa::is_defined_in_user_profile && \
            [[ ! -L "${dict[user_profile]}" ]]
        then
            koopa::alert_note 'Koopa activation missing in user profile.'
            dict[modify_user_profile]="$( \
                koopa::read_yn \
                    "Modify '${dict[user_profile]}'" \
                    "${dict[modify_user_profile]}" \
            )"
        fi
    fi

    # Perform installation {{{1
    # ==========================================================================

    # Copy files from temporary directory {{{2
    # --------------------------------------------------------------------------

    # Alternatively, can consider using rsync here instead of cp.
    koopa::alert "Installing koopa at '${dict[koopa_prefix]}'."
    koopa::assert_is_non_existing "${dict[koopa_prefix]}"
    if [[ "${dict[shared]}" -eq 1 ]]
    then
        koopa::alert_info 'Shared installation detected.'
        koopa::alert_note 'Admin (sudo) permissions are required.'
        koopa::assert_is_admin
        koopa::rm -S "${dict[koopa_prefix]}"
        koopa::cp -S "${dict[script_dir]}" "${dict[koopa_prefix]}"
        koopa::sys_set_permissions -r "${dict[koopa_prefix]}"
        koopa::add_make_prefix_link "${dict[koopa_prefix]}"
    else
        koopa::cp "${dict[script_dir]}" "${dict[koopa_prefix]}"
    fi

    # Activate koopa {{{1
    # ==========================================================================

    koopa::alert "Activating koopa at '${dict[koopa_prefix]}'."
    set +u
    # shellcheck source=/dev/null
    . "${dict[koopa_prefix]}/activate" || return 1
    set -u
    # Check that 'KOOPA_PREFIX' is set correctly by activation script.
    if [[ "${dict[koopa_prefix]}" != "${KOOPA_PREFIX:-}" ]]
    then
        >&2 cat << END
ERROR: Installer failed to set 'KOOPA_PREFIX' correctly.
    Expected: '${dict[koopa_prefix]}'
    Actual: '${KOOPA_PREFIX:-}'
    PWD: '${PWD:-}'
    BASH_SOURCE: '${BASH_SOURCE[0]}'
END
        return 1
    fi
    # Check that activation puts koopa into 'PATH', as expected.
    if ! koopa::is_installed koopa
    then
        >&2 cat << END
ERROR: Installer failed to set 'PATH' correctly.
    KOOPA_PREFIX: '${KOOPA_PREFIX:-}'
    PATH: '${PATH:-}'
END
        return 1
    fi

    # Additional optional configuration {{{2
    # --------------------------------------------------------------------------

    if [[ "${dict[passwordless]}" -eq 1 ]]
    then
        koopa::enable_passwordless_sudo
    fi
    if [[ "${dict[dotfiles]}" -eq 1 ]]
    then
        koopa::install_dotfiles
    fi
    if [[ "${dict[modify_user_profile]}" -eq 1 ]]
    then
        koopa::add_to_user_profile
    fi

    # Final cleanup {{{2
    # --------------------------------------------------------------------------

    if koopa::is_bash_ok
    then
        koopa::delete_broken_symlinks "${dict[koopa_prefix]}"
    else
        koopa::alert_note 'Bash is old and must be upgraded.'
    fi
    koopa::update_etc_profile_d
    koopa::fix_zsh_permissions
    koopa::install_success 'koopa'
    koopa::alert_restart
    return 0
}

koopa::install_koopa "$@"
