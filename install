#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091
set -Ee -o pipefail

# Install koopa.
# Updated 2019-09-27.

KOOPA_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)"



# Pre-flight checks                                                         {{{1
# ==============================================================================

# Error on root user.
if [[ "$(id -u)" -eq 0 ]]
then
    >&2 printf "Don't install koopa as root.\n"
    exit 1
fi



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
usage: install [--help|-h] [--shared] [--dotfiles] [--mike] 

Install koopa.

optional arguments:
  --help, -h
        Show this help message and exit.
  --shared
        Enable shared user configuration via '/etc/profile.d/koopa.sh' file.
        Linux only. Not supported on macOS.
  --dotfiles
        Clone the dotfiles repo (https://github.com/acidgenomics/dotfiles)
        and automatically symlink recommended default configuration files.
  --mike
        Install Mike-specific configuration.
        This flag automatically enables '--dotfiles'.

note:
    Bash script.
    Updated 2019-09-27.
EOF
}



# Arguments                                                                 {{{1
# ==============================================================================

while (("$#"))
do
    case "$1" in
        --help|-h)
            usage
            exit 0
            ;;
        --dotfiles)
            dotfiles=1
            shift 1
            ;;
        --mike)
            mike=1
            shift 1
            ;;
        --shared)
            shared=1
            shift 1
            ;;
        --) 
            shift 1
            break
            ;;
        --*|-*)
            >&2 printf "Error: Invalid argument: '%s'\n" "$1"
            exit 1
            ;;
    esac
done

# Automatically clone dotfiles in Mike mode.
if [[ "${mike:-0}" -eq 1 ]]
then
    dotfiles=1
fi



# Script                                                                    {{{1
# ==============================================================================

install_dir="${KOOPA_HOME}/system/install"
uninstall_dir="${KOOPA_HOME}/system/uninstall"

# Remove legacy cruft                                                       {{{2
# ------------------------------------------------------------------------------

rm -frv "${KOOPA_HOME}/"{config,include}
rm -frv "${KOOPA_HOME}/bin/"{host,os,sudo}

# Activate koopa                                                            {{{2
# ------------------------------------------------------------------------------

printf "\nActivating koopa.\n"
force=1 source "${KOOPA_HOME}/activate"

# Shared user configuration                                                 {{{2
# ------------------------------------------------------------------------------

# Checking for '/usr/local' installation automatically.
# > if echo "$KOOPA_HOME" | grep -qE "^/(opt|usr/local)/"
# > then
# >     printf "\nShared installation detected at '%s'.\n" "$KOOPA_HOME"
# >     shared=1
# > fi

if [[ "${shared:-0}" -eq 1 ]]
then
    _koopa_update_profile
fi

# Dot files                                                                 {{{2
# ------------------------------------------------------------------------------

if [[ "${dotfiles:-0}" -eq 1 ]]
then
    printf "\nConfiguring dotfiles.\n"
    # Clone dotfiles repo, if necessary.
    if [[ ! -e "${KOOPA_HOME}/dotfiles" ]]
    then
        install-dotfiles
    fi
    # Remove legacy dotfile cruft.
    source "${uninstall_dir}/dotfiles-legacy.sh"
    # Always create these dotfiles, even on a shared installation.
    source "${install_dir}/dotfiles-shared.sh"
    # Create local config files.
    if [[ "${shared:-0}" -eq 0 ]]
    then
        source "${install_dir}/dotfiles-local.sh"
    fi
    # Config Mike-specific dotfiles, if necessary.
    if [[ "${mike:-0}" -eq 1 ]]
    then
        source "${install_dir}/dotfiles-mike.sh"
    fi
fi

# Additional                                                                {{{2
# ------------------------------------------------------------------------------

# Clone additional Git repos of interest.
if [[ "${mike:-}" -eq 1 ]]
then
    source "${install_dir}/docker-mike.sh"
    source "${install_dir}/scripts-mike.sh"
fi

printf "Installation was successful.\n"
