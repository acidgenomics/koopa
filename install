#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091
set -Eeu -o pipefail

usage() {
cat << EOF
usage: install [--help|-h] [--shared] [--test] [--dotfiles] [--mike]

Install koopa.

optional arguments:
    --help, -h
        Show this help message and exit.
    --shared
        Enable shared user configuration via '/etc/profile.d/zzz-koopa.sh' file.
        Linux only. Not supported on macOS.
    --dotfiles
        Clone the dotfiles repo (https://github.com/mjsteinbaugh/dotfiles)
        and automatically symlink recommended default configuration files.
    --mike
        Install Mike-specific configuration.
        This flag automatically enables '--dotfiles'.
    --non-interactive
        Don't prompt about configuration variables.
        Note that when '--shared' or '--test' are declared, this is set
        automatically internally.
    --test
        Enable verbose test mode.
        Useful for Travis CI and building Docker images.

note:
    Bash script.
    Updated 2020-02-05.
EOF
}

# shell/posix/functions/system.sh
_koopa_group() {                                                          # {{{1
    # """
    # Return the approach group to use with koopa installation.
    # Updated 2019-10-22.
    #
    # Returns current user for local install.
    # Dynamically returns the admin group for shared install.
    #
    # Admin group priority: admin (macOS), sudo (Debian), wheel (Fedora).
    # """
    local group
    if _koopa_is_shared_install && _koopa_has_sudo
    then
        if groups | grep -Eq "\b(admin)\b"
        then
            group="admin"
        elif groups | grep -Eq "\b(sudo)\b"
        then
            group="sudo"
        elif groups | grep -Eq "\b(wheel)\b"
        then
            group="wheel"
        else
            group="$(whoami)"
        fi
    else
        group="$(whoami)"
    fi
    echo "$group"
}

# shell/posix/functions/assert.sh
_koopa_has_passwordless_sudo() {                                          # {{{1
    # """
    # Check if sudo is active or doesn't require a password.
    # Updated 2020-02-05.
    #
    # See also:
    # https://askubuntu.com/questions/357220
    # """
    _koopa_is_installed sudo || return 1
    sudo -n true 2>/dev/null && return 0
    return 1
}

# shell/posix/functions/assert.sh
_koopa_has_sudo() {                                                       # {{{1
    # """
    # Check that current user has administrator (sudo) permission.
    # Updated 2020-02-05.
    #
    # This check is hanging on an CPI AWS Ubuntu EC2 instance, I think due to
    # 'groups' taking a long time to return for domain users.
    #
    # Avoid prompting with '-n, --non-interactive', but note that this isn't
    # supported on all systems.
    #
    # Note that use of 'sudo -v' does not work consistently across platforms.
    #
    # Alternate approach:
    # > sudo -l
    #
    # List all users with sudo access:
    # > getent group sudo
    #
    # - macOS: admin
    # - Debian: sudo
    # - Fedora: wheel
    #
    # See also:
    # - https://serverfault.com/questions/364334
    # - https://linuxhandbook.com/check-if-user-has-sudo-rights/
    # """
    # Always return true for root user.
    [ "$(id -u)" -eq 0 ] && return 0
    # Return false if 'sudo' program is not installed.
    _koopa_is_installed sudo || return 1
    # Early return true if user has passwordless sudo enabled.
    _koopa_has_passwordless_sudo && return 0
    # This step is slow for Active Directory domain user accounts on Ubuntu.
    _koopa_assert_is_installed grep groups
    groups | grep -Eq "\b(admin|root|sudo|wheel)\b"
}

# shell/posix/functions/assert.sh
_koopa_is_installed() {                                                   # {{{1
    # """
    # Is the requested program name installed?
    # Updated 2019-10-02.
    # """
    command -v "$1" >/dev/null
}

# shell/posix/functions/assert.sh
_koopa_is_linux() {                                                       # {{{1
    # """
    # Is the current operating system Linux?
    # Updated 2020-02-05.
    # """
    [ "$(uname -s)" = "Linux" ]
}

# shell/posix/functions/assert.sh
_koopa_is_local_install() {                                               # {{{1
    # """
    # Is koopa installed only for the current user?
    # Updated 2019-06-25.
    # """
    echo "$KOOPA_PREFIX" | grep -Eq "^${HOME}"
}

# shell/posix/functions/assert.sh
_koopa_is_shared_install() {                                              # {{{1
    # """
    # Is koopa installed for all users (shared)?
    # Updated 2019-06-25.
    # """
    ! _koopa_is_local_install
}

piped=0

# Detect if we're running from a piped install (e.g. koopa.acidgenomics.com).
if [[ -z "${BASH_SOURCE[0]:-}" ]]
then
    piped=1
else
    script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" \
        >/dev/null 2>&1 && pwd -P)"
    if [[ ! -x "${script_dir}/activate" ]]
    then
        piped=1
    fi
fi

dotfiles=
mike=0
passwordless=0
prompt=1
shared=0
test=0

while (("$#"))
do
    case "$1" in
        --help|-h)
            usage
            exit 0
            ;;
        --dotfiles)
            dotfiles=1
            shift 1
            ;;
        --mike)
            mike=1
            shift 1
            ;;
        --non-interactive)
            prompt=0
            shift 1
            ;;
        --shared)
            shared=1
            shift 1
            ;;
        --test)
            test=1
            shift 1
            ;;
        --) 
            shift 1
            break
            ;;
        --*|-*)
            >&2 echo "Error: Invalid argument: '${1}'."
            exit 1
            ;;
    esac
done

if [[ "$shared" -eq 1 ]] || [[ "$test" -eq 1 ]]
then
    prompt=0
fi

if [[ "$mike" -eq 1 ]]
then
    dotfiles=1
fi

if [[ "$piped" -eq 1 ]]
then
    # This is used by activation scripts (see 'extra.sh').
    export KOOPA_PIPED_INSTALL=1
    if [[ "$prompt" -eq 1 ]] && _koopa_has_sudo
    then
        read -r -n 1 -p "Install for all users (y/n)? " choice
        case "$choice" in
            y|Y)
                shared=1
                ;;
            n|N)
                shared=0
                ;;
            *)
                >&2 echo "Error: Invalid input."
                exit 1
                ;;
        esac
        echo ""
    fi

    if [[ "$shared" -eq 1 ]]
    then
        prefix="/usr/local"
    else
        XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
        prefix="$XDG_DATA_HOME"
    fi
    prefix="${prefix}/koopa"

    if [[ "$prompt" -eq 1 ]]
    then
        read -e -r -p "Install prefix: " -i "${prefix}" prefix
    fi

    if [[ -d "$prefix" ]]
    then
        >&2 echo "Error: Directory exists: '${prefix}'."
        exit 1
    fi

    # Set correct admin permissions, if applicable.
    if [[ "$shared" -eq 1 ]]
    then
        if ! _koopa_has_sudo
        then
            >&2 echo "Error: sudo is required for shared installation."
            exit 1
        fi
        sudo mkdir -pv "$prefix"
        group="$(_koopa_group)"
        sudo chgrp "$group" "$prefix"
        sudo chmod g+ws "$prefix"
    fi

    echo "Downloading koopa."
    source_repo="https://github.com/acidgenomics/koopa.git"
    git clone --recursive "$source_repo" "$prefix"
    KOOPA_PREFIX="$prefix"
else
    KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")" \
        >/dev/null 2>&1 && pwd -P)"
fi
export KOOPA_PREFIX
echo "Installing koopa at '$KOOPA_PREFIX'."

if [[ "$shared" -eq 0 ]] && echo "$KOOPA_PREFIX" | grep -qE "^/(opt|usr)/"
then
    echo "Shared installation detected."
    shared=1
fi

rm -frv "${KOOPA_PREFIX}/"{config,include}
rm -frv "${KOOPA_PREFIX}/bin/"{host,os,sudo}

echo "Activating koopa."
set +u
force=1 test="$test" source "${KOOPA_PREFIX}/activate"
set -u

if [[ "$shared" -eq 1 ]]
then
    # Prompt if the user wants to enable passwordless sudo.
    if [[ "$prompt" -eq 1 ]]
    then
        read -r -n 1 -p "Enable passwordless sudo (y/n)? " choice
        case "$choice" in
            y|Y)
                passwordless=1
                ;;
            n|N)
                passwordless=0
                ;;
            *)
                >&2 echo "Error: Invalid input."
                exit 1
                ;;
        esac
        echo ""
    fi

    if [[ "$passwordless" -eq 1 ]]
    then
        _koopa_enable_passwordless_sudo
    fi

    _koopa_update_profile
fi

# Don't prompt if dotfiles are already cloned into koopa install.
if [[ -d "${KOOPA_PREFIX}/dotfiles" ]]
then
    dotfiles=0
fi

if [[ -z "${dotfiles:-}" ]]
then
    if [[ "$prompt" -eq 1 ]]
    then
        read -r -n 1 -p "Install dotfiles (y/n)? " choice
        case "$choice" in
            y|Y)
                dotfiles=1
                ;;
            n|N)
                dotfiles=0
                ;;
            *)
                >&2 echo "Error: Invalid input."
                exit 1
                ;;
        esac
        echo
    else
        dotfiles=0
    fi
fi

if [[ "$mike" -eq 1 ]]
then
    _koopa_install_mike
elif [[ "$dotfiles" -eq 1 ]]
then
    install-dotfiles
fi

_koopa_fix_zsh_permissions

_koopa_success "Installation of koopa was successful."
_koopa_note "Shell must be reloaded for changes to take effect."
