#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091
set -Eeu -o pipefail



# Usage  {{{1
# ==============================================================================

usage() {
cat << EOF
usage: install [--help|-h] [--non-interactive] [--test]

Install koopa.

optional arguments:
    --help, -h
        Show this help message and exit.
    --non-interactive
        Don't prompt about configuration variables.
    --test
        Enable verbose test mode.
        Used for Travis CI checks and building Docker images.

note:
    Bash script.
    Updated 2020-02-15.
EOF
}



# Argument parsing  {{{1
# ==============================================================================

interactive=1
test=0

while (("$#"))
do
    case "$1" in
        --help|-h)
            usage
            exit 0
            ;;
        --non-interactive)
            interactive=0
            shift 1
            ;;
        --test)
            test=1
            shift 1
            ;;
        --) 
            shift 1
            break
            ;;
        --*|-*)
            >&2 echo "ERROR: Invalid argument: '${1}'."
            exit 1
            ;;
    esac
done



# Source functions  {{{1
# ==============================================================================

# Before we proceed, ensure that koopa isn't already installed.
if [[ -n "${KOOPA_PREFIX:-}" ]]
then
    >&2 echo "ERROR: koopa is installed: '${KOOPA_PREFIX}'."
    exit 1
fi

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" \
    >/dev/null 2>&1 && pwd -P)"

source "${script_dir}/shell/bash/include/header.sh"



# Pre-flight checks  {{{1
# ==============================================================================

# Ensure existing user configuration gets removed.
rm -fr "$(_koopa_config_prefix)"

# > ! _koopa_is_interactive && interactive=0
# > ! _koopa_is_tty && interactive=0



# Prefix  {{{1
# ==============================================================================

shared=0

# Prompt whether to install for all users.
if _koopa_has_sudo
then
    if [[ "$interactive" -eq 1 ]]
    then
        # Alternatively, can use '-n 1' for single letter 'y/n' prompt.
        read \
            -e \
            -i "yes" \
            -p "Install for all users? [YES/no]: " \
            -r \
            choice
        echo ""
        case "$choice" in
            Y|YES|y|yes)
                shared=1
                ;;
            N|NO|n|no)
                shared=0
                ;;
            *)
                _koopa_invalid_arg
                ;;
        esac
    else
        shared=1
    fi
fi

# Set the default install prefix.
if [[ "$shared" -eq 1 ]]
then
    prefix="/usr/local"
else
    XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
    prefix="$XDG_DATA_HOME"
fi

koopa_prefix="${prefix}/koopa"

# Prompt the user where they want to install.
if [[ "$interactive" -eq 1 ]]
then
    read \
        -e \
        -i "${koopa_prefix}" \
        -p "Install prefix: " \
        -r \
        koopa_prefix
    echo ""
fi



# Install (copy repo)  {{{1
# ==============================================================================

_koopa_assert_is_non_existing "$koopa_prefix"

_koopa_h1 "Installing koopa at '${koopa_prefix}'."

# Catch if the user is attempting to install into a shared space.
if [[ "$shared" -eq 0 ]] && \
    echo "$koopa_prefix" | grep -Eqv "^${HOME}"
then
    _koopa_info "Shared installation detected."
    shared=1
fi

# Note that we can use 'cp -T' on Linux to avoid subdirectory creation, but
# this doesn't work on macOS because the coreutils are ancient. So instead,
# we're removing the directory right before creation.
if [[ "$shared" -eq 1 ]]
then
    _koopa_assert_has_sudo
    sudo mkdir -p "$koopa_prefix"
    sudo rm -fr "$koopa_prefix"
    sudo cp -af "$script_dir" "$koopa_prefix"
    admin_group="$(_koopa_admin_group)"
    sudo chgrp "$admin_group" "$koopa_prefix"
    sudo chmod g+ws "$koopa_prefix"
else
    mkdir -p "$koopa_prefix"
    rm -fr "$koopa_prefix"
    cp -af "$script_dir" "$koopa_prefix"
fi

unset -v script_dir



# Activate  {{{1
# ==============================================================================

_koopa_h2 "Activating koopa."
set +u
force=1 test="$test" source "${koopa_prefix}/activate"
set -u



# Passwordless sudo  {{{1
# ==============================================================================

passwordless=0

# Prompt if the user wants to enable passwordless sudo.
if _koopa_is_linux && \
    [[ "$interactive" -eq 1 ]] && \
    [[ "$shared" -eq 1 ]]
then
    read \
        -e \
        -i "no" \
        -p "Enable passwordless sudo? [yes/NO]: " \
        -r \
        choice
    echo ""
    case "$choice" in
        Y|YES|y|yes)
            passwordless=1
            ;;
        N|NO|n|no)
            passwordless=0
            ;;
        *)
            _koopa_invalid_arg
            ;;
    esac
fi

[[ "$passwordless" -eq 1 ]] && _koopa_enable_passwordless_sudo



# Dot files  {{{1
# ==============================================================================

dotfiles=1

# Prompt the user if we want to link dot files.
if [[ "$interactive" -eq 1 ]]
then
    read \
        -e \
        -i "yes" \
        -p "Link dot files? [YES/no]: " \
        -r \
        choice
    echo ""
    case "$choice" in
        Y|YES|y|yes)
            dotfiles=1
            ;;
        N|NO|n|no)
            dotfiles=0
            ;;
        *)
            _koopa_invalid_arg
            ;;
    esac
fi

[[ "$dotfiles" -eq 1 ]] && _koopa_link_dotfiles



# User profile {{{1
# ==============================================================================

if _koopa_is_defined_in_user_profile
then
    profile=0
else
    if [[ "$interactive" -eq 1 ]]
    then
        file="$(_koopa_find_user_profile)"
        read \
            -e \
            -i "yes" \
            -p "Modify '${file}'? [YES/no]: " \
            -r \
            choice
        echo ""
        case "$choice" in
            Y|YES|y|yes)
                profile=1
                ;;
            N|NO|n|no)
                profile=0
                ;;
            *)
                _koopa_invalid_arg
                ;;
        esac
        if [[ "$profile" -eq 0 ]]
        then
            url="https://koopa.acidgenomics.com/"
            _koopa_note "Refer to '${url}' for instructions \
on how to modify '${file}' manually."
        fi
    else
        profile=1
    fi
fi

[[ "$profile" -eq 1 ]] && _koopa_add_to_user_profile



# Final steps and return  {{{1
# ==============================================================================

# Some config files, such as '.lintr' and '.pylintrc' will be missing unless
# we clone the dotfiles repo (see above).
_koopa_remove_broken_symlinks "$koopa_prefix"
_koopa_update_etc_profile_d
_koopa_fix_zsh_permissions

_koopa_success "Installation of koopa was successful."
_koopa_note "Shell must be reloaded for changes to take effect."
