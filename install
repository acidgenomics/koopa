#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091,SC2162
set -Eeu -o pipefail

# """
# koopa shell
# https://koopa.acidgenomics.com/
# Refer to 'LICENSE' file for terms of usage.
#
# Note that ancient versions of Bash (e.g. < 4; macOS) don't support the '-i'
# flag for 'read', so we're handling that case here. Alternatively, can use
# '-n 1' for single letter 'y/n' prompt.
#
# Note that we can use 'cp -T' on Linux to avoid subdirectory creation, but this
# doesn't work on macOS because the coreutils are ancient. So instead, we're
# removing the directory right before creation.
# """

usage() { # {{{1
cat << END
usage: install [--help|-h] [--non-interactive] [--test]

Install koopa.
Updated 2020-07-23.

Optional arguments:
    --help, -h
        Show this help message and exit.
    --non-interactive
        Don't prompt about configuration variables.
    --prefix=PREFIX
        Set the installation path prefix. Defaults to '/usr/local' for shared
        installs, and XDG_DATA_HOME for current user only. Note that attempting
        to install into '/usr' or '/opt' requires administrator (sudo)
        permissions.
    --verbose; or --test
        Verbose (test) mode.
        Recommended for Travis CI checks and building Docker images.

Non-interactive configuration arguments:
    --dotfiles (default); --no-dotfiles
        Install dot files from https://github.com/acidgenomics/dotfiles?
    --passwordless-sudo; --no-passwordless-sudo (default)
        Enable passwordless sudo. Can be a potential security risk.
    --profile (default); --no-profile
        Automatically add koopa activation to shell configuration file. Note
        that if configuration file is a symlink, this will skip.
        Config file per shell:
        - Bash: ~/.bashrc
        - Dash: ~/.profile
        - Zsh: ~/.zshrc
    --shared (default); --no-shared
        Install for all users, if current user has administrator (sudo)
        permissions. Otherwise, install for current user only.
END
}

install() { # {{{1
    # """
    # Install koopa.
    # @note Updated 2020-08-12.
    # """
    local dotfiles interactive koopa_prefix passwordless profile shared test
    while (("$#"))
    do
        case "$1" in
            --help|-h)
                usage
                return 0
                ;;
            --dotfiles)
                dotfiles=1
                shift 1
                ;;
            --interactive)
                interactive=1
                shift 1
                ;;
            --no-dotfiles)
                dotfiles=0
                shift 1
                ;;
            --no-passwordless-sudo)
                passwordless=0
                shift 1
                ;;
            --no-profile)
                profile=0
                shift 1
                ;;
            --no-shared)
                shared=0
                shift 1
                ;;
            --no-test|--no-verbose)
                test=0
                shift 1
                ;;
            --non-interactive)
                interactive=0
                shift 1
                ;;
            --passwordless-sudo)
                passwordless=1
                shift 1
                ;;
            --profile)
                profile=1
                shift 1
                ;;
            --prefix=*)
                koopa_prefix="${1#*=}"
                shift 1
                ;;
            --shared)
                shared=1
                shift 1
                ;;
            --test|--verbose)
                test=1
                shift 1
                ;;
            --) 
                shift 1
                break
                ;;
            --*|-*)
                printf "ERROR: Invalid arg: '%s'.\n" "$1" >&2
                return 1
                ;;
        esac
    done

    # Pre-flight checks {{{1
    # ==========================================================================

    # Before we proceed, ensure that koopa isn't already installed.
    if [[ -n "${KOOPA_PREFIX:-}" ]]
    then
        printf "ERROR: koopa is installed: '%s'.\n" "$KOOPA_PREFIX" >&2
        return 1
    fi
    script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)"
    # Don't check for Bash version here, which will otherwise fail on macOS
    # clean install, which ships with ancient v3.
    checks=0 . "${script_dir}/shell/bash/include/header.sh"
    # Check that temporary activation was successful.
    if [[ -z "${KOOPA_PREFIX:-}" ]]
    then
        printf 'ERROR: Installer failed to set KOOPA_PREFIX.\n' >&2
        return 1
    fi
    # Ensure existing user configuration gets removed.
    koopa::rm "$(koopa::config_prefix)"

    # Default arguments {{{2
    # --------------------------------------------------------------------------

    [[ -z "${dotfiles:-}" ]] && dotfiles=1
    [[ -z "${interactive:-}" ]] && interactive=1
    [[ -z "${koopa_prefix:-}" ]] && koopa_prefix=
    [[ -z "${passwordless:-}" ]] && passwordless=0
    [[ -z "${profile:-}" ]] && profile=1
    if [[ -z "${shared:-}" ]]
    then
        if koopa::has_sudo
        then
            shared=1
        else
            shared=0
        fi
    fi
    [[ -z "${test:-}" ]] && test=0

    # Installation prefix {{{1
    # ==========================================================================

    if [[ -z "$koopa_prefix" ]]
    then
        if [[ "$shared" -eq 1 ]] && [[ "$interactive" -eq 1 ]]
        then
            shared="$(koopa::read_yn 'Install for all users' "$shared")"
        fi
        # Set the default install prefix.
        if [[ "$shared" -eq 1 ]]
        then
            prefix='/usr/local'
        else
            XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME:?}/.local/share}"
            prefix="${XDG_DATA_HOME}"
        fi
        koopa_prefix="${prefix}/koopa"
    fi
    # Prompt the user where they want to install.
    if [[ "$interactive" -eq 1 ]]
    then
        koopa_prefix="$(koopa::read 'Install prefix' "$koopa_prefix")"
    fi
    # Catch if the user is attempting to install into a shared space.
    if [[ "$shared" -eq 0 ]] && \
        ! koopa::str_match_regex "$koopa_prefix" "^${HOME:?}"
    then
        shared=1
    fi

    # Install (copy repo from tmp dir) {{{1
    # ==========================================================================

    # Alternatively, can consider using rsync here instead of cp.
    koopa::h1 "Installing koopa at '${koopa_prefix}'."
    koopa::assert_is_non_existing "$koopa_prefix"
    if [[ "$shared" -eq 1 ]]
    then
        koopa::info 'Shared installation detected.'
        koopa::note 'sudo permissions are required.'
        koopa::assert_has_sudo
        koopa::rm -S "$koopa_prefix"
        koopa::cp -S "$script_dir" "$koopa_prefix"
        koopa::sys_set_permissions -r "$koopa_prefix"
        koopa::add_make_prefix_link "$koopa_prefix"
    else
        koopa::rm "$koopa_prefix"
        koopa::cp "$script_dir" "$koopa_prefix"
    fi

    # Activate {{{1
    # ==========================================================================

    koopa::h2 'Activating koopa.'
    set +u
    force=1 test="$test" . "${koopa_prefix}/activate"
    set -u
    # Check that prefix is set correctly.
    if [[ "${koopa_prefix:?}" != "${KOOPA_PREFIX:?}" ]]
    then
        >&2 cat << END
ERROR: Installer failed to set KOOPA_PREFIX correctly.
    Expected: "$koopa_prefix"
    Actual: "$KOOPA_PREFIX"
    PWD: "$PWD"
    BASH_SOURCE: "${BASH_SOURCE[0]}"
END
        return 1
    fi
    # Check that activation puts koopa into PATH, as expected.
    if ! koopa::is_installed koopa
    then
        >&2 cat << END
ERROR: Installer failed to set PATH correctly.
    KOOPA_PREFIX: "$KOOPA_PREFIX"
    PATH: "$PATH"
END
        return 1
    fi

    # Passwordless sudo {{{1
    # ==========================================================================

    # Prompt if the user wants to enable passwordless sudo.
    if koopa::is_linux && \
        [[ "$interactive" -eq 1 ]] && \
        [[ "$shared" -eq 1 ]]
    then
        passwordless="$( \
            koopa::read_yn 'Enable passwordless sudo' "$passwordless" \
        )"
    fi
    [[ "$passwordless" -eq 1 ]] && koopa::enable_passwordless_sudo

    # Dot files {{{1
    # ==========================================================================

    # Prompt the user if we want to link dot files.
    if [[ "$interactive" -eq 1 ]]
    then
        # Check if a user profile exists, and warn.
        file="$(koopa::find_user_profile)"
        if [[ -e "$file" ]]
        then
            koopa::note \
                "User profile exists: '${file}'." \
                'This will be overwritten if dot files are linked.'
        fi
        dotfiles="$(koopa::read_yn 'Install and link dot files' "$dotfiles")"
    fi
    [[ "$dotfiles" -eq 1 ]] && koopa::install_dotfiles

    # User profile {{{1
    # ==========================================================================

    profile_file="$(koopa::find_user_profile)"
    if ! koopa::is_defined_in_user_profile && [[ ! -L "$profile_file" ]]
    then
        if [[ "$interactive" -eq 1 ]]
        then
            koopa::note "Koopa activation should be added to '${file}'."
            profile="$(koopa::read_yn "Modify '${file}'" "$profile")"
        fi
        [[ "$profile" -eq 1 ]] && koopa::add_to_user_profile
    fi

    # Final steps and return {{{1
    # ==========================================================================

    if koopa::is_bash_ok
    then
        koopa::delete_broken_symlinks "$koopa_prefix"
    else
        koopa::note 'Bash is very old and must be upgraded.'
    fi
    koopa::update_etc_profile_d
    koopa::fix_zsh_permissions
    koopa::install_success 'koopa'
    koopa::restart
    return 0
}

install "$@"
