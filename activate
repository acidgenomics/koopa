#!/bin/sh
# shellcheck disable=SC1090,SC1091,SC2039

# Usage {{{1
# ==============================================================================

usage() {
    cat << END
usage: activate [--help|-h]

Activate koopa.

optional variables:
    force=0 [false]
        Force activation inside of non-interactive shells.
        Not generally recommended, but used by koopa installer.
    minimal=0 [false]
        Minimal mode.
        Simply load koopa programs into PATH.
        Skips additional program and shell configuration.
        Can enable per user with 'KOOPA_USERS_MINIMAL=user1 user2'.
    test=0 [false]
        Enable verbose test mode.
        Used for Travis CI checks.

details:
    Currently supports Bash, Zsh, and Dash shells.

    For system-wide configuration on Linux, this should be called inside
    '/etc/profile.d/zzz-koopa.sh', owned by root.

    Activation of specific users can be skipped via:
    > export KOOPA_USERS_SKIP='user1 user2'

    Sourcing of POSIX shell scripts via '.' (POSIX) or 'source' (bash, zsh)
    requires that arguments are passed in at the beginning of the call, rather
    than as positional arguments or flags. Refer to the working examples.

examples:
    # Default mode
    . /usr/local/koopa/activate

    # Minimal mode
    minimal=1 . /usr/local/koopa/activate

note:
    POSIX shell script.
    Updated 2020-06-24.
END
}

case "${1:-}" in
    --help|-h)
        usage
        exit 0
        ;;
esac

unset -f usage

# Pre-flight checks {{{1
# ==============================================================================

# Ensure 'USER' global is defined, for user-specific checks below.
if [ -z "${USER:-}" ]
then
    USER="$(id -un)"
fi
export USER

# Interactive {{{2
# ------------------------------------------------------------------------------

if printf '%s\n' "$-" | grep -q 'i'
then
    KOOPA_INTERACTIVE=1
else
    KOOPA_INTERACTIVE=0
fi

# Operating system {{{2
# ------------------------------------------------------------------------------

# Bash sets the shell variable OSTYPE (e.g. linux-gnu).
# However, this doesn't work consistently with zsh, so use uname instead.

case "$(uname -s)" in
    Darwin)
        ;;
    Linux)
        ;;
    *)
        printf "ERROR: Unsupported operating system.\n" >&2
        return 0
esac

# Shell {{{2
# ------------------------------------------------------------------------------

# Refer to 'koopa::shell' function for additional details.

if [ -n "${BASH_VERSION:-}" ]
then
    shell='bash'
elif [ -n "${ZSH_VERSION:-}" ]
then
    shell='zsh'
elif [ -d '/proc' ]
then
    shell="$(basename "$(readlink /proc/$$/exe)")"
else
    shell="$(basename "$(ps -p "$$" -o 'comm=' | sed 's/^-//g')")"
fi

KOOPA_SHELL="$shell"
unset -v shell

case "$KOOPA_SHELL" in
    bash|dash|zsh)
        ;;
    *)
        # Inform user about activate failure only when interactive.
        if [ "$KOOPA_INTERACTIVE" -eq 1 ]
        then
            >&2 cat << END
ERROR: Failed to activate koopa in the current shell.

Supported POSIX shells: bash, dash, zsh.

  KOOPA_SHELL : '${KOOPA_SHELL}'
        SHELL : '${SHELL:-}'
            - : '${-}'
            0 : '${0}'

Consider switching to bash:
> chsh -s /bin/bash '${USER}'

or zsh:
> chsh -s /bin/zsh '${USER}'
END
        fi
        return 0
        ;;
esac

# Zsh currently requires presence of '~/.zshrc' for clean activation.
#
# Note that sourcing in '/etc/profile' doesn't return script path in
# '$0', which is commonly recommended online in place of '$BASH_SOURCE'.
# '$0' in this case instead returns '_src_etc_profile'.
#
# This approach covers both '_src_etc_profile' and '_src_etc_profile_d'.
#
# See also:
# - https://stackoverflow.com/a/23259585/3911732
if [ "$KOOPA_SHELL" = "zsh" ]
then
    case "$0" in
        _src_etc_profile*)
            # Early return when sourced from '/etc/profile.d/zzz-koopa.sh'.
            return 0
            ;;
        *)
            export KOOPA_ZSHRC=1
            ;;
    esac
fi

# Argument parsing {{{1
# ==============================================================================

# Force mode {{{2
# ------------------------------------------------------------------------------

# This is currently used by the koopa installer.

if [ -z "${KOOPA_FORCE:-}" ]
then
    case "${force:-}" in
        0|false)
            KOOPA_FORCE=0
            ;;
        1|true)
            KOOPA_FORCE=1
            ;;
        *)
            KOOPA_FORCE=0
            ;;
    esac
    unset -v force
fi

# Skip activation {{{2
# ------------------------------------------------------------------------------

if [ "$KOOPA_FORCE" -ne 1 ]
then
    # Skip activation for root user.
    # > [ "$(id -u)" -eq 0 ] && return 0

    # Skip activation inside non-interactive shells.
    [ "$KOOPA_INTERACTIVE" -eq 0 ] && return 0

    # Always skip on accounts containing "admin" in the name.
    # Previous "\b(admin)\b" pattern only matched 'admin-*' but not 'admin_*'.
    printf '%s\n' "$USER" \
        | grep -Eq "^admin" && return 0

    # Allow optional skip for specific users.
    if [ -n "${KOOPA_USERS_SKIP:-}" ]
    then
        printf '%s\n' "$KOOPA_USERS_SKIP" \
            | grep -Eq "\b${USER}\b" && return 0
    fi

    # Skip activation if koopa functions have already been sourced.
    #
    # This step helps avoid double activation in Bash for shared koopa installs,
    # which will otherwise activate from both '/etc/profile.d/zzz-koopa.sh'
    # and '~/.bashrc' (if defined).
    #
    # See also:
    # - https://unix.stackexchange.com/questions/332005
    if type 'koopa::prefix' 2>/dev/null | grep -q 'function'
    then
        return 0
    fi
fi

# Subshell {{{2
# ------------------------------------------------------------------------------

# Alternatively, can compare SHLVL value.
if [ -z "${KOOPA_SUBSHELL:-}" ]
then
    KOOPA_SUBSHELL=0
else
    KOOPA_SUBSHELL=1
fi

# Minimal mode {{{2
# ------------------------------------------------------------------------------

if [ -z "${KOOPA_MINIMAL:-}" ]
then
    case "${minimal:-}" in
        0|false)
            KOOPA_MINIMAL=0
            ;;
        1|true)
            KOOPA_MINIMAL=1
            ;;
        *)
            KOOPA_MINIMAL=0
            ;;
    esac
    unset -v minimal
fi

if [ -n "${KOOPA_USERS_MINIMAL:-}" ]
then
    if printf '%s\n' "$KOOPA_USERS_MINIMAL" | grep -Eq "\b${USER}\b"
    then
        KOOPA_MINIMAL=1
    fi
fi

# Test mode {{{2
# ------------------------------------------------------------------------------

if [ -z "${KOOPA_TEST:-}" ]
then
    case "${test:-}" in
        0|false)
            KOOPA_TEST=0
            ;;
        1|true)
            KOOPA_TEST=1
            ;;
        *)
            KOOPA_TEST=0
            ;;
    esac
    unset -v test
fi

if [ "$KOOPA_TEST" -eq 1 ]
then
    printf '%s\n' 'Test mode enabled.'
    printf '%s\n' 'Setting strict shell mode.'
    set -o errexit
    set -o nounset
    set -o xtrace
    if [ "$KOOPA_SHELL" = "bash" ]
    then
        set -o errtrace
        set -o pipefail
        set -o posix
    fi
    KOOPA_MINIMAL=0
fi

# Export global variables {{{2
# ------------------------------------------------------------------------------

export KOOPA_FORCE
export KOOPA_MINIMAL
export KOOPA_SHELL
export KOOPA_SUBSHELL
export KOOPA_TEST

# Locate installation prefix {{{1
# ==============================================================================

case "$KOOPA_SHELL" in
    bash)
        # shellcheck disable=SC2039
        KOOPA_ACTIVATE_SCRIPT="${BASH_SOURCE[0]}"
        ;;
    zsh)
        KOOPA_ACTIVATE_SCRIPT="${(%):-%N}"
        ;;
    *)
        # POSIX doesn't support file path resolution of sourced dot scripts.
        if [ "$KOOPA_INTERACTIVE" -eq 1 ] && [ ! -d "${KOOPA_PREFIX:?}" ]
        then
            printf "ERROR: Failed to locate koopa activation script.\n" >&2
            printf "Required 'KOOPA_PREFIX' variable is unset.\n" >&2
            return 0
        fi
        KOOPA_ACTIVATE_SCRIPT="${KOOPA_PREFIX}/activate"
        ;;
esac

# Note that running realpath on the file instead of the directory will properly
# resolve '~/.config/koopa/activate' in Mike's default '~/.shrc' config file.
if [ -L "$KOOPA_ACTIVATE_SCRIPT" ]
then
    koopa::realpath() {
        if [ "$(uname -s)" = "Darwin" ]
        then
            perl -MCwd -e 'print Cwd::abs_path shift' "$1"
        else
            readlink -f "$@"
        fi
    }
    KOOPA_ACTIVATE_SCRIPT="$(koopa::realpath "$KOOPA_ACTIVATE_SCRIPT")"
fi
KOOPA_PREFIX="$(dirname "$KOOPA_ACTIVATE_SCRIPT")"
export KOOPA_PREFIX

# Start activation {{{1
# ==============================================================================

# Load shell header file, which will source required functions.
if [ -f "${KOOPA_PREFIX}/shell/${KOOPA_SHELL}/include/header.sh" ]
then
    header="${KOOPA_PREFIX}/shell/${KOOPA_SHELL}/include/header.sh"
else
    header="${KOOPA_PREFIX}/shell/posix/include/header.sh"
fi
activate=1 . "$header"
unset -v header

if [ "$KOOPA_TEST" -eq 1 ]
then
    if koopa::is_linux && koopa::is_installed bc date
    then
        KOOPA_DURATION_START="$(date -u +%s%3N)"
    fi
fi

# Standard configuration {{{1
# ==============================================================================

koopa::export_cpu_count
koopa::export_editor
koopa::export_git
koopa::export_gnupg
koopa::export_history
koopa::export_hostname
koopa::export_lesspipe
koopa::export_ostype
koopa::export_pager
koopa::export_proj_lib
koopa::export_python
koopa::export_shell
koopa::export_tmpdir
koopa::export_today
koopa::export_user

# FIXME RETHINK THIS.
koopa::activate_xdg
koopa::activate_standard_paths
koopa::activate_koopa_paths
koopa::activate_pkg_config

# Program configuration {{{1
# ==============================================================================

if [ "$KOOPA_MINIMAL" -eq 0 ]
then
    koopa::activate_homebrew
    koopa::activate_coreutils
    koopa::activate_dircolors
    koopa::activate_gcc_colors
    koopa::activate_emacs
    koopa::activate_go
    koopa::activate_openjdk
    koopa::activate_pipx
    koopa::activate_ruby
    koopa::is_macos && koopa::activate_macos_python
    koopa::activate_llvm
    koopa::activate_aspera
    koopa::activate_ensembl_perl_api
    koopa::activate_perlbrew
    koopa::activate_rust
    koopa::activate_rbenv
    koopa::activate_pyenv
    # Avoid issues with R, python in path.
    # > koopa::activate_bcbio
    koopa::activate_conda
    koopa::activate_venv
    koopa::activate_autojump
    koopa::activate_broot
    koopa::activate_fzf
fi

# Extra shell configuration {{{1
# ==============================================================================

if [ "$KOOPA_MINIMAL" -eq 0 ]
then
    case "$KOOPA_SHELL" in
        bash)
            koopa::activate_bash_extras
            ;;
        zsh)
            koopa::activate_zsh_extras
            ;;
    esac
    koopa::is_macos && koopa::activate_macos_extras
    koopa::activate_completion
    koopa::activate_aliases
    koopa::activate_secrets
    koopa::activate_ssh_key
    if ! koopa::is_subshell
    then
        # FIXME RETHINK THIS.
        koopa::today_bucket
        koopa::tmux_sessions
    fi
fi

# Post-flight {{{1
# ==============================================================================

if [ "$KOOPA_TEST" -eq 1 ]
then
    if koopa::is_linux && koopa::is_installed bc date
    then
        KOOPA_DURATION_STOP="$(date -u +%s%3N)"
        # Calculate the duration.
        # Note that bc isn't installed on all Docker images, and can error out.
        KOOPA_DURATION="$( \
            koopa::print "${KOOPA_DURATION_STOP}-${KOOPA_DURATION_START}" | bc \
        )"
        export KOOPA_DURATION
        unset -v KOOPA_DURATION_START KOOPA_DURATION_STOP
    fi
    set +o errexit
    set +o nounset
    set +o xtrace
    # Turn off Bash-specific shell options.
    if [ "$KOOPA_SHELL" = "bash" ]
    then
        set +o errtrace
        set +o pipefail
        set +o posix
    fi
    koopa::h2 "Shell options"
    set +o
    koopa::h2 "Shell variables"
    koopa::dl "-" "$-"
    koopa::dl "0" "$0"
    koopa::dl "SHELL" "$SHELL"
    if [ -n "${KOOPA_DURATION:-}" ]
    then
        koopa::success "Activation was successful (${KOOPA_DURATION} ms)."
    else
        koopa::success "Activation was successful."
    fi
fi

unset -v KOOPA_ACTIVATE_SCRIPT KOOPA_INTERACTIVE
