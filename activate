#!/bin/sh
# shellcheck disable=SC3040

_koopa_activate() { # {{{1
    # """
    # Activate koopa bootloader inside shell session.
    # @note Updated 2021-04-25.
    # """
    case "${1:-}" in
        --help|-h)
            _koopa_activate_usage
            return 0
            ;;
    esac
    _koopa_preflight_checks || return 1
    _koopa_export_user || return 1
    _koopa_activate_export_force || return 1
    _koopa_activate_skip_check || return 1
    _koopa_activate_export_subshell || return 1
    _koopa_activate_export_minimal || return 1
    _koopa_activate_export_test || return 1
    if [ "${KOOPA_TEST:?}" -eq 1 ]
    then
        _koopa_print '[koopa] Test mode enabled.'
        set -o errexit
        set -o nounset
        # > set -o xtrace
        if [ "${KOOPA_SHELL:?}" = 'bash' ]
        then
            set -o errtrace
            set -o pipefail
        fi
        export KOOPA_MINIMAL=0
    fi
    _koopa_activate_export_koopa_prefix || return 1
    _koopa_activate_duration_start || return 1
    # shellcheck source=/dev/null
    KOOPA_ACTIVATE=1 . "$(_koopa_activate_header)" || return 1
    _koopa_activate_xdg || return 1
    _koopa_activate_standard_paths || return 1
    _koopa_activate_pkg_config || return 1
    _koopa_activate_export_opt_prefix || return 1
    _koopa_add_config_link "$(_koopa_prefix)" 'home' || return 1
    _koopa_add_config_link "$(_koopa_prefix)/activate" || return 1
    _koopa_add_config_link "$(_koopa_dotfiles_prefix)" || return 1
    _koopa_export_cpu_count || return 1
    _koopa_export_editor || return 1
    _koopa_export_git || return 1
    _koopa_export_gnupg || return 1
    _koopa_export_history || return 1
    _koopa_export_hostname || return 1
    _koopa_export_lesspipe || return 1
    _koopa_export_pager || return 1
    _koopa_export_proj_lib || return 1
    _koopa_export_python || return 1
    _koopa_export_shell || return 1
    _koopa_export_tmpdir || return 1
    _koopa_export_today || return 1
    _koopa_export_user || return 1
    if [ "${KOOPA_MINIMAL:?}" -eq 0 ]
    then
        if _koopa_is_linux
        then
            _koopa_activate_bcbio || return 1
        elif _koopa_is_macos
        then
            _koopa_activate_macos_python || return 1
            _koopa_activate_visual_studio_code || return 1
        fi
        _koopa_activate_homebrew || return 1
        _koopa_activate_gnu || return 1
        _koopa_activate_dircolors || return 1
        _koopa_activate_gcc_colors || return 1
        _koopa_activate_emacs || return 1
        _koopa_activate_go || return 1
        _koopa_activate_llvm || return 1
        _koopa_activate_openjdk || return 1
        _koopa_activate_aspera || return 1
        _koopa_activate_nextflow || return 1
        _koopa_activate_ruby || return 1
        _koopa_activate_rust || return 1
        _koopa_activate_fzf || return 1
        _koopa_activate_zoxide || return 1
        _koopa_activate_python_site_packages || return 1
        _koopa_activate_python_startup || return 1
        # > _koopa_activate_conda || return 1
    fi
    _koopa_activate_koopa_paths || return 1
    _koopa_activate_local_paths || return 1
    if [ "${KOOPA_MINIMAL:?}" -eq 0 ]
    then
        case "${KOOPA_SHELL:?}" in
            bash|dash|zsh)
                "_koopa_activate_${KOOPA_SHELL}_extras"
                ;;
        esac
        if _koopa_is_macos
        then
            _koopa_activate_macos_extras || return 1
        fi
        _koopa_activate_completion || return 1
        _koopa_activate_aliases || return 1
        _koopa_activate_secrets || return 1
        _koopa_activate_ssh_key || return 1
        if ! _koopa_is_subshell
        then
            _koopa_today_bucket || return 1
            _koopa_tmux_sessions || return 1
        fi
    fi
    if [ "${KOOPA_TEST:?}" -eq 1 ]
    then
        set +o errexit
        set +o nounset
        # > set +o xtrace
        if [ "${KOOPA_SHELL:?}" = 'bash' ]
        then
            set +o errtrace
            set +o pipefail
        fi
        _koopa_alert_info 'Shell options'
        set +o
        _koopa_alert_info 'Shell variables'
        _koopa_dl \
            '-' "$-" \
            '0' "$0" \
            'SHELL' "${SHELL:-}"
        if _koopa_is_installed locale
        then
            _koopa_alert_info 'Locale'
            locale
        fi
        _koopa_activate_duration_stop || return 1
        if [ -n "${KOOPA_DURATION:-}" ]
        then
            _koopa_dl 'duration' "${KOOPA_DURATION:?} ms"
        fi
        _koopa_alert_success 'Activation was successful.'
    fi
    unset -f _koopa_activate_usage
    unset -v KOOPA_ACTIVATE KOOPA_ACTIVATE_SCRIPT
    return 0
}

_koopa_activate_dash_extras() { # {{{1
    export PS1='# '
    return 0
}

_koopa_activate_duration_start() { # {{{1
    local bc date homebrew_prefix
    [ "${KOOPA_TEST:-0}" -eq 1 ] || return 0
    if _koopa_is_macos
    then
        if [ -x '/opt/homebrew/bin/brew' ]
        then
            homebrew_prefix='/opt/homebrew'
        elif [ -x '/usr/local/bin/brew' ]
        then
            homebrew_prefix='/usr/local'
        else
            exit 0
            return 0
        fi
        bc="${homebrew_prefix}/opt/bc/bin/bc"
        date="${homebrew_prefix}/opt/coreutils/libexec/gnubin/date"
    else
        bc='bc'
        date='date'
    fi
    _koopa_is_installed "$bc" "$date" || return 0
    KOOPA_DURATION_START="$("$date" -u '+%s%3N')"
    export KOOPA_DURATION_START
    return 0
}

_koopa_activate_duration_stop() { # {{{1
    local bc date homebrew_prefix
    [ "${KOOPA_TEST:-0}" -eq 1 ] || return 0
    if _koopa_is_macos
    then
        if [ -x '/opt/homebrew/bin/brew' ]
        then
            homebrew_prefix='/opt/homebrew'
        elif [ -x '/usr/local/bin/brew' ]
        then
            homebrew_prefix='/usr/local'
        else
            return 0
        fi
        bc="${homebrew_prefix}/opt/bc/bin/bc"
        date="${homebrew_prefix}/opt/coreutils/libexec/gnubin/date"
    else
        bc='bc'
        date='date'
    fi
    _koopa_is_installed "$bc" "$date" || return 0
    KOOPA_DURATION_STOP="$("$date" -u '+%s%3N')"
    KOOPA_DURATION="$( \
        _koopa_print "${KOOPA_DURATION_STOP:?}-${KOOPA_DURATION_START:?}" \
        | "$bc" \
    )"
    export KOOPA_DURATION
    unset -v KOOPA_DURATION_START KOOPA_DURATION_STOP
    return 0
}

_koopa_activate_export_force() { # {{{1
    [ -n "${KOOPA_FORCE:-}" ] && return 0
    case "${force:-}" in
        0|false)
            KOOPA_FORCE=0
            ;;
        1|true)
            KOOPA_FORCE=1
            ;;
        *)
            KOOPA_FORCE=0
            ;;
    esac
    export KOOPA_FORCE
    unset -v force
    return 0
}

_koopa_activate_export_minimal() { # {{{1
    [ -n "${KOOPA_MINIMAL:-}" ] && return 0
    case "${minimal:-}" in
        0|false)
            KOOPA_MINIMAL=0
            ;;
        1|true)
            KOOPA_MINIMAL=1
            ;;
        *)
            KOOPA_MINIMAL=0
            ;;
    esac
    unset -v minimal
    if [ -n "${KOOPA_USERS_MINIMAL:-}" ]
    then
        if _koopa_str_match_regex "${KOOPA_USERS_MINIMAL:?}" "\b${USER:?}\b"
        then
            KOOPA_MINIMAL=1
        fi
    fi
    export KOOPA_MINIMAL
    return 0
}

_koopa_activate_export_opt_prefix() { # {{{1
    # This value is picked up in R configuration (for reticulate).
    KOOPA_OPT_PREFIX="$(_koopa_opt_prefix)"
    export KOOPA_OPT_PREFIX
    return 0
}

_koopa_activate_export_koopa_prefix() { # {{{1
    case "${KOOPA_SHELL:?}" in
        bash)
            KOOPA_ACTIVATE_SCRIPT="$(_koopa_activate_source_bash)"
            ;;
        zsh)
            KOOPA_ACTIVATE_SCRIPT="$(_koopa_activate_source_zsh)"
            ;;
        *)
            KOOPA_ACTIVATE_SCRIPT="$(_koopa_activate_source_posix)"
            ;;
    esac
    if [ ! -x "$KOOPA_ACTIVATE_SCRIPT" ]
    then
        _koopa_warning 'Failed to locate koopa activate script.'
        return 1
    fi
    # Note that running realpath on the file instead of the directory will
    # properly resolve '~/.config/koopa/activate' case.
    if [ -L "$KOOPA_ACTIVATE_SCRIPT" ]
    then
        KOOPA_ACTIVATE_SCRIPT="$(_koopa_realpath "$KOOPA_ACTIVATE_SCRIPT")"
    fi
    KOOPA_PREFIX="$(_koopa_realpath "$(dirname "$KOOPA_ACTIVATE_SCRIPT")")"
    export KOOPA_ACTIVATE_SCRIPT KOOPA_PREFIX
    return 0
}

_koopa_activate_export_subshell() { # {{{1
    [ -n "${KOOPA_SUBSHELL:-}" ] && return 0
    KOOPA_SUBSHELL=0
    export KOOPA_SUBSHELL
    return 0
}

_koopa_activate_export_test() { # {{{1
    [ -n "${KOOPA_TEST:-}" ] && return 0
    case "${test:-}" in
        0|false)
            KOOPA_TEST=0
            ;;
        1|true)
            KOOPA_TEST=1
            ;;
        *)
            KOOPA_TEST=0
            ;;
    esac
    export KOOPA_TEST
    unset -v test
    return 0
}

_koopa_activate_header() { # {{{1
    local x
    if [ -f "${KOOPA_PREFIX:?}/lang/shell/${KOOPA_SHELL:?}/include/header.sh" ]
    then
        x="${KOOPA_PREFIX:?}/lang/shell/${KOOPA_SHELL:?}/include/header.sh"
    else
        x="${KOOPA_PREFIX:?}/lang/shell/posix/include/header.sh"
    fi
    [ -f "$x" ] || return 1
    _koopa_print "$x"
    return 0
}

_koopa_activate_skip_check() { # {{{1
    [ -n "${KOOPA_FORCE:-}" ] && return 0
    [ -n "${KOOPA_SKIP:-}" ] || return 1
    _koopa_is_interactive || return 1
    _koopa_is_user_named_admin && return 1
    _koopa_is_user_skip && return 1
    _koopa_is_koopa_active && return 1
    return 0
}

_koopa_activate_source_bash() { # {{{1
    # shellcheck disable=SC3028,SC3054
    _koopa_print "${BASH_SOURCE[0]}"
    return 0
}

_koopa_activate_source_posix() { # {{{1
    # POSIX doesn't support file path resolution of sourced dot scripts.
    if [ ! -d "${KOOPA_PREFIX:?}" ] && _koopa_is_interactive
    then
        _koopa_warning \
            'Failed to locate koopa activation script.' \
            "Required 'KOOPA_PREFIX' variable is unset."
        return 1
    fi
    _koopa_print "${KOOPA_PREFIX:?}/activate"
    return 0
}

_koopa_activate_source_zsh() { # {{{1
    # Use '%x' not '%N' when called inside function.
    # https://stackoverflow.com/a/23259585/3911732
    _koopa_print "${(%):-%x}"
    return 0
}

_koopa_activate_usage() { # {{{1
    cat << END
usage: activate [--help|-h]

Activate koopa.

optional variables:
    force=0 [false]
        Force activation inside of non-interactive shells.
        Not generally recommended, but used by koopa installer.
    minimal=0 [false]
        Minimal mode.
        Simply load koopa programs into PATH.
        Skips additional program and shell configuration.
        Can enable per user with 'KOOPA_USERS_MINIMAL=user1 user2'.
    test=0 [false]
        Enable verbose test mode.
        Used for Travis CI checks.

details:
    Currently supports Bash, Zsh, and Dash shells.

    For system-wide configuration on Linux, this should be called inside
    '/etc/profile.d/zzz-koopa.sh', owned by root.

    Activation of specific users can be skipped via:
    > export KOOPA_USERS_SKIP='user1 user2'

    Sourcing of POSIX shell scripts via '.' (POSIX) or 'source' (bash, zsh)
    requires that arguments are passed in at the beginning of the call, rather
    than as positional arguments or flags. Refer to the working examples.

examples:
    # Default mode
    . /usr/local/koopa/activate

    # Minimal mode
    minimal=1 . /usr/local/koopa/activate

note:
    POSIX shell script.
    Updated 2021-04-25.
END
}

_koopa_export_user() { # {{{1
    [ -z "${USER:-}" ] && USER="$(id -un)" && export USER
    return 0
}

_koopa_is_installed() { # {{{1
    local cmd
    for cmd in "$@"
    do
        command -v "$cmd" >/dev/null || return 1
    done
    return 0
}

_koopa_is_interactive() { # {{{1
    _koopa_str_match_fixed "$-" 'i'
}

_koopa_is_koopa_active() { # {{{1
    local x
    x="$(type '_koopa_prefix' 2>/dev/null)"
   _koopa_str_match_fixed "$x" 'function'
}

_koopa_is_linux() { # {{{1
    [ "$(uname -s)" = 'Linux' ]
}

_koopa_is_macos() { # {{{1
    [ "$(uname -s)" = 'Darwin' ]
}

_koopa_is_subshell() { # {{{1
    [ "${KOOPA_SUBSHELL:-0}" -eq 1 ]
}

_koopa_is_user_named_admin() { # {{{1
    _koopa_str_match_regex "${USER:?}" '^admin'
}

_koopa_is_user_skip() { # {{{1
    [ -z "${KOOPA_USERS_SKIP:-}" ] && return 1
    _koopa_str_match_regex "${KOOPA_USERS_SKIP:?}" "\b${USER:?}\b"
}

_koopa_preflight_checks() { # {{{1
    _koopa_preflight_os_check || return 1
    _koopa_preflight_shell_check || return 1
    _koopa_preflight_zsh_check || return 1
    # > _koopa_preflight_coreutils_check \
    # >     'basename' \
    # >     'dirname' \
    # >     'grep' \
    # >     || return 1
    return 0
}

_koopa_preflight_coreutils_check() { # {{{1
    [ "$#" -gt 0 ] || return 1
    if ! _koopa_is_installed "$@"
    then
        _koopa_warning "Not all required programs are installed: ${*}."
        return 1
    fi
    return 0
}

_koopa_preflight_os_check() { # {{{1
    case "$(uname -s)" in
        Darwin)
            ;;
        Linux)
            ;;
        *)
            _koopa_warning 'Unsupported operating system.'
            return 1
            ;;
    esac
    return 0
}

_koopa_preflight_shell_check() { # {{{1
    # Refer to '_koopa_shell' function for additional details.
    if [ -n "${BASH_VERSION:-}" ]
    then
        KOOPA_SHELL='bash'
    elif [ -n "${ZSH_VERSION:-}" ]
    then
        KOOPA_SHELL='zsh'
    elif [ -d '/proc' ]
    then
        KOOPA_SHELL="$(basename "$(readlink /proc/$$/exe)")"
    else
        KOOPA_SHELL="$(basename "$(ps -p "$$" -o 'comm=' | sed 's/^-//g')")"
    fi
    case "$KOOPA_SHELL" in
        bash|dash|zsh)
            ;;
        *)
            if _koopa_is_interactive
            then
                >&2 cat << END
[koopa] WARNING: Failed to activate koopa in the current shell.

Supported POSIX shells: Bash, Dash, Zsh.

  KOOPA_SHELL : ${KOOPA_SHELL}
        SHELL : ${SHELL:-}
            - : ${-}
            0 : ${0}

Consider switching to bash:
> chsh -s /bin/bash
or zsh:
> chsh -s /bin/zsh
END
            fi
            return 1
            ;;
    esac
    export KOOPA_SHELL
    return 0
}

_koopa_preflight_zsh_check() { # {{{1
    # Zsh currently requires presence of '~/.zshrc' for clean activation.
    #
    # Note that sourcing in '/etc/profile' doesn't return script path in
    # '0', which is commonly recommended online in place of 'BASH_SOURCE'.
    # '0' in this case instead returns '_src_etc_profile'.
    #
    # This approach covers both '_src_etc_profile' and '_src_etc_profile_d'.
    #
    # See also:
    # - https://stackoverflow.com/a/23259585/3911732
    [ "${KOOPA_SHELL:?}" = 'zsh' ] || return 0
    case "$0" in
        _src_etc_profile*)
            # Early return when sourced from '/etc/profile.d'.
            return 1
            ;;
        *)
            export KOOPA_ZSHRC=1
            ;;
    esac
    return 0
}

_koopa_print() { # {{{1
    local string
    [ "$#" -gt 0 ] || return 1
    for string in "$@"
    do
        printf '%b\n' "$string"
    done
    return 0
}

_koopa_realpath() { # {{{1
    local arg x
    [ "$#" -gt 0 ] || return 1
    if _koopa_is_installed realpath
    then
        x="$(realpath "$@")"
    elif _koopa_is_installed grealpath
    then
        x="$(grealpath "$@")"
    elif _koopa_is_macos
    then
        for arg in "$@"
        do
            x="$(cd "$(dirname "$arg")" || return 1; pwd -P)"
            _koopa_print "$x"
        done
        return 0
    else
        x="$(readlink -f "$@")"
    fi
    [ -n "$x" ] || return 1
    _koopa_print "$x"
    return 0
}

_koopa_str_match_fixed() { # {{{1
    local string pattern
    string="${1:?}"
    pattern="${2:?}"
    _koopa_print "$string" | grep -q "$pattern"
}

_koopa_str_match_regex() { # {{{1
    local string pattern
    string="${1:?}"
    pattern="${2:?}"
    _koopa_print "$string" | grep -Eq "$pattern"
}

_koopa_warning() { # {{{1
    local string
    [ "$#" -gt 0 ] || return 1
    for string in "$@"
    do
        printf '%s: %b\n' '[koopa] WARNING' "$string" >&2
    done
    return 0
}

_koopa_activate "$@"
