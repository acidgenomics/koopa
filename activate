#!/bin/sh
# shellcheck disable=SC3040

__koopa_activate_usage() { # {{{1
    # """
    # Koopa activation usage triggered by '--help' flag.
    # @note Updated 2021-05-12.
    # """
    cat << END
usage: activate [--help|-h]

Activate koopa.

optional variables:
    force=0 [false]
        Force activation inside of non-interactive shells.
        Not generally recommended, but used by koopa installer.
    minimal=0 [false]
        Minimal mode.
        Simply load koopa programs into PATH.
        Skips additional program and shell configuration.
        Can enable per user with 'KOOPA_USERS_MINIMAL=user1 user2'.
    test=0 [false]
        Enable verbose test mode.
        Used for Travis CI checks.

details:
    Currently supports Bash, Zsh, and Dash shells.

    For system-wide configuration on Linux, this should be called inside
    '/etc/profile.d/zzz-koopa.sh', owned by root.

    Activation of specific users can be skipped via:
    > export KOOPA_USERS_SKIP='user1 user2'

    Sourcing of POSIX shell scripts via '.' (POSIX) or 'source' (bash, zsh)
    requires that arguments are passed in at the beginning of the call, rather
    than as positional arguments or flags. Refer to the working examples.

examples:
    # Default mode.
    . /usr/local/koopa/activate

    # Minimal mode.
    minimal=1 . /usr/local/koopa/activate
END
}



__koopa_bash_source() { # {{{1
    # """
    # Bash source file location.
    # @note Updated 2021-05-07.
    # """
    # shellcheck disable=SC3028,SC3054
    __koopa_print "${BASH_SOURCE[0]}"
    return 0
}

__koopa_check_os() { # {{{1
    # """
    # Check that operating system is supported.
    # @note Updated 2021-05-07.
    # """
    case "$(uname -s)" in
        Darwin|Linux)
            ;;
        *)
            __koopa_warning 'Unsupported operating system.'
            return 1
            ;;
    esac
    return 0
}

__koopa_check_zsh() { # {{{1
    # """
    # Check that current Zsh configuration is supported.
    # @note Updated 2021-05-14.
    #
    # Zsh currently requires presence of '~/.zshrc' for clean activation.
    #
    # Note that sourcing in '/etc/profile' doesn't return script path in
    # '0', which is commonly recommended online in place of 'BASH_SOURCE'.
    # '0' in this case instead returns '_src_etc_profile'.
    #
    # This approach covers both '_src_etc_profile' and '_src_etc_profile_d'.
    #
    # @seealso
    # - https://stackoverflow.com/a/23259585/3911732
    local shell
    shell="$(__koopa_shell_name)"
    [ "$shell" = 'zsh' ] || return 0
    case "$0" in
        _src_etc_profile*)
            # Early return when sourced from '/etc/profile.d'.
            return 1
            ;;
        *)
            export KOOPA_ZSHRC=1
            ;;
    esac
    return 0
}

__koopa_duration_start() { # {{{1
    # """
    # Start duration timer.
    # @note Updated 2021-05-07.
    # """
    local bc date brew_prefix
    [ "${KOOPA_TEST:-0}" -eq 1 ] || return 0
    if __koopa_is_macos
    then
        if [ -x '/opt/homebrew/bin/brew' ]
        then
            brew_prefix='/opt/homebrew'
        elif [ -x '/usr/local/bin/brew' ]
        then
            brew_prefix='/usr/local'
        else
            exit 0
            return 0
        fi
        bc="${brew_prefix}/opt/bc/bin/bc"
        date="${brew_prefix}/opt/coreutils/libexec/gnubin/date"
    else
        bc='bc'
        date='date'
    fi
    __koopa_is_installed "$bc" "$date" || return 0
    KOOPA_DURATION_START="$("$date" -u '+%s%3N')"
    export KOOPA_DURATION_START
    return 0
}

__koopa_duration_stop() { # {{{1
    # """
    # Stop duration timer.
    # @note Updated 2021-05-07.
    # """
    local bc date brew_prefix
    [ "${KOOPA_TEST:-0}" -eq 1 ] || return 0
    if __koopa_is_macos
    then
        if [ -x '/opt/homebrew/bin/brew' ]
        then
            brew_prefix='/opt/homebrew'
        elif [ -x '/usr/local/bin/brew' ]
        then
            brew_prefix='/usr/local'
        else
            return 0
        fi
        bc="${brew_prefix}/opt/bc/bin/bc"
        date="${brew_prefix}/opt/coreutils/libexec/gnubin/date"
    else
        bc='bc'
        date='date'
    fi
    __koopa_is_installed "$bc" "$date" || return 0
    KOOPA_DURATION_STOP="$("$date" -u '+%s%3N')"
    KOOPA_DURATION="$( \
        __koopa_print "${KOOPA_DURATION_STOP:?}-${KOOPA_DURATION_START:?}" \
        | "$bc" \
    )"
    export KOOPA_DURATION
    unset -v KOOPA_DURATION_START KOOPA_DURATION_STOP
    return 0
}

__koopa_export_koopa_force() { # {{{1
    # """
    # Export 'KOOPA_FORCE' variable.
    # @note Updated 2021-05-07.
    # """
    local force
    force="${KOOPA_FORCE:-}"
    case "$force" in
        1|true)
            KOOPA_FORCE=1
            export KOOPA_FORCE
            ;;
        *)
            unset -v KOOPA_FORCE
            ;;
    esac
    return 0
}

__koopa_export_koopa_interactive() { # {{{1
    # """
    # Export 'KOOPA_INTERACTIVE' variable.
    # @note Updated 2021-05-14.
    # """
    unset -v KOOPA_INTERACTIVE
    if __koopa_is_interactive || \
        [ "${KOOPA_FORCE:-0}" -eq 1 ]
    then
        KOOPA_INTERACTIVE=1
        export KOOPA_INTERACTIVE
    fi
    return 0
}

__koopa_export_koopa_minimal() { # {{{1
    # """
    # Export 'KOOPA_MINIMAL' variable.
    # @note Updated 2021-05-14.
    # """
    local minimal user_pattern user_string
    minimal="${KOOPA_MINIMAL:-}"
    case "$minimal" in
        1|true)
            KOOPA_MINIMAL=1
            export KOOPA_MINIMAL
            return 0
            ;;
        *)
            unset -v KOOPA_MINIMAL
            ;;
    esac
    user_string="${KOOPA_USERS_MINIMAL:-}"
    if [ -n "$user_string" ]
    then
        user_pattern="\b${USER:?}\b"
        if __koopa_str_match_regex "$user_string" "$user_pattern"
        then
            KOOPA_MINIMAL=1
            export KOOPA_MINIMAL
        fi
    fi
    return 0
}

__koopa_export_koopa_prefix() { # {{{1
    # """
    # Export 'KOOPA_PREFIX' variable.
    # @note Updated 2021-05-14.
    # """
    local prefix script shell
    shell="$(basename "$(__koopa_shell)")"
    case "$shell" in
        bash|zsh)
            ;;
        *)
            shell='posix'
            ;;
    esac
    script="$("__koopa_${shell}_source")"
    if [ ! -x "$script" ]
    then
        __koopa_warning 'Failed to locate koopa activate script.'
        return 1
    fi
    # Note that running realpath on the file instead of the directory will
    # properly resolve '~/.config/koopa/activate' symlink case.
    if [ -L "$script" ]
    then
        script="$(__koopa_realpath "$script")"
    fi
    prefix="$(__koopa_realpath "$(dirname "$script")")"
    KOOPA_PREFIX="$prefix"
    export KOOPA_PREFIX
    return 0
}

__koopa_export_koopa_shell() { # {{{1
    # """
    # Check that current shell is supported, and export 'KOOPA_SHELL' variable.
    # @note Updated 2021-05-14.
    # """
    local shell
    shell="$(__koopa_shell)"
    case "$(basename "$shell")" in
        ash | \
        bash | \
        busybox | \
        dash | \
        zsh)
            ;;
        *)
            if __koopa_is_interactive
            then
                >&2 cat << END
WARNING: Failed to activate koopa in the current shell.

    Recommended: Bash or Zsh.
    Also supported: Ash, Busybox, Dash.

    KOOPA_SHELL : '${shell}'
          SHELL : '${SHELL:-}'
              - : '${-}'
              0 : '${0}'
              \$ : '${$}'

    Change to Bash:
        > chsh -s /bin/bash

    Change to Zsh:
        > chsh -s /bin/zsh

END
            fi
            return 1
            ;;
    esac
    KOOPA_SHELL="$shell"
    export KOOPA_SHELL
    return 0
}

__koopa_export_koopa_subshell() { # {{{1
    # """
    # Export 'KOOPA_SUBSHELL' variable.
    # @note Updated 2021-05-07.
    #
    # This function evaluates whether 'KOOPA_PREFIX' is defined, which should be
    # the case only inside a subshell.
    # """
    [ -z "${KOOPA_PREFIX:-}" ] && return 0
    KOOPA_SUBSHELL=1
    export KOOPA_SUBSHELL
    return 0
}

__koopa_export_koopa_test() { # {{{1
    # """
    # Export 'KOOPA_TEST' variable.
    # @note Updated 2021-05-07.
    # """
    local test
    test="${KOOPA_TEST:-}"
    case "$test" in
        1|true)
            KOOPA_TEST=1
            export KOOPA_TEST
            ;;
        *)
            unset -v KOOPA_TEST
            ;;
    esac
    return 0
}

__koopa_export_user() { # {{{1
    # """
    # Export 'USER' variable.
    # @note Updated 2021-05-14.
    # """
    if [ -z "${USER:-}" ]
    then
        USER="$(id -un)"
    fi
    export USER
    return 0
}

__koopa_header() { # {{{1
    # """
    # Shared shell header file location.
    # @note Updated 2021-05-14.
    # """
    local file prefix shell
    prefix="${KOOPA_PREFIX:?}/lang/shell"
    shell="$(__koopa_shell_name)"
    [ -d "${prefix}/${shell}" ] || shell='posix'
    file="${prefix}/${shell}/include/header.sh"
    [ -f "$file" ] || return 1
    __koopa_print "$file"
    return 0
}

__koopa_is_installed() { # {{{1
    # """
    # Are all of the requested programs installed?
    # @note Updated 2021-05-07.
    # """
    local cmd
    for cmd in "$@"
    do
        command -v "$cmd" >/dev/null || return 1
    done
    return 0
}

__koopa_is_interactive() { # {{{1
    # """
    # Is the current shell interactive?
    # @note Updated 2021-05-07.
    # """
    __koopa_str_match_fixed "$-" 'i'
}

__koopa_is_koopa_active() { # {{{1
    # """
    # Is koopa active in the current shell session?
    # @note Updated 2021-05-07.
    # """
    local x
    x="$(type '_koopa_prefix' 2>/dev/null)"
    __koopa_str_match_fixed "$x" 'function'
}

__koopa_is_linux() { # {{{1
    # """
    # Is the operating system Linux?
    # @note Updated 2021-05-07.
    # """
    [ "$(uname -s)" = 'Linux' ]
}

__koopa_is_macos() { # {{{1
    # """
    # Is the operating system macOS?
    # @note Updated 2021-05-07.
    # """
    [ "$(uname -s)" = 'Darwin' ]
}

__koopa_is_subshell() { # {{{1
    # """
    # Is koopa running inside of a subshell?
    # @note Updated 2021-05-07.
    # """
    [ "${KOOPA_SUBSHELL:-0}" -eq 1 ]
}

__koopa_is_user_named_admin() { # {{{1
    # """
    # Is the current user named 'admin' or begin with 'admin'?
    # @note Updated 2021-05-07.
    # """
    __koopa_str_match_regex "${USER:?}" '^admin'
}

__koopa_is_user_manual_skip() { # {{{1
    # """
    # Should activation be manually skipped for the current user?
    # @note Updated 2021-05-07?
    # """
    [ -n "${KOOPA_USERS_SKIP:-}" ] || return 1
    __koopa_str_match_regex "${KOOPA_USERS_SKIP:?}" "\b${USER:?}\b"
}

__koopa_posix_source() { # {{{1
    # """
    # POSIX source file location.
    # @note Updated 2021-05-10.
    #
    # POSIX doesn't support file path resolution of sourced dot scripts.
    # """
    local prefix
    prefix="${KOOPA_PREFIX:-}"
    if [ ! "$prefix" ] && [ -d '/opt/koopa' ]
    then
        prefix='/opt/koopa'
    fi
    if [ ! -d "$prefix" ] && __koopa_is_interactive
    then
        __koopa_warning \
            'Failed to locate koopa activation script.' \
            "Required 'KOOPA_PREFIX' variable is unset."
        return 1
    fi
    __koopa_print "${prefix:?}/activate"
    return 0
}

__koopa_preflight() { # {{{1
    # """
    # Run pre-flight checks.
    # @note Updated 2021-05-11.
    #
    # Determine whether koopa activation should proceed in the current shell.
    # """
    __koopa_export_user || return 1
    __koopa_export_koopa_force || return 1
    __koopa_export_koopa_shell || return 1
    [ "${KOOPA_FORCE:-0}" -eq 0 ] || return 0
    [ "${KOOPA_SKIP:-0}" -eq 0 ] || return 1
    __koopa_is_koopa_active && return 1
    __koopa_is_interactive || return 1
    __koopa_is_user_named_admin && return 1
    __koopa_is_user_manual_skip && return 1
    __koopa_check_os || return 1
    # This will intentionally skip for non-Zsh shells.
    __koopa_check_zsh || return 1
    return 0
}

__koopa_print() { # {{{1
    # """
    # Print a string.
    # @note Updated 2021-05-07.
    # """
    local string
    [ "$#" -gt 0 ] || return 1
    for string in "$@"
    do
        printf '%b\n' "$string"
    done
    return 0
}

__koopa_realpath() { # {{{1
    # """
    # Resolve file path.
    # @note Updated 2021-05-07.
    # """
    local arg bn dn x
    [ "$#" -gt 0 ] || return 1
    if __koopa_is_installed realpath
    then
        x="$(realpath "$@")"
    elif __koopa_is_installed grealpath
    then
        x="$(grealpath "$@")"
    elif __koopa_is_macos
    then
        for arg in "$@"
        do
            bn="$(basename "$arg")"
            dn="$(cd "$(dirname "$arg")" || return 1; pwd -P)"
            x="${dn}/${bn}"
            __koopa_print "$x"
        done
        return 0
    else
        x="$(readlink -f "$@")"
    fi
    [ -n "$x" ] || return 1
    __koopa_print "$x"
    return 0
}

__koopa_shell() { # {{{1
    # """
    # Full path to the current shell binary.
    # @note Updated 2021-05-14.
    # """
    local str
    if [ -n "${KOOPA_SHELL:-}" ]
    then
        str="$KOOPA_SHELL"
    elif __koopa_is_linux && \
        __koopa_is_installed readlink && \
        [ -x "/proc/${$}/exe" ]
    then
        str="$(readlink "/proc/${$}/exe")"
    elif __koopa_is_macos && \
        __koopa_is_installed lsof sed
    then
        str="$( \
            lsof \
                -a \
                -F 'n' \
                -d 'txt' \
                -p "${$}" \
            | sed -n '3p' \
            | sed 's/^n//' \
        )"
    else
        return 1
    fi
    __koopa_print "$str"
    return 0
}

__koopa_shell_name() { # {{{1
    # """
    # Current shell name.
    # @note Updated 2021-05-14.
    # """
    str="$(basename "$(__koopa_shell)")"
    [ -n "$str" ] || return 1
    __koopa_print "$str"
    return 0
}

__koopa_str_match_fixed() { # {{{1
    # """
    # Match a fixed pattern in a string.
    # @note Updated 2021-05-07.
    # """
    local string pattern
    string="${1:-}"
    pattern="${2:?}"
    __koopa_print "$string" | grep -q "$pattern"
}

__koopa_str_match_regex() { # {{{1
    # """
    # Match a regular expression pattern in a string.
    # @note Updated 2021-05-07.
    # """
    local string pattern
    string="${1:-}"
    pattern="${2:?}"
    __koopa_print "$string" | grep -Eq "$pattern"
}

__koopa_warning() { # {{{1
    # """
    # Print a warning message to the console.
    # @note Updated 2021-05-14.
    # """
    local string
    [ "$#" -gt 0 ] || return 1
    for string in "$@"
    do
        printf '%b\n' "$string" >&2
    done
    return 0
}

__koopa_zsh_source() { # {{{1
    # """
    # Zsh source file location.
    # @note Updated 2021-05-07.
    #
    # Use '%x' not '%N' when called inside function.
    # https://stackoverflow.com/a/23259585/3911732
    # """
    __koopa_print "${(%):-%x}"
    return 0
}



__koopa_activate() { # {{{1
    # """
    # Activate koopa bootloader inside shell session.
    # @note Updated 2021-05-14.
    # """
    unset -v \
        KOOPA_INTERACTIVE \
        KOOPA_PREFIX \
        KOOPA_SHELL \
        KOOPA_SUBSHELL
    case "${1:-}" in
        --help|-h)
            __koopa_activate_usage
            return 0
            ;;
    esac
    __koopa_preflight || return 0
    __koopa_export_koopa_interactive || return 1
    __koopa_export_koopa_minimal || return 1
    __koopa_export_koopa_subshell || return 1
    __koopa_export_koopa_test || return 1
    export KOOPA_ACTIVATE=1
    local minimal shell test
    shell="$(__koopa_shell_name)"
    minimal="${KOOPA_MINIMAL:-0}"
    test="${KOOPA_TEST:-0}"
    if [ "$test" -eq 1 ]
    then
        __koopa_print 'Test mode enabled.'
        set -o errexit
        set -o nounset
        # > set -o xtrace
        if [ "$shell" = 'bash' ]
        then
            set -o errtrace
            set -o pipefail
        fi
    fi
    __koopa_duration_start || return 1
    __koopa_export_koopa_prefix || return 1
    # shellcheck source=/dev/null
    . "$(__koopa_header)" || return 1
    _koopa_activate_xdg || return 1
    _koopa_activate_standard_paths || return 1
    _koopa_activate_pkg_config || return 1
    _koopa_add_config_link "$(_koopa_prefix)" 'home' || return 1
    _koopa_add_config_link "$(_koopa_prefix)/activate" || return 1
    _koopa_add_config_link "$(_koopa_dotfiles_prefix)" || return 1
    _koopa_export_cpu_count || return 1
    _koopa_export_editor || return 1
    _koopa_export_git || return 1
    _koopa_export_gnupg || return 1
    _koopa_export_history || return 1
    _koopa_export_hostname || return 1
    _koopa_export_koopa_opt_prefix || return 1
    _koopa_export_pager || return 1
    _koopa_export_python || return 1
    _koopa_export_shell || return 1
    _koopa_export_tmpdir || return 1
    _koopa_export_today || return 1
    if [ "$minimal" -eq 0 ]
    then
        if _koopa_is_linux
        then
            _koopa_activate_bcbio || return 1
        elif _koopa_is_macos
        then
            _koopa_macos_activate_python || return 1
            _koopa_macos_activate_visual_studio_code || return 1
        fi
        _koopa_activate_homebrew || return 1
        _koopa_activate_gnu || return 1
        _koopa_activate_dircolors || return 1
        _koopa_activate_gcc_colors || return 1
        _koopa_activate_emacs || return 1
        _koopa_activate_go || return 1
        _koopa_activate_llvm || return 1
        _koopa_activate_openjdk || return 1
        _koopa_activate_aspera || return 1
        _koopa_activate_nextflow || return 1
        _koopa_activate_ruby || return 1
        _koopa_activate_rust || return 1
        _koopa_activate_perl_packages || return 1
        _koopa_activate_python_packages || return 1
        _koopa_activate_python_startup || return 1
    fi
    _koopa_activate_koopa_paths || return 1
    _koopa_activate_local_paths || return 1
    if [ "$minimal" -eq 0 ]
    then
        case "$shell" in
            bash|dash|zsh)
                "_koopa_activate_${shell}_extras"
                ;;
        esac
        if _koopa_is_macos
        then
            _koopa_macos_activate_color_mode || return 1
            _koopa_macos_activate_iterm || return 1
            _koopa_macos_activate_cli_colors || return 1
        fi
        _koopa_activate_completion || return 1
        _koopa_activate_aliases || return 1
        _koopa_activate_secrets || return 1
        _koopa_activate_ssh_key || return 1
        if ! _koopa_is_subshell
        then
            _koopa_today_bucket || return 1
            _koopa_tmux_sessions || return 1
        fi
    fi
    if [ "$test" -eq 1 ]
    then
        set +o errexit
        set +o nounset
        # > set +o xtrace
        if [ "$shell" = 'bash' ]
        then
            set +o errtrace
            set +o pipefail
        fi
        _koopa_alert_info 'Shell options'
        set +o
        _koopa_alert_info 'Shell variables'
        _koopa_dl \
            '$' "${$}" \
            '-' "${-}" \
            '0' "${0}" \
            'KOOPA_SHELL' "${KOOPA_SHELL:-}" \
            'SHELL' "${SHELL:-}"
        if _koopa_is_installed locale
        then
            _koopa_alert_info 'Locale'
            locale
        fi
        __koopa_duration_stop || return 1
        if [ -n "${KOOPA_DURATION:-}" ]
        then
            _koopa_dl 'duration' "${KOOPA_DURATION:?} ms"
        fi
        _koopa_alert_success 'Activation was successful.'
    fi
    unset -v KOOPA_ACTIVATE KOOPA_INTERACTIVE
    return 0
}

__koopa_activate "$@"
