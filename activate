#!/bin/sh
# shellcheck disable=SC1090,SC2236

# Activate koopa.
# Modified 2019-06-16.

# Currently supporting POSIX-compliant shells:
# - bash
# - ksh
# - zsh

# TODO:
# - fish: This requires loading a separate activation script.
# - tcsh

# SC2236: zsh doesn't handle `-n` flag in place of `! -z` correctly in POSIX
# mode when using `[` instead of `[[`.



# Functions                                                                 {{{1
# ==============================================================================

quiet_cd() {
  cd "$@" >/dev/null || return 1
}



# Initial checks                                                            {{{1
# ==============================================================================

# Skip activation for root user.
[ "$(id -u)" -eq 0 ] && return 0

# Set variable to check if koopa is already active.
# This step is particularly useful when working on a cluster that spawns new
# sessions from the current shell.
[ ! -z "${KOOPA_SHELL:-}" ] && active=1 || active=0

# Don't reload for HPC interactive job.
[ "$active" -eq 1 ] && [ ! -z "${HPC_INTERACTIVE_JOB:-}" ] && return 0



# Detect the current shell                                                  {{{1
# ==============================================================================

# This is not necessarily the default shell (`$SHELL`).

if [ ! -z "${BASH_VERSION:-}" ]
then
    KOOPA_SHELL="bash"
elif [ ! -z "${KSH_VERSION:-}" ]
then
    KOOPA_SHELL="ksh"
elif [ ! -z "${ZSH_VERSION:-}" ]
then
    KOOPA_SHELL="zsh"
else
    >&2 cat << EOF
koopa failed to detect supported shell.

Currently supported: bash, ksh, zsh.
Check your configuration.
Note that '/bin/sh' usage is not recommended.

Environment:
0=${0}
-=${-}
$(env | sort)
EOF
    return 1
fi
export KOOPA_SHELL



# Locate the koopa installation                                             {{{1
# ==============================================================================

if [ "$KOOPA_SHELL" = "bash" ]
then
    # SC2039: In POSIX sh, array references are undefined.
    # shellcheck disable=SC2039
    KOOPA_SOURCE="${BASH_SOURCE[0]}"
elif [ "$KOOPA_SHELL" = "ksh" ]
then
    # SC2154: .sh.file is referenced but not assigned.
    # shellcheck disable=SC2154
    KOOPA_SOURCE="${.sh.file}"
elif [ "$KOOPA_SHELL" = "zsh" ]
then
    # Note that sourcing in `/etc/profile` doesn't return script path in `$0`,
    # which is commonly recommended online in place of `$BASH_SOURCE`. `$0` in
    # this case instead unexpectedly returns `_src_etc_profile`.
    # > KOOPA_SOURCE="${0:a}"
    # > KOOPA_SOURCE="$0"
    # https://stackoverflow.com/a/23259585/3911732
    KOOPA_SOURCE="${(%):-%N}"
fi

if [ ! -f "$KOOPA_SOURCE" ]
then
    >&2 printf "Error: Failed to detect absolute path of activation script.\n"
    return 1
fi

# Note that `pwd` is used here to resolve symlinks.
KOOPA_DIR="$(quiet_cd "${KOOPA_SOURCE%/*}/" && pwd -P)"
export KOOPA_DIR

# Load shared functions.
. "${KOOPA_DIR}/include/functions.sh"

# Get location of activation scripts.
activate_dir="${KOOPA_DIR}/system/activate"



# Flags                                                                     {{{1
# ==============================================================================

for i in "$@"
do
    case "$i" in
        -h|--help)
            help=1
            ;;
        --minimal)
            minimal=1
            export KOOPA_MINIMAL=1
            ;;
        --no-aspera)
            aspera=0
            ;;
        --no-bcbio)
            bcbio=0
            ;;
        --no-conda)
            conda=0
            ;;
        --no-homebrew)
            homebrew=0
            ;;
        --no-perlbrew)
            perlbrew=0
            ;;
        --no-prompt)
            prompt=0
            ;;
        --no-rbenv)
            rbenv=0
            ;;
        --no-ssh-key)
            ssh_key=0
            ;;
        --no-virtualenv)
            virtualenv=0
            ;;
        --*|-*) # Unsupported flags.
            >&2 printf "Error: Invalid flag %s\n" "$1"
            exit 1
            ;;
    esac
done



# Help mode                                                                 {{{1
# ==============================================================================

if [ "${help:-0}" -eq 1 ]
then
    cat << EOF
Activate koopa.

Flags:

    -h, --help         Help mode.

    --minimal          Minimal mode. Simply export koopa programs into PATH.

    --no-prompt        Skip prompt string customization.
                       This disables PS1 export for bash, and skips activation
                       of pure prompt for zsh.
    
    --no-aspera        Skip configuration of Aspera Connect.
    --no-bcbio         Skip configuration of bcbio-nextgen.
    --no-conda         Skip configuration of conda.
    --no-perlbrew      Skip configuration of Perl via perlbrew.
    --no-rbenv         Skip configuration of Ruby via rbenv.
    --no-virtualenv    Skip configuration of Python virtual environment.
    
    [ Linux only ]

    --no-ssh-key       Skip loading of id_rsa default SSH key.

    [ macOS only ]

    --no-homebrew      Skip configuration of Homebrew.
EOF
    exit 0
fi



# Basic shell configuration                                                 {{{1
# ==============================================================================

. "${activate_dir}/preflight.sh"

exports_dir="${activate_dir}/exports"
. "${exports_dir}/general.sh"
. "${exports_dir}/platform.sh"
. "${exports_dir}/cpu-count.sh"
. "${exports_dir}/genomes.sh"
. "${exports_dir}/path.sh"
unset -v exports_dir



# Extra shell configuration                                                 {{{1
# ==============================================================================

if [ "${minimal:-0}" -eq 0 ]
then
    . "${activate_dir}/set.sh"
    . "${activate_dir}/umask.sh"
    . "${activate_dir}/aliases.sh"
    . "${activate_dir}/secrets.sh"
    
    [ "${ssh_key:-1}" -eq 1 ] && \
        . "${activate_dir}/ssh-key.sh"
    
    programs_dir="${activate_dir}/programs"
    [ "${perlbrew:-1}" -eq 1 ] && \
        . "${programs_dir}/perlbrew.sh"
    [ "${rbenv:-1}" -eq 1 ] && \
        . "${programs_dir}/rbenv.sh"
    [ "${aspera:-1}" -eq 1 ] && \
        . "${programs_dir}/aspera.sh"
    [ "${bcbio:-1}" -eq 1 ] && \
        . "${programs_dir}/bcbio.sh"
    [ "${conda:-1}" -eq 1 ] && \
        . "${programs_dir}/conda.sh"
    [ "${virtualenv:-1}" -eq 1 ] && \
        . "${programs_dir}/virtualenv.sh"
    unset -v programs_dir

    # Shell-specific configuration.
    if [ "$KOOPA_SHELL" = "bash" ]
    then
        bash_dir="${activate_dir}/shell/bash"
        . "${bash_dir}/shopt.sh"
        . "${bash_dir}/bind.sh"
        [ "${prompt:-1}" -eq 1 ] && \
            . "${bash_dir}/ps1.sh"
        unset -v bash_dir
    elif [ "$KOOPA_SHELL" = "zsh" ]
    then
        # zhsrc is required for Z shell to configure correctly.
        dotfile -q shrc
        dotfile -q zshrc
    fi

    # Platform-specific configuration.
    if [ ! -z "${MACOS:-}" ]
    then
        darwin_dir="${activate_dir}/os/darwin"
        . "${darwin_dir}/aliases.sh"
        . "${darwin_dir}/grc-colors.sh"
        . "${darwin_dir}/exports.sh"
        [ "${homebrew:-1}" -eq 1 ] && \
            . "${darwin_dir}/programs/homebrew.sh"
        unset -v darwin_dir
    fi

    # Set up the today bucket.
    bash touch-today-bucket
fi



# Post-flight checks and clean-up                                           {{{1
# ==============================================================================

unset -v \
    activate_dir \
    active \
    aspera \
    bcbio \
    conda \
    help \
    homebrew \
    minimal \
    perlbrew \
    prompt \
    rbenv \
    ssh_key \
    virtualenv
