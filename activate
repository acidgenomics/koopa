#!/bin/sh

# Activate koopa.
# Updated 2019-07-30.

# SC2236: zsh doesn't handle `-n` flag in place of `! -z` correctly in POSIX
# mode when using `[` instead of `[[`.

# Dropped support for ksh because it doesn't support `local` variables scoped
# inside of functions.



# Pre-flight checks                                                         {{{1
# ==============================================================================

# Never activate for specific admin accounts.
[ "$(id -u)" -eq 0 ] && return 0
whoami | grep -Eq "\b(admin)\b" && return 0

# Enable test mode.
if [ "${test:-0}" -eq 1 ]
then
    printf "Test mode enabled.\n"
    printf "Setting strict shell mode.\n"
    set -o errexit
    set -o nounset
    if [ -n "${BASH_VERSION:-}" ]
    then
        set -o errtrace
        set -o pipefail
        set -o posix
        set -o xtrace
    fi
    export KOOPA_TEST=1
    force=1
fi

# Check for interactive shell.
echo "$-" | grep -q "i" && export INTERACTIVE=1

# Force reactivation inside of interactive HPC job.
[ -n "${SLURM_JOB_ID:-}" ] && [ -n "${INTERACTIVE:-}" ] && force=1

# Force reactivation inside of tmux session.
[ -z "${TMUX:-}" ] || force=1

[ "${force:-0}" -eq 1 ] && export KOOPA_FORCE=1
[ "${minimal:-0}" -eq 1 ] && export KOOPA_MINIMAL=1

# Early return for non-interactive sessions.
[ -z "${KOOPA_FORCE:-}" ] && [ -z "${INTERACTIVE:-}" ] && return 0

# Early return if koopa is already active.
[ -z "${KOOPA_FORCE:-}" ] && [ -n "${KOOPA_HOME:-}" ] && return 0



# Usage                                                                     {{{1
# ==============================================================================

usage() {
    cat << EOF
usage: activate [-h] [--test] [--force] [--minimal]

Activate koopa.

supported shells: bash, zsh

optional arguments:
    -h, --help
        Show this help message and exit.

optional variables:
    test=1
        Enable verbose test mode. Used for Travis CI checks.
        This will also automatically set 'force=1'.
    force=1
        Force reactivation, even if koopa is already active.
    minimal=1
        Minimal mode. Simply export koopa programs into PATH.
EOF
}



# Parse arguments                                                           {{{1
# ==============================================================================

for i in "$@"
do
    case "$i" in
        -h|--help)
            usage
            exit
            ;;
        *)
            >&2 printf "Error: Invalid argument '%s'\n" "$1"
            exit 1
            ;;
    esac
done

unset -f usage



# Functions                                                                 {{{1
# ==============================================================================

# Fake realpath support, if necessary.
# Note that `readlink -f` doesn't work on macOS.
# # See also:
# - https://github.com/bcbio/bcbio-nextgen/blob/master/tests/run_tests.sh
# # Modified 2019-06-26.
if ! command -v realpath >/dev/null
then
    realpath() {
        if [ "$(uname -s)" = "Darwin" ]
        then
            perl -MCwd -e 'print Cwd::abs_path shift' "$1"
        else
            readlink -f "$@"
        fi
    }
fi



# Locate koopa home                                                         {{{1
# ==============================================================================

if [ -n "${BASH_VERSION:-}" ]
then
    KOOPA_SHELL="bash"
    # SC2039: In POSIX sh, array references are undefined.
    # shellcheck disable=SC2039
    file="${BASH_SOURCE[0]}"
elif [ -n "${ZSH_VERSION:-}" ]
then
    KOOPA_SHELL="zsh"
    # Note that sourcing in `/etc/profile` doesn't return script path in `$0`,
    # which is commonly recommended online in place of `$BASH_SOURCE`. `$0` in
    # this case instead unexpectedly returns `_src_etc_profile`.
    # > file="${0:a}"
    # > file="$0"
    # https://stackoverflow.com/a/23259585/3911732
    file="${(%):-%N}"
else
    >&2 printf "Error: Failed to detect supported shell.\n"
    >&2 printf "Supported: bash, zsh.\n\n"
    >&2 printf "  SHELL: %s\n" "$SHELL"
    >&2 printf "      0: %s\n" "$0"
    >&2 printf "      -: %s\n" "$-"
    return 1
fi
export KOOPA_SHELL

if [ ! -f "${file:-}" ]
then
    >&2 printf "Error: Failed to detect absolute path of activation script.\n"
    return 1
fi

# Note that running realpath on the file instead of the directory will properly
# resolve `~/.config/koopa/activate` in Mike's default `~/.shrc` config file.
KOOPA_HOME="$(dirname "$(realpath "$file")")" && export KOOPA_HOME
unset -v file

# Load shared functions.
# shellcheck source=system/include/functions.sh
. "${KOOPA_HOME}/system/include/functions.sh"

# Get location of activation scripts.
activate_dir="${KOOPA_HOME}/system/activate"



# Basic shell configuration                                                 {{{1
# ==============================================================================

# shellcheck source=/dev/null
. "${activate_dir}/preflight.sh"

exports_dir="${activate_dir}/exports"
# shellcheck source=/dev/null
. "${exports_dir}/xdg-base-directory.sh"
# shellcheck source=/dev/null
. "${exports_dir}/path.sh"
# shellcheck source=/dev/null
. "${exports_dir}/general.sh"
unset -v exports_dir

_koopa_update_xdg_config



# Extra shell configuration                                                 {{{1
# ==============================================================================

if [ "${KOOPA_MINIMAL:-0}" -eq 0 ]
then
    # shellcheck source=/dev/null
    . "${activate_dir}/set.sh"
    # shellcheck source=/dev/null
    . "${activate_dir}/umask.sh"
    # shellcheck source=/dev/null
    . "${activate_dir}/aliases.sh"
    # shellcheck source=/dev/null
    . "${activate_dir}/secrets.sh"
    # shellcheck source=/dev/null
    . "${activate_dir}/ssh-key.sh"

    programs_dir="${activate_dir}/programs"
    # shellcheck source=/dev/null
    . "${programs_dir}/conda.sh"
    # shellcheck source=/dev/null
    # > . "${programs_dir}/conda-envs.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/perlbrew.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/rbenv.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/aspera.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/ensembl-perl-api.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/bcbio.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/virtualenv.sh"
    unset -v programs_dir

    # Shell-specific configuration.
    if [ "$KOOPA_SHELL" = "bash" ]
    then
        bash_dir="${activate_dir}/shell/bash"
        # shellcheck source=/dev/null
        . "${bash_dir}/shopt.sh"
        # shellcheck source=/dev/null
        . "${bash_dir}/bind.sh"
        # shellcheck source=/dev/null
        . "${bash_dir}/ps1.sh"
        unset -v bash_dir
    elif [ "$KOOPA_SHELL" = "zsh" ]
    then
        # `~/.zhsrc` file is required for Z shell to configure correctly.
        if [ ! -f "${HOME}/.zshrc" ]
        then
            dotfile -q shrc
            dotfile -q zshrc
        fi
    fi

    # Platform-specific configuration.
    if _koopa_is_darwin
    then
        darwin_dir="${activate_dir}/os/darwin"
        # shellcheck source=/dev/null
        . "${darwin_dir}/aliases.sh"
        # shellcheck source=/dev/null
        . "${darwin_dir}/exports.sh"
        # shellcheck source=/dev/null
        . "${darwin_dir}/programs/homebrew.sh"
        # shellcheck source=/dev/null
        . "${darwin_dir}/grc-colors.sh"
        unset -v darwin_dir
    fi

    # Set up the today bucket.
    bash touch-today-bucket
fi



# Post-flight checks and clean-up                                           {{{1
# ==============================================================================

unset -v activate_dir
unset -v colors

# Disable test mode.
if [ -n "${KOOPA_TEST:-}" ]
then
    set +o errexit
    set +o nounset
    if [ -n "${BASH_VERSION:-}" ]
    then
        set -o errtrace
        set -o posix
        set -o pipefail
    fi
    printf "Activation was successful.\n"
fi
