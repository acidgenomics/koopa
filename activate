#!/bin/sh
# shellcheck disable=SC3040

_koopa_activate() { # {{{1
    # """
    # Activate koopa bootloader inside shell session.
    # @note Updated 2021-04-23.
    # """
    case "${1:-}" in
        --help|-h)
            _koopa_activate_usage
            return 0
            ;;
    esac
    _koopa_preflight_checks
    _koopa_export_user
    _koopa_activate_export_force
    _koopa_activate_skip_check
    _koopa_activate_export_subshell
    _koopa_activate_export_minimal
    _koopa_activate_export_test
    if [ "${KOOPA_TEST:?}" -eq 1 ]
    then
        printf '%s\n' 'Test mode enabled.'
        set -o errexit
        set -o nounset
        set -o xtrace
        if [ "${KOOPA_SHELL:?}" = 'bash' ]
        then
            set -o errtrace
            set -o pipefail
        fi
        export KOOPA_MINIMAL=0
    fi
    _koopa_activate_export_koopa_prefix
    _koopa_activate_duration_start
    # shellcheck source=/dev/null
    KOOPA_ACTIVATE=1 . "$(_koopa_activate_header)"
    _koopa_activate_xdg
    _koopa_activate_standard_paths
    _koopa_activate_pkg_config
    _koopa_activate_export_opt_prefix
    _koopa_add_config_link "$(_koopa_prefix)" 'home'
    _koopa_add_config_link "$(_koopa_prefix)/activate"
    _koopa_add_config_link "$(_koopa_dotfiles_prefix)"
    _koopa_export_cpu_count
    _koopa_export_editor
    _koopa_export_git
    _koopa_export_gnupg
    _koopa_export_history
    _koopa_export_hostname
    _koopa_export_lesspipe
    _koopa_export_pager
    _koopa_export_proj_lib
    _koopa_export_python
    _koopa_export_shell
    _koopa_export_tmpdir
    _koopa_export_today
    _koopa_export_user
    if [ "${KOOPA_MINIMAL:?}" -eq 0 ]
    then
        # Run OS-specific activation steps at the beginning here.
        if _koopa_is_linux
        then
            _koopa_activate_bcbio
        elif _koopa_is_macos
        then
            _koopa_activate_homebrew_cask_gpg_suite
            _koopa_activate_homebrew_cask_r
            _koopa_activate_macos_python
            _koopa_activate_visual_studio_code
        fi
        _koopa_activate_homebrew
        _koopa_activate_gnu
        _koopa_activate_dircolors
        _koopa_activate_gcc_colors
        _koopa_activate_emacs
        _koopa_activate_go
        _koopa_activate_llvm
        _koopa_activate_openjdk
        _koopa_activate_aspera
        _koopa_activate_nextflow
        # Perl ------------------------------------------------------------ {{{2
        # > _koopa_activate_ensembl_perl_api
        # > _koopa_activate_perlbrew
        # Ruby ------------------------------------------------------------ {{{2
        _koopa_activate_ruby
        # > _koopa_activate_rbenv
        # Rust ------------------------------------------------------------ {{{2
        _koopa_activate_rust
        # Now can activate useful Rust packages.
        _koopa_activate_broot
        _koopa_activate_fzf
        _koopa_activate_zoxide
        # Python ---------------------------------------------------------- {{{2
        _koopa_activate_python_site_packages
        _koopa_activate_python_startup
        # > _koopa_activate_pipx
        # > _koopa_activate_pyenv
        # > _koopa_activate_venv
        _koopa_activate_conda
    fi
    _koopa_activate_koopa_paths
    _koopa_activate_local_paths
    if [ "${KOOPA_MINIMAL:?}" -eq 0 ]
    then
        case "${KOOPA_SHELL:?}" in
            bash|dash|zsh)
                "_koopa_activate_${KOOPA_SHELL}_extras"
                ;;
        esac
        _koopa_is_macos && _koopa_activate_macos_extras
        _koopa_activate_completion
        _koopa_activate_aliases
        _koopa_activate_secrets
        _koopa_activate_ssh_key
        if ! _koopa_is_subshell
        then
            _koopa_today_bucket
            _koopa_tmux_sessions
        fi
    fi
    if [ "${KOOPA_TEST:?}" -eq 1 ]
    then
        set +o errexit
        set +o nounset
        set +o xtrace
        if [ "${KOOPA_SHELL:?}" = 'bash' ]
        then
            set +o errtrace
            set +o pipefail
        fi
        _koopa_alert_info 'Shell options'
        set +o
        _koopa_alert_info 'Shell variables'
        _koopa_dl \
            '-' "$-" \
            '0' "$0" \
            'SHELL' "${SHELL:-}"
        if _koopa_is_installed locale
        then
            _koopa_alert_info 'Locale'
            locale
        fi
        _koopa_activate_duration_stop
        if [ -n "${KOOPA_DURATION:-}" ]
        then
            _koopa_dl 'duration' "${KOOPA_DURATION:?} ms"
        fi
        _koopa_alert_success 'Activation was successful.'
    fi
    unset -f _koopa_activate_usage
    unset -v KOOPA_ACTIVATE KOOPA_ACTIVATE_SCRIPT
    return 0
}

_koopa_activate_dash_extras() { # {{{1
    export PS1='# '
    return 0
}

_koopa_activate_duration_start() { # {{{1
    local bc date homebrew_prefix
    [ "${KOOPA_TEST:-0}" -eq 1 ] || return 0
    if _koopa_is_macos
    then
        if [ -x '/opt/homebrew/bin/brew' ]
        then
            homebrew_prefix='/opt/homebrew'
        elif [ -x '/usr/local/bin/brew' ]
        then
            homebrew_prefix='/usr/local'
        else
            exit 0
            return 0
        fi
        bc="${homebrew_prefix}/opt/bc/bin/bc"
        date="${homebrew_prefix}/opt/coreutils/libexec/gnubin/date"
    else
        bc='bc'
        date='date'
    fi
    _koopa_is_installed "$bc" "$date" || return 0
    KOOPA_DURATION_START="$("$date" -u '+%s%3N')"
    export KOOPA_DURATION_START
    return 0
}

_koopa_activate_duration_stop() { # {{{1
    local bc date homebrew_prefix
    [ "${KOOPA_TEST:-0}" -eq 1 ] || return 0
    if _koopa_is_macos
    then
        if [ -x '/opt/homebrew/bin/brew' ]
        then
            homebrew_prefix='/opt/homebrew'
        elif [ -x '/usr/local/bin/brew' ]
        then
            homebrew_prefix='/usr/local'
        else
            return 0
        fi
        bc="${homebrew_prefix}/opt/bc/bin/bc"
        date="${homebrew_prefix}/opt/coreutils/libexec/gnubin/date"
    else
        bc='bc'
        date='date'
    fi
    _koopa_is_installed "$bc" "$date" || return 0
    KOOPA_DURATION_STOP="$("$date" -u '+%s%3N')"
    KOOPA_DURATION="$( \
        _koopa_print "${KOOPA_DURATION_STOP:?}-${KOOPA_DURATION_START:?}" \
        | "$bc" \
    )"
    export KOOPA_DURATION
    unset -v KOOPA_DURATION_START KOOPA_DURATION_STOP
    return 0
}

_koopa_activate_export_force() { # {{{1
    [ -n "${KOOPA_FORCE:-}" ] && return 0
    case "${force:-}" in
        0|false)
            KOOPA_FORCE=0
            ;;
        1|true)
            KOOPA_FORCE=1
            ;;
        *)
            KOOPA_FORCE=0
            ;;
    esac
    export KOOPA_FORCE
    unset -v force
    return 0
}

_koopa_activate_export_minimal() { # {{{1
    [ -n "${KOOPA_MINIMAL:-}" ] && return 0
    case "${minimal:-}" in
        0|false)
            KOOPA_MINIMAL=0
            ;;
        1|true)
            KOOPA_MINIMAL=1
            ;;
        *)
            KOOPA_MINIMAL=0
            ;;
    esac
    unset -v minimal
    if [ -n "${KOOPA_USERS_MINIMAL:-}" ]
    then
        if printf '%s\n' "${KOOPA_USERS_MINIMAL:?}" | grep -Eq "\b${USER:?}\b"
        then
            KOOPA_MINIMAL=1
        fi
    fi
    export KOOPA_MINIMAL
    return 0
}

_koopa_activate_export_opt_prefix() { # {{{1
    # This value is picked up in R configuration (for reticulate).
    KOOPA_OPT_PREFIX="$(_koopa_opt_prefix)"
    export KOOPA_OPT_PREFIX
    return 0
}

_koopa_activate_export_koopa_prefix() { # {{{1
    case "${KOOPA_SHELL:?}" in
        bash)
            KOOPA_ACTIVATE_SCRIPT="$(_koopa_activate_source_bash)"
            ;;
        zsh)
            KOOPA_ACTIVATE_SCRIPT="$(_koopa_activate_source_zsh)"
            ;;
        *)
            KOOPA_ACTIVATE_SCRIPT="$(_koopa_activate_source_posix)"
            ;;
    esac
    if [ ! -x "$KOOPA_ACTIVATE_SCRIPT" ]
    then
        printf 'ERROR: Failed locate koopa activate script.\n' >&2
        return 1
    fi
    # Note that running realpath on the file instead of the directory will
    # properly resolve '~/.config/koopa/activate' case.
    if [ -L "$KOOPA_ACTIVATE_SCRIPT" ]
    then
        KOOPA_ACTIVATE_SCRIPT="$(_koopa_realpath "$KOOPA_ACTIVATE_SCRIPT")"
    fi
    KOOPA_PREFIX="$(_koopa_realpath "$(dirname "$KOOPA_ACTIVATE_SCRIPT")")"
    export KOOPA_ACTIVATE_SCRIPT KOOPA_PREFIX
    return 0
}

_koopa_activate_export_subshell() { # {{{1
    [ -n "${KOOPA_SUBSHELL:-}" ] && return 0
    KOOPA_SUBSHELL=0
    export KOOPA_SUBSHELL
    return 0
}

_koopa_activate_export_test() { # {{{1
    [ -n "${KOOPA_TEST:-}" ] && return 0
    case "${test:-}" in
        0|false)
            KOOPA_TEST=0
            ;;
        1|true)
            KOOPA_TEST=1
            ;;
        *)
            KOOPA_TEST=0
            ;;
    esac
    export KOOPA_TEST
    unset -v test
    return 0
}

_koopa_activate_header() { # {{{1
    local header
    # Load shell header file, which will source required functions.
    if [ -f "${KOOPA_PREFIX:?}/lang/shell/${KOOPA_SHELL:?}/include/header.sh" ]
    then
        header="${KOOPA_PREFIX:?}/lang/shell/${KOOPA_SHELL:?}/include/header.sh"
    else
        header="${KOOPA_PREFIX:?}/lang/shell/posix/include/header.sh"
    fi
    printf '%s\n' "$header"
    return 0
}

_koopa_activate_skip_check() { # {{{1
    [ -n "${KOOPA_FORCE:-}" ] && return 0
    [ -n "${KOOPA_SKIP:-}" ] || return 1
    _koopa_is_interactive || return 1
    _koopa_is_user_named_admin && return 1
    _koopa_is_user_skip && return 1
    _koopa_is_koopa_active && return 1
    return 0
}

_koopa_activate_source_bash() { # {{{1
    # shellcheck disable=SC3028,SC3054
    printf '%s\n' "${BASH_SOURCE[0]}"
    return 0
}

_koopa_activate_source_posix() { # {{{1
    # POSIX doesn't support file path resolution of sourced dot scripts.
    if [ ! -d "${KOOPA_PREFIX:?}" ] && _koopa_is_interactive
    then
        printf 'ERROR: Failed to locate koopa activation script.\n' >&2
        printf 'Required KOOPA_PREFIX variable is unset.\n' >&2
        return 1
    fi
    printf '%s\n' "${KOOPA_PREFIX:?}/activate"
    return 0
}

_koopa_activate_source_zsh() { # {{{1
    # Use '%x' not '%N' when called inside function.
    # https://stackoverflow.com/a/23259585/3911732
    printf '%s\n' "${(%):-%x}"
    return 0
}

_koopa_activate_usage() { # {{{1
    cat << END
usage: activate [--help|-h]

Activate koopa.

optional variables:
    force=0 [false]
        Force activation inside of non-interactive shells.
        Not generally recommended, but used by koopa installer.
    minimal=0 [false]
        Minimal mode.
        Simply load koopa programs into PATH.
        Skips additional program and shell configuration.
        Can enable per user with 'KOOPA_USERS_MINIMAL=user1 user2'.
    test=0 [false]
        Enable verbose test mode.
        Used for Travis CI checks.

details:
    Currently supports Bash, Zsh, and Dash shells.

    For system-wide configuration on Linux, this should be called inside
    '/etc/profile.d/zzz-koopa.sh', owned by root.

    Activation of specific users can be skipped via:
    > export KOOPA_USERS_SKIP='user1 user2'

    Sourcing of POSIX shell scripts via '.' (POSIX) or 'source' (bash, zsh)
    requires that arguments are passed in at the beginning of the call, rather
    than as positional arguments or flags. Refer to the working examples.

examples:
    # Default mode
    . /usr/local/koopa/activate

    # Minimal mode
    minimal=1 . /usr/local/koopa/activate

note:
    POSIX shell script.
    Updated 2021-02-15.
END
}

_koopa_export_user() { # {{{1
    [ -z "${USER:-}" ] && USER="$(id -un)" && export USER
    return 0
}

_koopa_is_installed() { # {{{1
    local cmd
    for cmd in "$@"
    do
        command -v "$cmd" >/dev/null || return 1
    done
    return 0
}

_koopa_is_interactive() { # {{{1
    printf '%s\n' "$-" | grep -q 'i'
}

_koopa_is_koopa_active() { # {{{1
    type '_koopa_prefix' 2>/dev/null | grep -q 'function'
}

_koopa_is_linux() { # {{{1
    [ "$(uname -s)" = 'Linux' ]
}

_koopa_is_macos() { # {{{1
    [ "$(uname -s)" = 'Darwin' ]
}

_koopa_is_subshell() { # {{{1
    [ "${KOOPA_SUBSHELL:-0}" -eq 1 ]
}

_koopa_is_user_named_admin() { # {{{1
    printf '%s\n' "${USER:?}" | grep -Eq '^admin'
}

_koopa_is_user_skip() { # {{{1
    [ -z "${KOOPA_USERS_SKIP:-}" ] && return 1
    printf '%s\n' "${KOOPA_USERS_SKIP:?}" | grep -Eq "\b${USER:?}\b"
}

_koopa_preflight_checks() { # {{{1
    _koopa_preflight_os_check || return 1
    _koopa_preflight_shell_check || return 1
    _koopa_preflight_zsh_check || return 1
    return 0
}

_koopa_preflight_os_check() { # {{{1
    case "$(uname -s)" in
        Darwin)
            ;;
        Linux)
            ;;
        *)
            printf 'ERROR: Unsupported operating system.\n' >&2
            return 1
            ;;
    esac
    return 0
}

_koopa_preflight_shell_check() { # {{{1
    # Refer to '_koopa_shell' function for additional details.
    if [ -n "${BASH_VERSION:-}" ]
    then
        KOOPA_SHELL='bash'
    elif [ -n "${ZSH_VERSION:-}" ]
    then
        KOOPA_SHELL='zsh'
    elif [ -d '/proc' ]
    then
        KOOPA_SHELL="$(basename "$(readlink /proc/$$/exe)")"
    else
        KOOPA_SHELL="$(basename "$(ps -p "$$" -o 'comm=' | sed 's/^-//g')")"
    fi
    case "$KOOPA_SHELL" in
        bash|dash|zsh)
            ;;
        *)
            if _koopa_is_interactive
            then
                >&2 cat << END
ERROR: Failed to activate koopa in the current shell.

Supported POSIX shells: Bash, Dash, Zsh.

  KOOPA_SHELL : ${KOOPA_SHELL}
        SHELL : ${SHELL:-}
            - : ${-}
            0 : ${0}

Consider switching to bash:
> chsh -s /bin/bash
or zsh:
> chsh -s /bin/zsh
END
            fi
            return 1
            ;;
    esac
    export KOOPA_SHELL
    return 0
}

_koopa_preflight_zsh_check() { # {{{1
    # Zsh currently requires presence of '~/.zshrc' for clean activation.
    #
    # Note that sourcing in '/etc/profile' doesn't return script path in
    # '0', which is commonly recommended online in place of 'BASH_SOURCE'.
    # '0' in this case instead returns '_src_etc_profile'.
    #
    # This approach covers both '_src_etc_profile' and '_src_etc_profile_d'.
    #
    # See also:
    # - https://stackoverflow.com/a/23259585/3911732
    [ "${KOOPA_SHELL:?}" = 'zsh' ] || return 0
    case "$0" in
        _src_etc_profile*)
            # Early return when sourced from '/etc/profile.d'.
            return 1
            ;;
        *)
            export KOOPA_ZSHRC=1
            ;;
    esac
    return 0
}

_koopa_realpath() { # {{{1
    local x
    [ "$#" -eq 1 ] || return 1
    if _koopa_is_installed realpath
    then
        x="$(realpath "$1")"
    elif [ "$(uname -s)" = 'Darwin' ]
    then
        x="$(perl -MCwd -e 'print Cwd::abs_path shift' "$1")"
    else
        x="$(readlink -f "$1")"
    fi
    [ -n "$x" ] || return 1
    printf '%s\n' "$x"
    return 0
}

_koopa_activate "$@"
