#!/bin/sh
# koopa nolint=coreutils

# Csh is not supported, primarily due to lack of functions.
# > csh -l or csh -i
[ "$0" = 'csh' ] && \
    printf '%s\n' 'koopa does not support csh.' && \
    exit 1

# Tcsh is not supported, primarily due to lack of functions.
# > tcsh -l or tcsh -i
[ "$0" = 'tcsh' ] && \
    printf '%s\n' 'koopa does not support tcsh.' && \
    exit 1

# Ksh is not supported, primarily due to lack of 'local' variables.
# > ksh -il
if [ "$0" = 'ksh' ] || [ -n "${KSH_VERSION:-}" ]
then
    printf '%s\n' 'koopa does not support ksh.'
    return 1
fi



__koopa_activate_usage() { # {{{1
    # """
    # Koopa activation usage triggered by '--help' flag.
    # @note Updated 2021-05-24.
    # """
    cat << END
usage: activate [--help|-h]

Activate koopa.

supported environment variables:
    KOOPA_FORCE=1
        Force activation inside of non-interactive shells.
        Not generally recommended, but used by koopa installer.
    KOOPA_MINIMAL=1
        Minimal mode.
        Simply load koopa programs into PATH.
        Skips additional program and shell configuration.
        Can enable per user with 'KOOPA_USERS_MINIMAL=user1 user2'.
    KOOPA_TEST=1
        Enable verbose test mode.
        Used for Travis CI checks.
    KOOPA_USERS_SKIP='<user1> <user2> ...'
        Skip activation for specific users.
        Note that users containing the word 'admin' (but not 'root' user)
        are skipped by default.

details:
    Bash or Zsh is currently recommended.
    Also supports Ash, Busybox, and Dash POSIX shells.

    For system-wide configuration on Linux, this should be called inside
    '/etc/profile.d/zzz-koopa.sh', owned by root.

    Sourcing of POSIX shell scripts via '.' (POSIX) or 'source' (bash, zsh)
    requires that arguments are passed in at the beginning of the call, rather
    than as positional arguments or flags. Refer to the working examples.

examples:
    # Default mode.
    . /usr/local/koopa/activate

    # Minimal mode.
    export KOOPA_MINIMAL=1
    . /usr/local/koopa/activate
END
}



__koopa_bash_source() { # {{{1
    # """
    # Bash source file location.
    # @note Updated 2021-05-07.
    # """
    # shellcheck disable=SC3028,SC3054
    __koopa_print "${BASH_SOURCE[0]}"
    return 0
}

__koopa_check_zsh() { # {{{1
    # """
    # Check that current Zsh configuration is supported.
    # @note Updated 2021-05-25.
    #
    # Zsh currently requires presence of '~/.zshrc' for clean activation.
    # This check will intentionally force early return when activation is
    # attempted from '/etc/profile.d'.
    #
    # Note that sourcing in '/etc/profile' doesn't return script path in
    # '0', which is commonly recommended online in place of 'BASH_SOURCE'.
    # '0' in this case instead returns '_src_etc_profile'.
    #
    # This approach covers both '_src_etc_profile' and '_src_etc_profile_d'.
    #
    # @seealso
    # - https://stackoverflow.com/a/23259585/3911732
    [ -n "${ZSH_VERSION:-}" ] || return 0
    case "$0" in
        _src_etc_profile*)
            return 1
            ;;
    esac
    return 0
}

__koopa_export_koopa_interactive() { # {{{1
    # """
    # Export 'KOOPA_INTERACTIVE' variable.
    # @note Updated 2021-05-25.
    # """
    if __koopa_is_interactive || [ "${KOOPA_FORCE:-0}" -eq 1 ]
    then
        KOOPA_INTERACTIVE=1
        export KOOPA_INTERACTIVE
    fi
    return 0
}

__koopa_export_koopa_prefix() { # {{{1
    # """
    # Export 'KOOPA_PREFIX' variable.
    # @note Updated 2021-05-25.
    # """
    local prefix script shell
    shell="${SHELL?}"
    case "$shell" in
        bash|zsh)
            ;;
        *)
            shell='posix'
            ;;
    esac
    script="$("__koopa_${shell}_source")"
    if [ ! -x "$script" ]
    then
        __koopa_warning 'Failed to locate koopa activate script.'
        return 1
    fi
    # Note that running realpath on the file instead of the directory will
    # properly resolve '~/.config/koopa/activate' symlink case.
    if [ -L "$script" ]
    then
        script="$(__koopa_realpath "$script")"
    fi
    prefix="$(__koopa_realpath "$(dirname "$script")")"
    KOOPA_PREFIX="$prefix"
    export KOOPA_PREFIX
    return 0
}

__koopa_export_koopa_subshell() { # {{{1
    # """
    # Export 'KOOPA_SUBSHELL' variable.
    # @note Updated 2021-05-25.
    #
    # This function evaluates whether 'KOOPA_PREFIX' is defined, which should be
    # the case only inside a subshell.
    # """
    [ -z "${KOOPA_PREFIX:-}" ] && return 0
    KOOPA_SUBSHELL=1
    export KOOPA_SUBSHELL
    return 0
}

__koopa_export_shell() { # {{{1
    # """
    # Export 'SHELL' variable.
    # @note Updated 2021-05-25.
    # """
    SHELL="$(__koopa_shell_name)"
    export SHELL
    return 0
}

__koopa_export_user() { # {{{1
    # """
    # Export 'USER' variable.
    # @note Updated 2021-05-25.
    # """
    [ -z "${USER:-}" ] && USER="$(id -un)"
    export USER
    return 0
}

__koopa_header() { # {{{1
    # """
    # Shared shell header file location.
    # @note Updated 2021-05-25.
    # """
    local file prefix shell
    prefix="${KOOPA_PREFIX:?}/lang/shell"
    shell="${SHELL?}"
    [ -d "${prefix}/${shell}" ] || shell='posix'
    file="${prefix}/${shell}/include/header.sh"
    [ -f "$file" ] || return 1
    __koopa_print "$file"
    return 0
}

__koopa_is_installed() { # {{{1
    # """
    # Are all of the requested programs installed?
    # @note Updated 2021-05-07.
    # """
    local cmd
    for cmd in "$@"
    do
        command -v "$cmd" >/dev/null || return 1
    done
    return 0
}

__koopa_is_interactive() { # {{{1
    # """
    # Is the current shell interactive?
    # @note Updated 2021-05-07.
    # """
    __koopa_str_match_fixed "$-" 'i'
}

__koopa_is_linux() { # {{{1
    # """
    # Is the operating system Linux?
    # @note Updated 2021-05-07.
    # """
    [ "$(uname -s)" = 'Linux' ]
}

__koopa_is_macos() { # {{{1
    # """
    # Is the operating system macOS?
    # @note Updated 2021-05-07.
    # """
    [ "$(uname -s)" = 'Darwin' ]
}

__koopa_is_subshell() { # {{{1
    # """
    # Is koopa running inside of a subshell?
    # @note Updated 2021-05-07.
    # """
    [ "${KOOPA_SUBSHELL:-0}" -eq 1 ]
}

__koopa_is_user_named_admin() { # {{{1
    # """
    # Is the current user named 'admin' or begin with 'admin'?
    # @note Updated 2021-05-07.
    # """
    __koopa_str_match_regex "${USER:?}" '^admin'
}

__koopa_is_user_manual_skip() { # {{{1
    # """
    # Should activation be manually skipped for the current user?
    # @note Updated 2021-05-17.
    # """
    local pattern string
    [ -n "${KOOPA_USERS_SKIP:-}" ] || return 1
    string="${KOOPA_USERS_SKIP:?}"
    pattern="\b${USER:?}\b"
    __koopa_str_match_regex "$string" "$pattern"
}

__koopa_locate_shell() { # {{{1
    # """
    # Current shell executable.
    # @note Updated 2021-05-20.
    # """
    local str
    str=''
    if __koopa_is_linux
    then
        if __koopa_is_installed ps sed
        then
            str="$( \
                ps -p "${$}" -o 'comm=' \
                | sed 's/^-//' \
            )"
        elif [ -x "/proc/${$}/exe" ]
        then
            str="$(__koopa_realpath "/proc/${$}/exe")"
        fi
    elif __koopa_is_macos
    then
        if __koopa_is_installed lsof sed
        then
            str="$( \
                lsof \
                    -a \
                    -F 'n' \
                    -d 'txt' \
                    -p "${$}" \
                | sed -n '3p' \
                | sed 's/^n//' \
            )"
        fi
    fi
    [ -n "$str" ] || return 1
    __koopa_print "$str"
    return 0
}

__koopa_posix_source() { # {{{1
    # """
    # POSIX source file location.
    # @note Updated 2021-05-10.
    #
    # POSIX doesn't support file path resolution of sourced dot scripts.
    # """
    local prefix
    prefix="${KOOPA_PREFIX:-}"
    if [ ! "$prefix" ] && [ -d '/opt/koopa' ]
    then
        prefix='/opt/koopa'
    fi
    if [ ! -d "$prefix" ] && __koopa_is_interactive
    then
        __koopa_warning \
            'Failed to locate koopa activation script.' \
            "Required 'KOOPA_PREFIX' variable is unset."
        return 1
    fi
    __koopa_print "${prefix:?}/activate"
    return 0
}

__koopa_preflight() { # {{{1
    # """
    # Run pre-flight checks.
    # @note Updated 2021-05-25.
    # """
    [ "${KOOPA_SKIP:-0}" -eq 1 ] && return 1
    [ "${KOOPA_FORCE:-0}" -eq 1 ] && return 0
    __koopa_check_zsh || return 1
    __koopa_is_interactive || return 1
    __koopa_export_user || return 1
    __koopa_is_user_named_admin && return 1
    __koopa_is_user_manual_skip && return 1
    return 0
}

__koopa_print() { # {{{1
    # """
    # Print a string.
    # @note Updated 2021-05-07.
    # """
    local string
    [ "$#" -gt 0 ] || return 1
    for string in "$@"
    do
        printf '%b\n' "$string"
    done
    return 0
}

__koopa_realpath() { # {{{1
    # """
    # Resolve file path.
    # @note Updated 2021-05-24.
    # """
    local readlink x
    readlink='readlink'
    __koopa_is_macos && readlink='greadlink'
    if ! __koopa_is_installed "$readlink"
    then
        __koopa_warning "Not installed: '${readlink}'."
        __koopa_is_macos && \
            __koopa_warning 'Install Homebrew and GNU coreutils to resolve.'
        return 1
    fi
    x="$("$readlink" -f "$@")"
    [ -n "$x" ] || return 1
    __koopa_print "$x"
    return 0
}

__koopa_shell_name() { # {{{1
    # """
    # Current shell name.
    # @note Updated 2021-05-25.
    # """
    local shell str
    shell="$(__koopa_locate_shell)"
    str="$(basename "$shell")"
    [ -n "$str" ] || return 1
    __koopa_print "$str"
    return 0
}

__koopa_str_match_fixed() { # {{{1
    # """
    # Match a fixed pattern in a string.
    # @note Updated 2021-05-07.
    # """
    local string pattern
    string="${1:-}"
    pattern="${2:?}"
    __koopa_print "$string" | grep -q "$pattern"
}

__koopa_str_match_regex() { # {{{1
    # """
    # Match a regular expression pattern in a string.
    # @note Updated 2021-05-07.
    # """
    local string pattern
    string="${1:-}"
    pattern="${2:?}"
    __koopa_print "$string" | grep -Eq "$pattern"
}

__koopa_warning() { # {{{1
    # """
    # Print a warning message to the console.
    # @note Updated 2021-05-14.
    # """
    local string
    [ "$#" -gt 0 ] || return 1
    for string in "$@"
    do
        printf '%b\n' "$string" >&2
    done
    return 0
}

__koopa_zsh_source() { # {{{1
    # """
    # Zsh source file location.
    # @note Updated 2021-05-07.
    #
    # Use '%x' not '%N' when called inside function.
    # https://stackoverflow.com/a/23259585/3911732
    # """
    __koopa_print "${(%):-%x}"
    return 0
}



__koopa_activate() { # {{{1
    # """
    # Activate koopa bootloader inside shell session.
    # @note Updated 2021-05-25.
    # """
    case "${1:-}" in
        --help|-h)
            __koopa_activate_usage
            return 0
            ;;
    esac
    if [ "${KOOPA_VERBOSE:-0}" -eq 1 ]
    then
        set -o xtrace
    fi
    if [ "${KOOPA_TEST:-0}" -eq 1 ]
    then
        set -o errexit
        set -o nounset
        if [ -n "${BASH_VERSION:-}" ]
        then
            set -o errtrace
            set -o pipefail
        fi
    fi
    unset -v KOOPA_INTERACTIVE KOOPA_SHELL KOOPA_SUBSHELL
    __koopa_preflight || return 0
    __koopa_export_shell || return 1
    __koopa_export_koopa_interactive || return 1
    __koopa_export_koopa_subshell || return 1
    __koopa_export_koopa_prefix || return 1
    export KOOPA_ACTIVATE=1
    # shellcheck source=/dev/null
    . "$(__koopa_header)" || return 1
    if [ "${KOOPA_TEST:-0}" -eq 1 ]
    then
        _koopa_duration_start || return 1
    fi
    _koopa_activate_xdg || return 1                                     #  40 ms
    _koopa_add_config_link \
        "$(_koopa_prefix)" 'home' \
        || return 1
    _koopa_add_config_link \
        "$(_koopa_prefix)/activate" 'activate' \
        || return 1
    _koopa_add_config_link \
        "$(_koopa_dotfiles_prefix)" 'dotfiles' \
        || return 1
    _koopa_activate_standard_paths || return 1                          #  25 ms
    _koopa_activate_pkg_config || return 1                              #  25 ms
    _koopa_export_cpu_count || return 1                                 #   6 ms
    _koopa_export_editor || return 1                                    #   1 ms
    _koopa_export_git || return 1                                       #   1 ms
    _koopa_export_gnupg || return 1                                     #   1 ms
    _koopa_export_history || return 1                                   #  40 ms
    _koopa_export_pager || return 1                                     #   1 ms
    _koopa_export_python || return 1                                    #   1 ms
    _koopa_export_shell || return 1                                     #  30 ms
    _koopa_export_tmpdir || return 1                                    #   1 ms
    if [ "${KOOPA_MINIMAL:-0}" -eq 0 ]
    then
        if _koopa_is_linux
        then
            _koopa_activate_bcbio || return 1
        elif _koopa_is_macos
        then
            _koopa_macos_activate_python || return 1
            _koopa_macos_activate_visual_studio_code || return 1
        fi
        _koopa_activate_homebrew || return 1
        _koopa_activate_gnu || return 1
        _koopa_activate_dircolors || return 1
        _koopa_activate_gcc_colors || return 1
        _koopa_activate_emacs || return 1
        _koopa_activate_go || return 1
        _koopa_activate_node || return 1
        _koopa_activate_openjdk || return 1
        _koopa_activate_aspera || return 1
        _koopa_activate_nextflow || return 1
        _koopa_activate_ruby || return 1
        _koopa_activate_rust || return 1
        _koopa_activate_perl_packages || return 1
        _koopa_activate_python_packages || return 1
        _koopa_activate_python_startup || return 1
    fi
    _koopa_activate_koopa_paths || return 1                             # 120 ms
    _koopa_activate_local_paths || return 1                             #   1 ms
    if [ "${KOOPA_MINIMAL:-0}" -eq 0 ]
    then
        case "${SHELL:?}" in
            bash|dash|zsh)
                "_koopa_activate_${SHELL?}_extras"                      # 200 ms
                ;;
        esac
        if _koopa_is_macos
        then
            _koopa_macos_activate_color_mode || return 1                #   1 ms
            _koopa_macos_activate_iterm || return 1                     #   1 ms
            _koopa_macos_activate_cli_colors || return 1                #   3 ms
        fi
        _koopa_activate_aliases || return 1                             #  20 ms
        _koopa_activate_secrets || return 1                             #   8 ms
        _koopa_activate_ssh_key || return 1                             #   5 ms
        if ! _koopa_is_subshell
        then
            _koopa_activate_today_bucket || return 1                    #   1 ms
            _koopa_activate_tmux_sessions || return 1                   #   1 ms
        fi
    fi
    if [ "${KOOPA_TEST:-0}" -eq 1 ]
    then
        _koopa_duration_stop || return 1
    fi
    if [ "${KOOPA_VERBOSE:-0}" -eq 1 ]
    then
        if _koopa_is_installed locale
        then
            _koopa_alert_info 'Locale'
            locale
        fi
        _koopa_alert_info 'Shell options'
        set +o
        _koopa_alert_info 'Shell variables'
        _koopa_dl \
            '$' "${$}" \
            '-' "${-}" \
            'KOOPA_SHELL' "${KOOPA_SHELL:-}" \
            'SHELL' "${SHELL:-}"
    fi
    if [ "${KOOPA_TEST:-0}" -eq 1 ]
    then
        set +o errexit
        set +o nounset
        if [ -n "${BASH_VERSION:-}" ]
        then
            set +o errtrace
            set +o pipefail
        fi
        _koopa_alert_success 'Activation was successful.'
    fi
    if [ "${KOOPA_VERBOSE:-0}" -eq 1 ]
    then
        set +o xtrace
    fi
    unset -v KOOPA_ACTIVATE KOOPA_INTERACTIVE
    return 0
}

__koopa_activate "$@"
