#!/bin/sh
# shellcheck disable=SC1090,SC1091,SC2039
# SC2236: zsh doesn't handle '-n' flag in place of '! -z' correctly in POSIX
# mode when using '[' instead of '[['.



# Notes                                                                     {{{1
# ==============================================================================

# Dropped support for ksh because it doesn't support 'local' variables scoped
# inside of functions.

# Checking declared values in Bash:
# - 'declare -F': Display function names.
# - 'declare -p': Display the attributes and value of each name.
# - 'declare -x': Display exported values.



# Usage                                                                     {{{1
# ==============================================================================

usage() {
    cat << EOF
usage: activate [--help|-h]

Activate koopa.

optional variables:
    extra=1 [true]
        Enable extra shell and OS-specific configuration.
    programs=1 [true]
        Enable automatic configuration of supported programs.
    minimal=0 [false]
        Minimal mode. Simply export koopa programs into PATH.
        Skip additional program and shell configuration.
        Internally, this sets extra=0, programs=1.

optional variables, for debugging:
    force=0 [false]
        Force reactivation, even if koopa is already active.
    test=0 [false]
        Enable verbose test mode. Used for Travis CI checks.
        This will also automatically set 'force=1'.

optional arguments:
    --help, -h
        Show this help message and exit.

details:
    Currently supports bash, zsh.

    For system-wide configuration on Linux, this should be called inside
    '/etc/profile.d/zzz-koopa.sh', owned by root.

    Sourcing of POSIX shell scripts via '.' (POSIX) or 'source' (bash, zsh)
    requires that arguments are passed in at the beginning of the call, rather
    than as positional arguments or flags. Refer to the working examples below.

examples:
    # Default mode
    . /usr/local/koopa/activate

    # Minimal mode
    minimal=1 . /usr/local/koop/activate

note:
    POSIX script.
    Updated 2019-10-18.
EOF
}

case "${1:-}" in
    --help|-h)
        usage
        exit 0
        ;;
esac

unset -f usage



# Pre-flight checks                                                         {{{1
# ==============================================================================

# Never activate for specific admin accounts.
[ "$(id -u)" -eq 0 ] && return 0
whoami | grep -Eq "\badmin\b" && return 0
[ -n "${USER:-}" ] && USER="$(whoami)" && export USER
if [ -n "${KOOPA_SKIP_USERS:-}" ]
then
    echo "$KOOPA_SKIP_USERS" | grep -Eq "\b${USER}\b" && return 0
fi

# Check for interactive shell.
echo "$-" | grep -q "i" && interactive=1 || interactive=0

# Detect force mode.
# Disabled by default.
[ -z "${force:-}" ] && force=0
case "$force" in
    1|true)
        force=1
        ;;
    *)
        force=0
        ;;
esac

# Detect if koopa is already active and being requested inside a subshell.
if [ -n "${KOOPA_HOME:-}" ] && [ "$force" -eq 0 ]
then
    subshell=1
else
    subshell=0
fi

# Skip activation for non-interactive sessions.
[ "$force" -eq 0 ] && [ "$interactive" -eq 0 ] && return 0



# Enable test mode                                                          {{{1
# ==============================================================================

[ -z "${test:-}" ] && test=0
[ -n "${KOOPA_TEST:-}" ] && test=1
case "$test" in
    1|true)
        test=1
        ;;
    *)
        test=0
        ;;
esac

if [ "$test" -eq 1 ]
then
    printf "Test mode enabled.\n"
    printf "Setting strict shell mode.\n"
    set -o errexit
    set -o nounset
    if [ -n "${BASH_VERSION:-}" ]
    then
        set -o errtrace
        set -o pipefail
        set -o posix
        set -o xtrace
    fi
    force=1
    export KOOPA_TEST=1
fi



# Functions                                                                 {{{1
# ==============================================================================

if ! command -v realpath >/dev/null
then
    realpath() {
        if [ "$(uname -s)" = "Darwin" ]
        then
            perl -MCwd -e 'print Cwd::abs_path shift' "$1"
        else
            readlink -f "$@"
        fi
    }
fi



# Locate koopa home                                                         {{{1
# ==============================================================================

if [ -n "${BASH_VERSION:-}" ]
then
    KOOPA_SHELL="bash"
    # shellcheck disable=SC2039
    # SC2039: In POSIX sh, array references are undefined.
    file="${BASH_SOURCE[0]}"
elif [ -n "${ZSH_VERSION:-}" ]
then
    KOOPA_SHELL="zsh"
    # This covers both "_src_etc_profile" and "_src_etc_profile_d".
    case "$0" in
        _src_etc_profile*)
            ZSHRC=0
            ;;
        *)
            ZSHRC=1
            ;;
    esac
    export ZSHRC
    # Note that sourcing in '/etc/profile' doesn't return script path in '$0',
    # which is commonly recommended online in place of '$BASH_SOURCE'. '$0' in
    # this case instead returns '_src_etc_profile'.
    # https://stackoverflow.com/a/23259585/3911732
    file="${(%):-%N}"
else
    >&2 printf "Error: Failed to detect supported shell.\n"
    >&2 printf "Supported: bash, zsh.\n\n"
    >&2 printf "  SHELL: %s\n" "$SHELL"
    >&2 printf "      0: %s\n" "$0"
    >&2 printf "      -: %s\n" "$-"
    return 1
fi
export KOOPA_SHELL

if [ ! -f "$file" ]
then
    >&2 printf "Error: Failed to detect absolute path of activation script.\n"
    return 1
fi

# Note that running realpath on the file instead of the directory will properly
# resolve '~/.config/koopa/activate' in Mike's default '~/.shrc' config file.
KOOPA_HOME="$(dirname "$(realpath "$file")")"
export KOOPA_HOME

# Load POSIX functions.
. "${KOOPA_HOME}/shell/posix/include/functions.sh"

# Get location of activation scripts.
activate_dir="${KOOPA_HOME}/system/activate"



# Subshell handling                                                         {{{1
# ==============================================================================

# Force subshell reload inside:
# - Interactive HPC slurm job.
# - Emacs terminal.
# - Tmux session.
# - Vim terminal.

if [ "${KOOPA_SHELL:-}" = "zsh" ] || \
    [ "${TERM:-}" = "eterm-color" ] || \
    [ -n "${RSTUDIO:-}" ] || \
    [ -n "${SLURM_JOB_ID:-}" ] || \
    [ -n "${TMUX:-}" ] || \
    [ -n "${VIM_TERMINAL:-}" ]
then
    force=1
fi

# Early return if koopa is already active.
[ "$force" -eq 0 ] && [ "$subshell" -eq 1 ] && return 0



# Optional configuration                                                    {{{1
# ==============================================================================

# Detect extra mode.
# Enabled by default.
[ -z "${extra:-}" ] && extra=1
case "$extra" in
    1|true)
        extra=1
        ;;
    *)
        extra=0
        ;;
esac

# Detect programs mode.
# Enabled by default.
[ -z "${programs:-}" ] && programs=1
case "$programs" in
    1|true)
        programs=1
        ;;
    *)
        programs=0
        ;;
esac

# Detect minimal mode.
# Disabled by default.
[ -z "${minimal:-}" ] && minimal=0
case "$minimal" in
    1|true)
        minimal=1
        ;;
    *)
        minimal=0
        ;;
esac

# Disable other options when running in minimal mode.
if [ "$minimal" -eq 1 ]
then
    extra=0
    programs=0
fi



# Basic shell configuration                                                 {{{1
# ==============================================================================

if [ "$subshell" -eq 0 ]
then
    . "${activate_dir}/preflight.sh"
    . "${activate_dir}/xdg.sh"
    . "${activate_dir}/path.sh"
    _koopa_update_xdg_config
fi

. "${activate_dir}/general.sh"



# Program configuration                                                     {{{1
# ==============================================================================

if [ "$programs" -eq 1 ]
then
    . "${activate_dir}/programs/conda.sh"
    . "${activate_dir}/programs/venv.sh"
    . "${activate_dir}/programs/perlbrew.sh"
    . "${activate_dir}/programs/rbenv.sh"
    if [ "$subshell" -eq 0 ]
    then
        . "${activate_dir}/programs/ensembl-perl-api.sh"
        . "${activate_dir}/programs/rust.sh"
        if _koopa_is_darwin
        then
            . "${activate_dir}/os/darwin/programs/homebrew.sh"
            . "${activate_dir}/os/darwin/programs/coreutils.sh"
            # > . "${activate_dir}/os/darwin/programs/google-cloud-sdk.sh"
        elif _koopa_is_linux
        then
            . "${activate_dir}/os/linux/programs/aspera.sh"
            . "${activate_dir}/os/linux/programs/bcbio.sh"
            . "${activate_dir}/os/linux/programs/conda-envs.sh"
        fi
    fi
fi



# Extra shell configuration                                                 {{{1
# ==============================================================================

if [ "$extra" -eq 1 ]
then
    # Shell-specific configuration.
    if [ "$KOOPA_SHELL" = "bash" ]
    then
        . "${activate_dir}/shell/bash/shopt.sh"
        . "${activate_dir}/shell/bash/prompt.sh"
    elif [ "$KOOPA_SHELL" = "zsh" ]
    then
        if [ "$subshell" -eq 0 ]
        then
            . "${activate_dir}/shell/zsh/fpath.sh"
        fi
        if [ "$ZSHRC" -eq 1 ]
        then
            . "${activate_dir}/shell/zsh/oh-my-zsh.sh"
            . "${activate_dir}/shell/zsh/autojump.sh"
        fi
        . "${activate_dir}/shell/zsh/prompt.sh"
        . "${activate_dir}/shell/zsh/setopt.sh"
        . "${activate_dir}/shell/zsh/bindkey.sh"
    fi

    # Run these after shell-specific configuration.
    . "${activate_dir}/set.sh"
    . "${activate_dir}/aliases.sh"
    . "${activate_dir}/secrets.sh"
    . "${activate_dir}/ssh-key.sh"
    . "${activate_dir}/umask.sh"

    # Platform-specific configuration.
    if _koopa_is_darwin
    then
        . "${activate_dir}/os/darwin/exports.sh"
        . "${activate_dir}/os/darwin/aliases.sh"
        . "${activate_dir}/os/darwin/grc-colors.sh"
    fi

    # Today bucket.
    if [ "$subshell" -eq 0 ]
    then
        _koopa_today_bucket
    fi
fi



# Post-flight checks and clean-up                                           {{{1
# ==============================================================================

_koopa_disk_check

unset -v activate_dir extra file force interactive minimal programs subshell

if [ "$KOOPA_SHELL" = "zsh" ]
then
    unset -v ZSHRC
fi

# Disable test mode.
if [ "$test" -eq 1 ]
then
    set +o errexit
    set +o nounset
    if [ -n "${BASH_VERSION:-}" ]
    then
        set -o errtrace
        set -o posix
        set -o pipefail
    fi
    printf "Activation was successful.\n"
fi
unset -v test
