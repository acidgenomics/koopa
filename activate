#!/bin/sh
# shellcheck disable=SC2039

# Activate koopa.
# Updated 2019-08-14.

# FIXME Rethink the approach to dotfiles. Make user configurable.

# SC2236: zsh doesn't handle `-n` flag in place of `! -z` correctly in POSIX
# mode when using `[` instead of `[[`.

# Dropped support for ksh because it doesn't support `local` variables scoped
# inside of functions.



# Pre-flight checks                                                         {{{1
# ==============================================================================

# Never activate for specific admin accounts.
[ "$(id -u)" -eq 0 ] && return 0
whoami | grep -Eq "\b(admin|bioinfo)\b" && return 0

# Detect force mode.
# Disabled by default.
[ -z "${force:-}" ] && force=0
case "$force" in
    1|true)
        force=1
        ;;
    *)
        force=0
        ;;
esac

# Detect test mode.
# Disabled by default.
[ -z "${test:-}" ] && test=0
case "$test" in
    1|true)
        test=1
        ;;
    *)
        test=0
        ;;
esac

# Enable verbose debugging in test mode.
if [ "$test" -eq 1 ]
then
    printf "Test mode enabled.\n"
    printf "Setting strict shell mode.\n"
    set -o errexit
    set -o nounset
    if [ -n "${BASH_VERSION:-}" ]
    then
        set -o errtrace
        set -o pipefail
        set -o posix
        set -o xtrace
    fi
    force=1
fi

# Check for interactive shell.
echo "$-" | grep -q "i" && interactive=1 || interactive=0

# Force reactivation inside of interactive HPC job.
[ -n "${SLURM_JOB_ID:-}" ] && [ "$interactive" -eq 1 ] && force=1

# Force reactivation inside of tmux session.
[ -z "${TMUX:-}" ] || force=1

# Early return for non-interactive sessions.
[ "$force" -eq 0 ] && [ "$interactive" -eq 0 ] && return 0

# Early return if koopa is already active.
[ "$force" -eq 0 ] && [ -n "${KOOPA_HOME:-}" ] && return 0

# Detect extra mode.
# Enabled by default.
[ -z "${extra:-}" ] && extra=1
case "$extra" in
    1|true)
        extra=1
        ;;
    *)
        extra=0
        ;;
esac

# Detect programs mode.
# Enabled by default.
[ -z "${programs:-}" ] && programs=1
case "$programs" in
    1|true)
        programs=1
        ;;
    *)
        programs=0
        ;;
esac

# Detect minimal mode.
# Disabled by default.
[ -z "${minimal:-}" ] && minimal=0
case "$minimal" in
    1|true)
        minimal=1
        ;;
    *)
        minimal=0
        ;;
esac

# Disable other options when running in minimal mode.
if [ "$minimal" -eq 1 ]
then
    extra=0
    programs=0
fi

unset -v force interactive minimal



# Usage                                                                     {{{1
# ==============================================================================

usage() {
    cat << EOF
usage: activate [-h]

Activate koopa.

supported shells: bash, zsh

optional arguments:
    -h, --help
        Show this help message and exit.

optional variables:
    dotfiles
        Git repository path to dotfiles.
        Supports either SSH (recommended) or HTTPS.
        Example: git@github.com:mjsteinbaugh/dotfiles.git
    extra=1 [true]
        Enable extra shell and OS-specific configuration.
    minimal=0 [false]
        Minimal mode. Simply export koopa programs into PATH.
        Skip additional program and shell configuration.
        Internally, this sets extra=0, programs=1.
    programs=1 [true]
        Enable automatic configuration of supported programs.

optional variables, for debugging:
    force=0 [false]
        Force reactivation, even if koopa is already active.
    test=0 [false]
        Enable verbose test mode. Used for Travis CI checks.
        This will also automatically set 'force=1'.
EOF
}



# Parse arguments                                                           {{{1
# ==============================================================================

for i in "$@"
do
    case "$i" in
        -h|--help)
            usage
            exit
            ;;
        *)
            >&2 printf "Error: Invalid argument '%s'\n" "$1"
            exit 1
            ;;
    esac
done

unset -f usage



# Functions                                                                 {{{1
# ==============================================================================

# Fake realpath support, if necessary.
# Note that `readlink -f` doesn't work on macOS.
#
# See also:
# - https://github.com/bcbio/bcbio-nextgen/blob/master/tests/run_tests.sh
#
# Updated 2019-06-26.
if ! command -v realpath >/dev/null
then
    realpath() {
        if [ "$(uname -s)" = "Darwin" ]
        then
            perl -MCwd -e 'print Cwd::abs_path shift' "$1"
        else
            readlink -f "$@"
        fi
    }
fi



# Locate koopa home                                                         {{{1
# ==============================================================================

if [ -n "${BASH_VERSION:-}" ]
then
    KOOPA_SHELL="bash"
    # SC2039: In POSIX sh, array references are undefined.
    # shellcheck disable=SC2039
    file="${BASH_SOURCE[0]}"
elif [ -n "${ZSH_VERSION:-}" ]
then
    KOOPA_SHELL="zsh"
    # Note that sourcing in `/etc/profile` doesn't return script path in `$0`,
    # which is commonly recommended online in place of `$BASH_SOURCE`. `$0` in
    # this case instead unexpectedly returns `_src_etc_profile`.
    # > file="${0:a}"
    # > file="$0"
    # https://stackoverflow.com/a/23259585/3911732
    file="${(%):-%N}"
else
    >&2 printf "Error: Failed to detect supported shell.\n"
    >&2 printf "Supported: bash, zsh.\n\n"
    >&2 printf "  SHELL: %s\n" "$SHELL"
    >&2 printf "      0: %s\n" "$0"
    >&2 printf "      -: %s\n" "$-"
    return 1
fi
export KOOPA_SHELL

if [ ! -f "$file" ]
then
    >&2 printf "Error: Failed to detect absolute path of activation script.\n"
    return 1
fi

# Note that running realpath on the file instead of the directory will properly
# resolve `~/.config/koopa/activate` in Mike's default `~/.shrc` config file.
KOOPA_HOME="$(dirname "$(realpath "$file")")" && export KOOPA_HOME
unset -v file

# Load shared functions.
# shellcheck source=system/include/functions.sh
. "${KOOPA_HOME}/system/include/functions.sh"

# Get location of activation scripts.
activate_dir="${KOOPA_HOME}/system/activate"



# Basic shell configuration                                                 {{{1
# ==============================================================================

# shellcheck source=/dev/null
. "${activate_dir}/preflight.sh"
# shellcheck source=/dev/null
. "${activate_dir}/user-profile.sh"

exports_dir="${activate_dir}/exports"
# shellcheck source=/dev/null
. "${exports_dir}/xdg-base-directory.sh"
# shellcheck source=/dev/null
. "${exports_dir}/path.sh"
# shellcheck source=/dev/null
. "${exports_dir}/general.sh"
unset -v exports_dir

_koopa_update_xdg_config



# Program configuration                                                     {{{1
# ==============================================================================

if [ "$programs" -eq 1 ]
then
    programs_dir="${activate_dir}/programs"
    # shellcheck source=/dev/null
    . "${programs_dir}/conda.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/perlbrew.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/rbenv.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/aspera.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/ensembl-perl-api.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/bcbio.sh"
    # shellcheck source=/dev/null
    . "${programs_dir}/virtualenv.sh"
    unset -v programs programs_dir
fi



# Extra shell configuration                                                 {{{1
# ==============================================================================

if [ "$extra" -eq 1 ]
then
    # shellcheck source=/dev/null
    . "${activate_dir}/set.sh"
    # shellcheck source=/dev/null
    . "${activate_dir}/umask.sh"
    # shellcheck source=/dev/null
    . "${activate_dir}/aliases.sh"
    # shellcheck source=/dev/null
    . "${activate_dir}/secrets.sh"
    # shellcheck source=/dev/null
    . "${activate_dir}/ssh-key.sh"

    # Shell-specific configuration.
    if [ "$KOOPA_SHELL" = "bash" ]
    then
        bash_dir="${activate_dir}/shell/bash"
        # shellcheck source=/dev/null
        . "${bash_dir}/shopt.sh"
        # shellcheck source=/dev/null
        . "${bash_dir}/ps1.sh"
        unset -v bash_dir
    fi

    # Platform-specific configuration.
    if _koopa_is_darwin
    then
        darwin_dir="${activate_dir}/os/darwin"
        # shellcheck source=/dev/null
        . "${darwin_dir}/aliases.sh"
        # shellcheck source=/dev/null
        . "${darwin_dir}/exports.sh"
        # shellcheck source=/dev/null
        . "${darwin_dir}/programs/homebrew.sh"
        # shellcheck source=/dev/null
        . "${darwin_dir}/grc-colors.sh"
        unset -v darwin_dir
    fi
    
    unset -v extra
fi



# Post-flight checks and clean-up                                           {{{1
# ==============================================================================

unset -v activate_dir
unset -v colors

# Disable test mode.
if [ "$test" -eq 1 ]
then
    set +o errexit
    set +o nounset
    if [ -n "${BASH_VERSION:-}" ]
    then
        set -o errtrace
        set -o posix
        set -o pipefail
    fi
    printf "Activation was successful.\n"
fi
unset -v test
