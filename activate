#!/bin/sh
# shellcheck disable=SC1090,SC1091,SC2039
# SC2236: zsh doesn't handle '-n' flag in place of '! -z' correctly in POSIX
# mode when using '[' instead of '[['.



# Notes                                                                     {{{1
# ==============================================================================

# Dropped support for ksh because it doesn't support 'local' variables scoped
# inside of functions.

# Checking declared values in Bash:
# - 'declare -F': Display function names.
# - 'declare -p': Display the attributes and value of each name.
# - 'declare -x': Display exported values.



# Usage                                                                     {{{1
# ==============================================================================

usage() {
    cat << EOF
usage: activate [--help|-h]

Activate koopa.

optional variables:
    extra=1 [true]
        Enable extra shell configuration.
        This setting enables automatic prompt string configuration.
        Can disable per user with 'KOOPA_USERS_NO_EXTRA=user1 user2'.
    minimal=0 [false]
        Minimal mode.
        Simply load koopa programs into PATH.
        Skips additional program and shell configuration.
        This will automatically set 'extra=0'.
        Can enable per user with 'KOOPA_USERS_MINIMAL=user1 user2'.
    force=0 [false]
        Force activation inside of subshells.
    test=0 [false]
        Enable verbose test mode.
        Used for Travis CI checks.
        This will also automatically set 'force=1; minimal=0'.

details:
    Currently supports bash, zsh.

    For system-wide configuration on Linux, this should be called inside
    '/etc/profile.d/zzz-koopa.sh', owned by root.

    Activation of specific users can be skipped via:
    > export KOOPA_USERS_SKIP='user1 user2'

    Sourcing of POSIX shell scripts via '.' (POSIX) or 'source' (bash, zsh)
    requires that arguments are passed in at the beginning of the call, rather
    than as positional arguments or flags. Refer to the working examples.

examples:
    # Default mode
    . /usr/local/koopa/activate

    # Minimal mode
    minimal=1 . /usr/local/koop/activate

note:
    POSIX script.
    Updated 2019-10-30.
EOF
}

case "${1:-}" in
    --help|-h)
        usage
        exit 0
        ;;
esac

unset -f usage



# Skip activation for specific users                                        {{{1
# ==============================================================================

# Never allow activation for root.
[ "$(id -u)" -eq 0 ] && return 0
[ -n "${USER:-}" ] && USER="$(whoami)" && export USER
# Always skip on accounts containing "admin" in the name.
echo "$USER" | grep -Eq "\badmin\b" && return 0
# Allow optional skip for specific users.
if [ -n "${KOOPA_USERS_SKIP:-}" ]
then
    echo "$KOOPA_USERS_SKIP" | grep -Eq "\b${USER}\b" && return 0
fi



# Variables                                                                 {{{1
# ==============================================================================

echo "$-" | grep -q "i" && interactive=1 || interactive=0

# Shell                                                                     {{{2
# ------------------------------------------------------------------------------

if [ -n "${BASH_VERSION:-}" ]
then
    KOOPA_SHELL="bash"
    # shellcheck disable=SC2039
    # SC2039: In POSIX sh, array references are undefined.
    file="${BASH_SOURCE[0]}"
elif [ -n "${ZSH_VERSION:-}" ]
then
    KOOPA_SHELL="zsh"
    # This covers both '_src_etc_profile' and '_src_etc_profile_d'.
    case "$0" in
        _src_etc_profile*)
            return 0
            ;;
        *)
            export ZSHRC=1
            ;;
    esac
    # Note that sourcing in '/etc/profile' doesn't return script path in '$0',
    # which is commonly recommended online in place of '$BASH_SOURCE'. '$0' in
    # this case instead returns '_src_etc_profile'.
    # https://stackoverflow.com/a/23259585/3911732
    file="${(%):-%N}"
else
    >&2 cat << EOF
Error: Failed to detect supported shell.
Supported: bash, zsh.

  SHELL: '${SHELL}'
      0: '${0}'
      -: '${-}'
EOF
    return 1
fi

export KOOPA_SHELL

# Force mode                                                                {{{2
# ------------------------------------------------------------------------------

# Always force activation inside:
# - Emacs terminal.
# - RStudio terminal.
# - SLURM interactive job.
# - Tmux session.
# - Vim terminal.

if [ "${TERM:-}" = "eterm-color" ] ||
    [ -n "${RSTUDIO:-}" ] ||
    [ -n "${SLURM_JOB_ID:-}" ] ||
    [ -n "${TMUX:-}" ] ||
    [ -n "${VIM_TERMINAL:-}" ]
then
    force=1
fi

[ -z "${force:-}" ] && force=0
case "$force" in
    1|true)
        force=1
        ;;
    *)
        force=0
        ;;
esac

# Subshell                                                                  {{{2
# ------------------------------------------------------------------------------

if [ -n "${KOOPA_HOME:-}" ] && [ "$force" -eq 0 ]
then
    subshell=1
else
    subshell=0
fi

# Extra mode                                                                {{{2
# ------------------------------------------------------------------------------

if [ -n "${KOOPA_USERS_NO_EXTRA:-}" ]
then
    if echo "$KOOPA_USERS_NO_EXTRA" | grep -Eq "\b${USER}\b"
    then
        extra=0
    fi
fi

[ -z "${extra:-}" ] && extra=1
case "$extra" in
    1|true)
        extra=1
        ;;
    *)
        extra=0
        ;;
esac

# Minimal mode                                                              {{{2
# ------------------------------------------------------------------------------

if [ -n "${KOOPA_USERS_MINIMAL:-}" ]
then
    if echo "$KOOPA_USERS_MINIMAL" | grep -Eq "\b${USER}\b"
    then
        minimal=1
    fi
fi

[ -z "${minimal:-}" ] && minimal=0
case "$minimal" in
    1|true)
        minimal=1
        ;;
    *)
        minimal=0
        ;;
esac

if [ "$minimal" -eq 1 ]
then
    extra=0
fi

# Test mode                                                                 {{{2
# ------------------------------------------------------------------------------

[ -z "${test:-}" ] && test=0
[ -n "${KOOPA_TEST:-}" ] && test=1
case "$test" in
    1|true)
        test=1
        ;;
    *)
        test=0
        ;;
esac

if [ "$test" -eq 1 ]
then
    echo "Test mode enabled."
    echo "Setting strict shell mode."
    set -o errexit
    set -o nounset
    if [ -n "${BASH_VERSION:-}" ]
    then
        set -o errtrace
        set -o pipefail
        set -o posix
        set -o xtrace
    fi
    extra=1
    force=1
    minimal=0
    export KOOPA_TEST=1
fi



# Skip activation if non-interactive, or in a subshell                      {{{1
# ==============================================================================

[ "$force" -eq 0 ] && [ "$interactive" -eq 0 ] && return 0
[ "$force" -eq 0 ] && [ "$subshell" -eq 1 ] && return 0



# Locate home and source functions                                          {{{1
# ==============================================================================

if [ ! -f "$file" ]
then
    >&2 echo "Error: Failed to detect absolute path of activation script."
    return 1
fi

if ! command -v realpath >/dev/null
then
    realpath() {
        if [ "$(uname -s)" = "Darwin" ]
        then
            perl -MCwd -e 'print Cwd::abs_path shift' "$1"
        else
            readlink -f "$@"
        fi
    }
fi

# Note that running realpath on the file instead of the directory will properly
# resolve '~/.config/koopa/activate' in Mike's default '~/.shrc' config file.
KOOPA_HOME="$(dirname "$(realpath "$file")")"
export KOOPA_HOME

# Load POSIX functions.
. "${KOOPA_HOME}/shell/posix/include/functions.sh"

# Get location of activation scripts.
activate_dir="${KOOPA_HOME}/system/activate"



# Minimal configuration                                                     {{{1
# ==============================================================================

. "${activate_dir}/minimal.sh"
_koopa_update_xdg_config



# Program configuration                                                     {{{1
# ==============================================================================

if [ "$minimal" -eq 0 ]
then
    if _koopa_is_darwin
    then
        . "${activate_dir}/os/darwin/programs/homebrew.sh"
    fi
    _koopa_activate_aspera
    _koopa_activate_ensembl_perl_api
    _koopa_activate_perlbrew
    _koopa_activate_rbenv
    _koopa_activate_rust
    _koopa_activate_bcbio
    _koopa_activate_conda
    _koopa_activate_conda_envs
    . "${activate_dir}/programs.sh"
    _koopa_activate_venv
fi



# Extra shell configuration                                                 {{{1
# ==============================================================================

if [ "$extra" -eq 1 ]
then
    if [ "$KOOPA_SHELL" = "bash" ]
    then
        . "${activate_dir}/shell/bash/shopt.sh"
        . "${activate_dir}/shell/bash/prompt.sh"
    elif [ "$KOOPA_SHELL" = "zsh" ]
    then
        . "${activate_dir}/shell/zsh/fpath.sh"
        if [ "$ZSHRC" -eq 1 ]
        then
            . "${activate_dir}/shell/zsh/oh-my-zsh.sh"
            _koopa_activate_autojump
        fi
        . "${activate_dir}/shell/zsh/setopt.sh"
        . "${activate_dir}/shell/zsh/bindkey.sh"
        . "${activate_dir}/shell/zsh/prompt.sh"
        if [ "$ZSHRC" -eq 1 ]
        then
            compaudit
        fi
    fi

    . "${activate_dir}/extra.sh"

    if _koopa_is_darwin
    then
        . "${activate_dir}/os/darwin/exports.sh"
        . "${activate_dir}/os/darwin/aliases.sh"
    fi

    _koopa_activate_secrets
    _koopa_activate_ssh_key
    _koopa_today_bucket
    _koopa_disk_check
fi



# Post-flight                                                               {{{1
# ==============================================================================

if [ "$test" -eq 1 ]
then
    set +o errexit
    set +o nounset
    if [ -n "${BASH_VERSION:-}" ]
    then
        set -o errtrace
        set -o posix
        set -o pipefail
    fi
    echo "Activation was successful."
fi

unset -v ZSHRC activate_dir file force interactive minimal subshell test
