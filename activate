#!/bin/sh

_koopa_activate() {
    case "${1:-}" in
        --help|-h)
            _koopa_activate_usage
            exit 0
            ;;
    esac
    _koopa_preflight_checks || return 1
    _koopa_export_user
    _koopa_activate_export_force || return 1
    _koopa_activate_skip_check || return 1
    _koopa_activate_export_subshell || return 1
    _koopa_activate_export_minimal || return 1
    _koopa_activate_export_test || return 1
    if [ "${KOOPA_TEST:?}" -eq 1 ]
    then
        printf '%s\n' 'Test mode enabled.'
        printf '%s\n' 'Setting strict shell mode.'
        set -o errexit
        set -o nounset
        set -o xtrace
        if [ "${KOOPA_SHELL:?}" = 'bash' ]
        then
            # shellcheck disable=SC2039
            set -o errtrace
            # shellcheck disable=SC2039
            set -o pipefail
        fi
        export KOOPA_MINIMAL=0
    fi
    _koopa_activate_export_prefix || return 1
    _koopa_activate_duration_start
    # shellcheck source=/dev/null
    activate=1 . "$(_koopa_activate_header)" || return 1
    _koopa_add_config_link "$(_koopa_prefix)/activate"
    _koopa_export_cpu_count
    _koopa_export_editor
    _koopa_export_git
    _koopa_export_gnupg
    _koopa_export_history
    _koopa_export_hostname
    _koopa_export_lesspipe
    _koopa_export_ostype
    _koopa_export_pager
    _koopa_export_proj_lib
    _koopa_export_python
    _koopa_export_shell
    _koopa_export_tmpdir
    _koopa_export_today
    _koopa_export_user
    _koopa_activate_xdg
    _koopa_activate_standard_paths
    _koopa_activate_koopa_paths
    _koopa_activate_pkg_config
    if [ "${KOOPA_MINIMAL:?}" -eq 0 ]
    then
        _koopa_activate_homebrew
        _koopa_activate_coreutils
        _koopa_activate_dircolors
        _koopa_activate_gcc_colors
        _koopa_activate_emacs
        _koopa_activate_go
        _koopa_activate_openjdk
        _koopa_activate_pipx
        _koopa_activate_ruby
        _koopa_is_macos && _koopa_activate_macos_python
        _koopa_activate_llvm
        _koopa_activate_aspera
        _koopa_activate_ensembl_perl_api
        _koopa_activate_perlbrew
        _koopa_activate_rust
        _koopa_activate_rbenv
        _koopa_activate_pyenv
        _koopa_activate_conda
        _koopa_activate_venv
        _koopa_activate_autojump
        _koopa_activate_broot
        _koopa_activate_fzf
    fi
    if [ "${KOOPA_MINIMAL:?}" -eq 0 ]
    then
        case "${KOOPA_SHELL:?}" in
            bash)
                koopa::activate_bash_extras
                ;;
            dash)
                export PS1='# '
                ;;
            zsh)
                koopa::activate_zsh_extras
                ;;
        esac
        _koopa_is_macos && _koopa_activate_macos_extras
        _koopa_activate_completion
        _koopa_activate_aliases
        _koopa_activate_secrets
        _koopa_activate_ssh_key
        if ! _koopa_is_subshell
        then
            _koopa_today_bucket
            _koopa_tmux_sessions
        fi
    fi
    if [ "${KOOPA_TEST:?}" -eq 1 ]
    then
        set +o errexit
        set +o nounset
        set +o xtrace
        if [ "${KOOPA_SHELL:?}" = 'bash' ]
        then
            # shellcheck disable=SC2039
            set +o errtrace
            # shellcheck disable=SC2039
            set +o pipefail
        fi
        _koopa_info 'Shell options:'
        set +o
        _koopa_info 'Shell variables:'
        _koopa_dl '-' "$-"
        _koopa_dl '0' "$0"
        _koopa_dl 'SHELL' "${SHELL:-}"
        _koopa_activate_duration_stop
        if [ -n "${KOOPA_DURATION:-}" ]
        then
            _koopa_success "Activation was successful (${KOOPA_DURATION:?} ms)."
        else
            _koopa_success 'Activation was successful.'
        fi
    fi
    unset -f \
        _koopa_activate_usage
    unset -v KOOPA_ACTIVATE_SCRIPT
    return 0
}

_koopa_activate_duration_start() {
    [ "${KOOPA_TEST:-0}" -eq 1 ] || return 0
    _koopa_is_linux && _koopa_is_installed bc date || return 0
    KOOPA_DURATION_START="$(date -u +%s%3N)"
    export KOOPA_DURATION_START
    return 0
}

_koopa_activate_duration_stop() {
    [ "${KOOPA_TEST:-0}" -eq 1 ] || return 0
    _koopa_is_linux && _koopa_is_installed bc date || return 0
    KOOPA_DURATION_STOP="$(date -u +%s%3N)"
    KOOPA_DURATION="$( \
        _koopa_print "${KOOPA_DURATION_STOP}-${KOOPA_DURATION_START}" \
        | bc \
    )"
    export KOOPA_DURATION
    unset -v KOOPA_DURATION_START KOOPA_DURATION_STOP
    return 0
}

_koopa_activate_export_force() {
    [ -n "${KOOPA_FORCE:-}" ] && return 0
    case "${force:-}" in
        0|false)
            KOOPA_FORCE=0
            ;;
        1|true)
            KOOPA_FORCE=1
            ;;
        *)
            KOOPA_FORCE=0
            ;;
    esac
    export KOOPA_FORCE
    unset -v force
    return 0
}

_koopa_activate_export_minimal() {
    [ -n "${KOOPA_MINIMAL:-}" ] && return 0
    case "${minimal:-}" in
        0|false)
            KOOPA_MINIMAL=0
            ;;
        1|true)
            KOOPA_MINIMAL=1
            ;;
        *)
            KOOPA_MINIMAL=0
            ;;
    esac
    unset -v minimal
    if [ -n "${KOOPA_USERS_MINIMAL:-}" ]
    then
        if printf '%s\n' "${KOOPA_USERS_MINIMAL:?}" | grep -Eq "\b${USER:?}\b"
        then
            KOOPA_MINIMAL=1
        fi
    fi
    export KOOPA_MINIMAL
    return 0
}

_koopa_activate_export_prefix() {
    case "${KOOPA_SHELL:?}" in
        bash)
            # shellcheck disable=SC2039
            KOOPA_ACTIVATE_SCRIPT="${BASH_SOURCE[0]}"
            ;;
        zsh)
            # Use '%x' not '%N' when called inside function.
            # https://stackoverflow.com/a/23259585/3911732
            KOOPA_ACTIVATE_SCRIPT="${(%):-%x}"
            ;;
        *)
            # POSIX doesn't support file path resolution of sourced dot scripts.
            if [ ! -d "${KOOPA_PREFIX:?}" ] && _koopa_is_interactive
            then
                printf "ERROR: Failed to locate koopa activation script.\n" >&2
                printf "Required 'KOOPA_PREFIX' variable is unset.\n" >&2
                return 1
            fi
            KOOPA_ACTIVATE_SCRIPT="${KOOPA_PREFIX}/activate"
            ;;
    esac
    [ -x "$KOOPA_ACTIVATE_SCRIPT" ] || return 1
    # Note that running realpath on the file instead of the directory will
    # properly resolve '~/.config/koopa/activate' case.
    if [ -L "$KOOPA_ACTIVATE_SCRIPT" ]
    then
        KOOPA_ACTIVATE_SCRIPT="$(_koopa_realpath "$KOOPA_ACTIVATE_SCRIPT")"
    fi
    KOOPA_PREFIX="$(dirname "$KOOPA_ACTIVATE_SCRIPT")"
    [ -d "$KOOPA_PREFIX" ] || return 1
    export KOOPA_ACTIVATE_SCRIPT KOOPA_PREFIX
    return 0
}

_koopa_activate_export_subshell() {
    [ -n "${KOOPA_SUBSHELL:-}" ] && return 0
    KOOPA_SUBSHELL=0
    export KOOPA_SUBSHELL
    return 0
}

_koopa_activate_export_test() {
    [ -n "${KOOPA_TEST:-}" ] && return 0
    case "${test:-}" in
        0|false)
            KOOPA_TEST=0
            ;;
        1|true)
            KOOPA_TEST=1
            ;;
        *)
            KOOPA_TEST=0
            ;;
    esac
    export KOOPA_TEST
    unset -v test
    return 0
}

_koopa_activate_skip_check() {
    [ -n "${KOOPA_FORCE:-}" ] && return 0
    [ -n "${KOOPA_SKIP:-}" ] || return 1
    _koopa_is_interactive || return 1
    _koopa_is_user_named_admin && return 1
    _koopa_is_user_skip && return 1
    _koopa_is_koopa_active && return 1
    return 0
}

_koopa_activate_header() {
    # shellcheck disable=SC2039
    local header
    # Load shell header file, which will source required functions.
    if [ -f "${KOOPA_PREFIX:?}/shell/${KOOPA_SHELL:?}/include/header.sh" ]
    then
        header="${KOOPA_PREFIX:?}/shell/${KOOPA_SHELL:?}/include/header.sh"
    else
        header="${KOOPA_PREFIX:?}/shell/posix/include/header.sh"
    fi
    printf '%s\n' "$header"
    return 0
}

_koopa_activate_usage() {
    cat << END
usage: activate [--help|-h]

Activate koopa.

optional variables:
    force=0 [false]
        Force activation inside of non-interactive shells.
        Not generally recommended, but used by koopa installer.
    minimal=0 [false]
        Minimal mode.
        Simply load koopa programs into PATH.
        Skips additional program and shell configuration.
        Can enable per user with 'KOOPA_USERS_MINIMAL=user1 user2'.
    test=0 [false]
        Enable verbose test mode.
        Used for Travis CI checks.

details:
    Currently supports Bash, Zsh, and Dash shells.

    For system-wide configuration on Linux, this should be called inside
    '/etc/profile.d/zzz-koopa.sh', owned by root.

    Activation of specific users can be skipped via:
    > export KOOPA_USERS_SKIP='user1 user2'

    Sourcing of POSIX shell scripts via '.' (POSIX) or 'source' (bash, zsh)
    requires that arguments are passed in at the beginning of the call, rather
    than as positional arguments or flags. Refer to the working examples.

examples:
    # Default mode
    . /usr/local/koopa/activate

    # Minimal mode
    minimal=1 . /usr/local/koopa/activate

note:
    POSIX shell script.
    Updated 2020-07-06.
END
}

_koopa_export_user() {
    [ -z "${USER:-}" ] && USER="$(id -un)" && export USER
    return 0
}

_koopa_is_interactive() {
    printf '%s\n' "$-" | grep -q 'i'
}

_koopa_is_koopa_active() {
    type '_koopa_prefix' 2>/dev/null | grep -q 'function'
}

_koopa_is_linux() { # {{{1
    [ "$(uname -s)" = 'Linux' ]
}

_koopa_is_subshell() {
    [ "${KOOPA_SUBSHELL:-0}" -eq 1 ]
}

_koopa_is_user_named_admin() {
    printf '%s\n' "${USER:?}" | grep -Eq '^admin'
}

_koopa_is_user_skip() {
    [ -z "${KOOPA_USERS_SKIP:-}" ] && return 1
    printf '%s\n' "${KOOPA_USERS_SKIP:?}" | grep -Eq "\b${USER:?}\b"
}

_koopa_preflight_checks() {
    _koopa_preflight_os_check || return 1
    _koopa_preflight_shell_check || return 1
    _koopa_preflight_zsh_check || return 1
    return 0
}

_koopa_preflight_os_check() {
    case "$(uname -s)" in
        Darwin)
            ;;
        Linux)
            ;;
        *)
            printf 'ERROR: Unsupported operating system.\n' >&2
            return 1
            ;;
    esac
    return 0
}

_koopa_preflight_shell_check() {
    # Refer to '_koopa_shell' function for additional details.
    if [ -n "${BASH_VERSION:-}" ]
    then
        KOOPA_SHELL='bash'
    elif [ -n "${ZSH_VERSION:-}" ]
    then
        KOOPA_SHELL='zsh'
    elif [ -d '/proc' ]
    then
        KOOPA_SHELL="$(basename "$(readlink /proc/$$/exe)")"
    else
        KOOPA_SHELL="$(basename "$(ps -p "$$" -o 'comm=' | sed 's/^-//g')")"
    fi
    case "$KOOPA_SHELL" in
        bash|dash|zsh)
            ;;
        *)
            if _koopa_is_interactive
            then
                >&2 cat << END
ERROR: Failed to activate koopa in the current shell.

Supported POSIX shells: Bash, Dash, Zsh.

  KOOPA_SHELL : ${KOOPA_SHELL}
        SHELL : ${SHELL:-}
            - : ${-}
            0 : ${0}

Consider switching to bash:
> chsh -s /bin/bash
or zsh:
> chsh -s /bin/zsh
END
            fi
            return 1
            ;;
    esac
    export KOOPA_SHELL
    return 0
}

_koopa_preflight_zsh_check() {
    # Zsh currently requires presence of '~/.zshrc' for clean activation.
    #
    # Note that sourcing in '/etc/profile' doesn't return script path in
    # '0', which is commonly recommended online in place of 'BASH_SOURCE'.
    # '0' in this case instead returns '_src_etc_profile'.
    #
    # This approach covers both '_src_etc_profile' and '_src_etc_profile_d'.
    #
    # See also:
    # - https://stackoverflow.com/a/23259585/3911732
    [ "${KOOPA_SHELL:?}" = 'zsh' ] || return 0
    case "$0" in
        _src_etc_profile*)
            # Early return when sourced from '/etc/profile.d'.
            return 1
            ;;
        *)
            export KOOPA_ZSHRC=1
            ;;
    esac
    return 0
}

_koopa_realpath() {
    if [ "$(uname -s)" = 'Darwin' ]
    then
        perl -MCwd -e 'print Cwd::abs_path shift' "$1"
    else
        readlink -f "$@"
    fi
}

_koopa_activate "$@"
