#!/bin/sh
# shellcheck disable=SC1090,SC2236
# SC2236: zsh doesn't handle `-n` flag in place of `! -z` correctly in POSIX
# mode when using `[` instead of `[[`.



# koopa shell bootloader
# (c) 2018 Michael Steinbaugh
# This software is provided under an MIT License.
# Currently supporting POSIX-compliant shells: bash, ksh, zsh.



# Initial checks                                                            {{{1
# ==============================================================================

# Skip activation for root user.
[ "$(id -u)" -eq 0 ] && return 0

# Set variable to check if koopa is already active.
# This step is particularly useful when working on a cluster that spawns new
# sessions from the current shell.
[ ! -z "${KOOPA_OS_PLATFORM:-}" ] && KOOPA_ACTIVATED=1

# Don't reload for HPC interactive job.
if [ ! -z "${HPC_INTERACTIVE_JOB:-}" ] &&
   [ ! -z "${KOOPA_ACTIVATED:-}" ]
then
    return 0
fi



# Detect the current shell                                                  {{{1
# ==============================================================================

# This is not necessarily the default shell (`$SHELL`).

if [ ! -z "${BASH_VERSION:-}" ]
then
    KOOPA_SHELL="bash"
elif [ ! -z "${KSH_VERSION:-}" ]
then
    KOOPA_SHELL="ksh"
elif [ ! -z "${ZSH_VERSION:-}" ]
then
    KOOPA_SHELL="zsh"
else
    echo "koopa currently supports bash, ksh, or zsh shell."
    echo "Check your configuration."
    echo "Note that '/bin/sh' is not recommended."
    echo ""
    echo "${SHELL:-}"
    echo "$0"
    echo "$-"
    echo ""
    env | sort
    return 1
fi
export KOOPA_SHELL



# Locate the koopa installation                                             {{{1
# ==============================================================================

quiet_cd() {
  cd "$@" >/dev/null || return
}

if [ "$KOOPA_SHELL" = "bash" ]
then
    # SC2039: In POSIX sh, array references are undefined.
    # shellcheck disable=SC2039
    KOOPA_SOURCE="${BASH_SOURCE[0]}"
elif [ "$KOOPA_SHELL" = "ksh" ]
then
    # SC2154: .sh.file is referenced but not assigned.
    # shellcheck disable=SC2154
    KOOPA_SOURCE="${.sh.file}"
elif [ "$KOOPA_SHELL" = "zsh" ]
then
    # Note that sourcing in `/etc/profile` doesn't return script path in `$0`,
    # which is commonly recommended online in place of `$BASH_SOURCE`. `$0` in
    # this case instead unexpectedly returns `_src_etc_profile`.
    # > KOOPA_SOURCE="${0:a}"
    # > KOOPA_SOURCE="$0"
    # https://stackoverflow.com/a/23259585/3911732
    KOOPA_SOURCE="${(%):-%N}"
fi

if [ ! -f "$KOOPA_SOURCE" ]
then
    >&2 echo "Error: Failed to detect absolute path of activation script."
    return 1
fi

# Note that pwd is used here to resolve symlinks.
KOOPA_DIR="$(quiet_cd "${KOOPA_SOURCE%/*}/" && pwd -P)"
export KOOPA_DIR

KOOPA_SYSTEM_DIR="${KOOPA_DIR}/system"



# Extra mode detection                                                      {{{1
# ==============================================================================

# Export `$KOOPA_EXTRA` when we're loading the extra shell config scripts.
# SC2154: extra is reference but not assigned.
# shellcheck disable=SC2154
if [ "${extra:-1}" -ne 0 ]
then
    KOOPA_EXTRA=1
    unset -v extra
fi



# Pre-flight checks                                                         {{{1
# ==============================================================================

if [ -z "${KOOPA_ACTIVATED:-}" ]
then
    PRE_DIR="${KOOPA_SYSTEM_DIR}/pre"
    . "${PRE_DIR}/os.sh"
    . "${PRE_DIR}/programs.sh"
    unset -v PRE_DIR
    KOOPA_OS_PLATFORM="$(python -mplatform)" && export KOOPA_OS_PLATFORM
fi



# Base shell configuration                                                  {{{1
# ==============================================================================

# Always load these non-persistent settings.
BASE_DIR="${KOOPA_SYSTEM_DIR}/base"
. "${KOOPA_SYSTEM_DIR}/functions.sh"
. "${BASE_DIR}/secrets.sh"
. "${BASE_DIR}/aliases.sh"
. "${BASE_DIR}/set.sh"
. "${BASE_DIR}/ssh-key.sh"



# Skip these persistent settings in subshells (e.g. tmux).
if [ -z "${KOOPA_ACTIVATED:-}" ]
then
    EXPORTS_DIR="${BASE_DIR}/exports"
    . "${EXPORTS_DIR}/general.sh"
    . "${EXPORTS_DIR}/platform.sh"
    . "${EXPORTS_DIR}/cpu-count.sh"
    . "${EXPORTS_DIR}/path.sh"
    unset -v EXPORTS_DIR

    PROGRAMS_DIR="${BASE_DIR}/programs"
    . "${PROGRAMS_DIR}/perlbrew.sh"
    . "${PROGRAMS_DIR}/aspera.sh"
    . "${PROGRAMS_DIR}/bcbio.sh"
    . "${PROGRAMS_DIR}/conda.sh"
    . "${PROGRAMS_DIR}/virtualenv.sh"
    unset -v PROGRAMS_DIR
fi

unset -v BASE_DIR



# Extra shell configuration                                                 {{{1
# ==============================================================================

if [ ! -z "${KOOPA_EXTRA:-}" ]
then
    # Set default file permissions.
    . "${KOOPA_SYSTEM_DIR}/umask.sh"

    # Shell-specific configuration.
    if [ "$KOOPA_SHELL" = "bash" ]
    then
        BASH_DIR="${KOOPA_SYSTEM_DIR}/shell/bash"
        . "${BASH_DIR}/shopt.sh"
        . "${BASH_DIR}/bind.sh"
        . "${BASH_DIR}/ps1.sh"
        unset -v BASH_DIR
    elif [ "$KOOPA_SHELL" = "zsh" ]
    then
        # zhsrc is required for Z shell to configure correctly.
        dotfile -q shrc
        dotfile -q zshrc
    fi

    # Platform-specific configuration.
    if [ ! -z "${MACOS:-}" ]
    then
        DARWIN_DIR="${KOOPA_SYSTEM_DIR}/os/darwin"
        if [ -z "$KOOPA_ACTIVATED" ]
        then
            . "${DARWIN_DIR}/exports.sh"
            . "${DARWIN_DIR}/homebrew.sh"
            . "${DARWIN_DIR}/homebrew-python.sh"
        fi
        . "${DARWIN_DIR}/aliases.sh"
        . "${DARWIN_DIR}/grc-colors.sh"
        . "${DARWIN_DIR}/rbenv.sh"
        unset -v DARWIN_DIR
    fi

    # Set up the today bucket.
    bash touch-today-bucket
fi



# Post-flight checks and clean-up                                           {{{1
# ==============================================================================

. "${KOOPA_SYSTEM_DIR}/post/unset.sh"

