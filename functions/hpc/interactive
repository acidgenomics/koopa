#!/usr/bin/env bash
# set -Eeuo pipefail
set -o errexit -o noclobber -o nounset -o pipefail

# Submit an interactive session.
# 2018-11-24

# Note: Harvard Odyssey uses "test" instead of "interactive".
# TODO Add an X11 flag option.

# Using more modern "getopt" instead of "getopts", which supports long options.
# http://www.bahmanm.com/blogs/command-line-options-how-to-parse-in-bash-using-getopt
# https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/
# https://stackoverflow.com/questions/16654607
# https://unix.stackexchange.com/questions/62950

# - OPTIND: the index to the next argument to be processed.
# - OPTARG: variable is set to any argument for an option found by getopts.
# - OPTERR (not POSIX): set to 0 or 1 to indicate if Bash should display error
#   messages generated by the getopts.

function interactive () {
    # All arguments are optional for this function.
    cores="$HPC_CORES"
    mem="$HPC_MEMORY_GB"
    partition="$HPC_PARTITION_INTERACTIVE"
    time="$HPC_TIME"

    help () {
        echo "interactive [--{c}ores=${cores} --{m}em=${mem} --{p}artition=${partition} --{t}ime=${time}]" 1>&2
    }

    # Read the options.
    # Why do we need to set the name of the script with `-n` here?

    # local OPTIND c h m p t

    params=$( getopt -o c::hm::p::t:: -l cores::,help,mem::,partition::,time:: -n "interactive" -- "$@" )
    eval set -- "$params"

    echo "$params"
    return 1

    # Extract options and their arguments into variables.
    while true; do
        case "$1" in
            -c|--cores)
                case "$2" in
                    "") cores="$cores"; shift 2;;
                    *) cores="$2"; shift 2;;
                esac;;
            -h|--help) help; return 0;;
            -m|--mem)
                case "$2" in
                    "") mem="$mem"; shift 2;;
                    *) mem="$2"; shift 2;;
                esac;;
            -p|--partition)
                case "$2" in
                    "") partition="$partition"; shift 2;;
                    *) partition="$2"; shift 2;;
                esac;;
            -t|--time)
                case "$2" in
                    "") time="$time"; shift 2;;
                    *) time="$2"; shift 2;;
                esac;;
            --) shift; break;;
            \?) echo "Unknown option: $1" >&2; return 1;;
             :) echo "Missing argument for $1" >&2; return 1;;
             *) echo "Unimplemented option: $1" >&2; return 1;;
        esac
    done

    # shift $((OPTIND-1))

    # Inform the user about the job.
    echo "Launching interactive session"
    echo "  - cores: ${cores}"
    echo "  - memory: ${mem} GB"
    echo "  - partition: ${partition}"
    echo "  - time: ${time}"

    export HPC_INTERACTIVE_JOB=1

    if [[ $HPC_SCHEDULER == "Slurm" ]]; then
        # X11 requires `~/.ssh/config` on local machine.
        if [[ -z "$HPC_X11_FORWARDING" ]]; then
            echo "X11 forwarding is required."
            return 1
        fi
        srun --cpus-per-task="$cores" --mem="${mem}G" --partition="$partition" --pty --time="$time" --x11="first" /bin/bash
    elif [[ $HPC_SCHEDULER == "LSF" ]]; then
        mem_mb="$(( $mem * 1024 ))"
        bsub -Is -n "$cores" -q "$partition" -R rhelp[mem="$mem_mb"] -W "$time" bash
        unset -v mem_mb
    fi

    unset -v cores mem partition time
}
