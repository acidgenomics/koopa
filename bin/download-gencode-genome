#!/usr/bin/env python3
# pylint: disable=invalid-name,redefined-outer-name
# pylint: enable=invalid-name
"""
Download GENCODE genome.
"""

import argparse
import os
import sys

from textwrap import dedent

# pylint: disable=wrong-import-position

KOOPA_PREFIX = os.path.realpath(os.path.join(__file__, "..", ".."))
PYTHON_PREFIX = os.path.join(KOOPA_PREFIX, "lang", "python")
sys.path.insert(0, PYTHON_PREFIX)

from koopa.genome import tx2gene_from_fasta  # noqa:E402
from koopa.genome.gencode import (
    download_gencode_genome,
    download_gencode_gff,
    download_gencode_gtf,
    download_gencode_transcriptome,
    gencode_version,
)  # noqa:E402
from koopa.syntactic import kebab_case  # noqa:E402
from koopa.sys import download, eprint, paste_url  # noqa:E402

# pylint: enable=wrong-import-position

DESCRIPTION = "Download GENCODE genome."
EPILOG = """
details:
    Creates a new directory in the current working directory.
    Only Homo sapiens and Mus musculus genomes are supported.
    The legacy Homo sapiens GRCh37 (hg19) genome build is supported.

    See also:
    - https://www.gencodegenes.org/
    - https://www.gencodegenes.org/pages/faq.html
    - https://www.gencodegenes.org/human/release_32lift37.html
    - https://github.com/diekhans/gencode-backmap
    - tximeta Bioconductor package.

note:
    Python script.
    Updated 2020-02-09.
"""

# pylint: disable=invalid-name,protected-access,redefined-builtin

parser = argparse.ArgumentParser(
    description=DESCRIPTION,
    epilog=EPILOG,
    formatter_class=argparse.RawTextHelpFormatter,
)
optional = parser._action_groups.pop()
required = parser.add_argument_group("required arguments")
required.add_argument(
    "--organism",
    required=True,
    type=str,
    help="latin name (e.g. 'Homo sapiens')",
)
optional.add_argument(
    "--type",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "genome", "transcriptome", "none"],
    help=dedent(
        """\
        'all': download all reference types
        'genome': primary assembly (DNA)
        'transcriptome': transcripts (cDNA/RNA)
        'none': skip download
    """
    ),
)
optional.add_argument(
    "--annotation",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "gtf", "gff", "none"],
    help=dedent(
        """\
        'all': download all annotation formats
        'gtf': GTF (GFFv2)
        'gff': GFF3
        'none': skip download
    """
    ),
)
optional.add_argument("--build", type=str, help="genome build (e.g. 'GRCh38')")
optional.add_argument(
    "--release", type=str, help="release version (e.g. '32')"
)
optional.add_argument(
    "--decompress",
    action="store_true",
    help="decompress, but keep the compressed file",
)
parser._action_groups.append(optional)
if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(1)
args = parser.parse_args()

annotation = args.annotation
build = args.build
decompress = args.decompress
organism = args.organism
release = args.release
type = args.type

if type == "none" and annotation == "none":
    eprint("Error: 'type' or 'annotation' are required.")

if organism == "Homo sapiens":
    organism_short = "human"
    if build is None:
        build = "GRCh38"
elif organism == "Mus musculus":
    organism_short = "mouse"
    if build is not None:
        eprint("Error: 'build' is only supported for Homo sapiens.")
    build = "GRCm38"

if release is None:
    release = gencode_version(organism=organism)

base_url = paste_url(
    "ftp://ftp.ebi.ac.uk",
    "pub",
    "databases",
    "gencode/",
    "Gencode_" + organism_short,
    "release_" + release,
)
output_dir = kebab_case(
    organism + " " + build + " " + "gencode" + " " + release
)

if build == "GRCh37":
    base_url = paste_url(base_url, "GRCh37_mapping")
    transcriptome_fasta_url = paste_url(
        base_url, "gencode.v" + release + "lift37.transcripts.fa.gz"
    )
    gtf_url = paste_url(
        base_url, "gencode.v" + release + "lift37.annotation.gtf.gz"
    )
    gff_url = paste_url(
        base_url, "gencode.v" + release + "lift37.annotation.gff3.gz"
    )
    readme_url = paste_url(base_url, "_README_GRCh37_mapping.txt")
else:
    transcriptome_fasta_url = paste_url(
        base_url, "gencode.v" + release + ".transcripts.fa.gz"
    )
    gtf_url = paste_url(base_url, "gencode.v" + release + ".annotation.gtf.gz")
    gff_url = paste_url(
        base_url, "gencode.v" + release + ".annotation.gff3.gz"
    )
    readme_url = paste_url(base_url, "_README.TXT")

genome_fasta_url = paste_url(
    base_url, build + ".primary_assembly.genome.fa.gz"
)
md5sums_url = paste_url(base_url, "MD5SUMS")

# pylint: enable=invalid-name,protected-access,redefined-builtin


download(url=readme_url, output_dir=output_dir)
download(url=md5sums_url, output_dir=output_dir)

if type == "genome":
    download_gencode_genome(
        genome_fasta_url=genome_fasta_url,
        output_dir=output_dir,
        decompress=decompress,
    )
elif type == "transcriptome":
    download_gencode_transcriptome(
        transcriptome_fasta_url=transcriptome_fasta_url,
        output_dir=output_dir,
        decompress=decompress,
    )
elif type == "all":
    download_gencode_genome(
        genome_fasta_url=genome_fasta_url,
        output_dir=output_dir,
        decompress=decompress,
    )
    download_gencode_transcriptome(
        transcriptome_fasta_url=transcriptome_fasta_url,
        output_dir=output_dir,
        decompress=decompress,
    )

if annotation == "gtf":
    download_gencode_gtf(
        gtf_url=gtf_url, output_dir=output_dir, decompress=decompress
    )
elif annotation == "gff":
    download_gencode_gff(
        gff_url=gff_url, output_dir=output_dir, decompress=decompress
    )
elif annotation == "all":
    download_gencode_gtf(
        gtf_url=gtf_url, output_dir=output_dir, decompress=decompress
    )
    download_gencode_gff(
        gff_url=gff_url, output_dir=output_dir, decompress=decompress
    )

if type != "genome":
    tx2gene_from_fasta(source_name="gencode", output_dir=output_dir)

print("Genome downloaded successfully to '" + output_dir + "'.")
