#!/usr/bin/env python3
# pylint: disable=invalid-name,redefined-outer-name
# pylint: enable=invalid-name
"""
Download RefSeq genome.
"""

import argparse
import os
import sys

from os.path import realpath
from textwrap import dedent

# pylint: disable=wrong-import-position

KOOPA_PREFIX = realpath(os.path.join(__file__, "..", ".."))
PYTHON_PREFIX = os.path.join(KOOPA_PREFIX, "lang", "python")
sys.path.insert(0, PYTHON_PREFIX)

# FIXME Move these to separate refseq functions file.

from koopa.genome import refseq_version  # noqa
from koopa.syntactic import kebab_case  # noqa
from koopa.sys import download, paste_url  # noqa

# pylint: enable=wrong-import-position

DESCRIPTION = "Download RefSeq genome."
EPILOG = """
details:
    Creates a new directory in the current working directory.
    Only Homo sapiens genome is supported.

    Primary RefSeq URLs:
    - https://www.ncbi.nlm.nih.gov/projects/genome/guide/human/
    - ftp://ftp.ncbi.nlm.nih.gov/refseq/
    - ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/

    Current GRCh38 assembly:
    ftp://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/
        GRCh38_latest/refseq_identifiers/
        - DNA: GRCh38_latest_genomic.fna.gz
        - RNA: GRCh38_latest_rna.fna.gz
        - GTF: GRCh38_latest_genomic.gtf.gz
        - GFF: GRCh38_latest_genomic.gff.gz

    Preformatted for analysis pipelines (UCSC IDs):
    ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/
        GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/
        - Full:   GCA_000001405.15_GRCh38_full_analysis_set.fna.gz
        - No ALT: GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz

    Full version information in URL:
    ftp://ftp.ncbi.nlm.nih.gov/genomes/Homo_sapiens/109.20190905/
        GCF_000001405.39_GRCh38.p13/
        - DNA: GCF_000001405.39_GRCh38.p13_genomic.fna.gz
        - RNA: GCF_000001405.39_GRCh38.p13_rna.fna.gz
        - GTF: GCF_000001405.39_GRCh38.p13_genomic.gtf.gz
        - GFF: GCF_000001405.39_GRCh38.p13_genomic.gff.gz

    Alternate paths:
    - ftp://ftp.ncbi.nlm.nih.gov/genomes/Homo_sapiens/
    - ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/
          Homo_sapiens/

note:
    Python script.
    Updated 2019-10-07.
"""

# pylint: disable=invalid-name,protected-access,redefined-builtin

parser = argparse.ArgumentParser(
    description=DESCRIPTION,
    epilog=EPILOG,
    formatter_class=argparse.RawTextHelpFormatter,
)
parser.add_argument(
    "--build",
    default="GRCh38",
    const="GRCh38",
    nargs="?",
    choices=["GRCh38", "GRCh37"],
    help="genome build (e.g. 'GRCh38')",
)
parser.add_argument(
    "--type",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "genome", "transcriptome", "none"],
    help=dedent(
        """\
        'all': download all reference types
        'genome': primary assembly (DNA)
        'transcriptome': transcripts (cDNA/RNA)
        'none': skip download
    """
    ),
)
parser.add_argument(
    "--annotation",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "gtf", "gff", "none"],
    help=dedent(
        """\
        'all': download all annotation formats
        'gtf': GTF (GFFv2)
        'gff': GFF3
        'none': skip download
    """
    ),
)
parser.add_argument(
    "--decompress",
    action="store_true",
    help="decompress (but keep) the original file",
)
args = parser.parse_args()

annotation = args.annotation
build = args.build
decompress = args.decompress
type = args.type

organism = "Homo sapiens"
organism_short = "H_sapiens"

release = refseq_version()
release_url = paste_url(
    "ftp://ftp.ncbi.nlm.nih.gov",
    "refseq",
    organism_short,
    "annotation",
    build + "_latest",
    "refseq_identifiers",
)
output_dir = kebab_case(
    organism + " " + build + " " + "refseq" + " " + release
)

# pylint: enable=invalid-name,protected-access,redefined-builtin


def download_genome(release_url, output_dir, decompress):
    """
    Download genome FASTA.
    """
    download(
        url=paste_url(release_url, build + "_latest_genomic.fna.gz"),
        output_dir=os.path.join(output_dir, "genome"),
        decompress=decompress,
    )


def download_transcriptome(release_url, output_dir, decompress):
    """
    Download transcriptome FASTA.
    """
    download(
        url=paste_url(release_url, build + "_latest_rna.fna.gz"),
        output_dir=os.path.join(output_dir, "transcriptome"),
        decompress=decompress,
    )


def download_gtf(release_url, output_dir, decompress):
    """
    Download GTF file.
    """
    download(
        url=paste_url(release_url, build + "_latest_genomic.gtf.gz"),
        output_dir=os.path.join(output_dir, "gtf"),
        decompress=decompress,
    )


def download_gff(release_url, output_dir, decompress):
    """
    Download GFF3 file.
    """
    download(
        url=paste_url(release_url, build + "_latest_genomic.gff.gz"),
        output_dir=os.path.join(output_dir, "gff"),
        decompress=decompress,
    )


download(url=paste_url(release_url, "README.txt"), output_dir=output_dir)
download(
    url=paste_url(release_url, build + "_latest_assembly_report.txt"),
    output_dir=output_dir,
)

if type == "genome":
    download_genome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif type == "transcriptome":
    download_transcriptome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif type == "all":
    download_genome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
    download_transcriptome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )

if annotation == "gtf":
    download_gtf(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif annotation == "gff":
    download_gff(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif annotation == "all":
    download_gtf(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
    download_gff(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )

print("Genome downloaded successfully to '" + output_dir + "'.")
