#!/usr/bin/env bash
set -Eeu -o pipefail

KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_PREFIX}/shell/bash/include/header.sh"

threads="$(_koopa_cpu_count)"

r1_tail="_R1_001.fastq.gz"
r2_tail="_R2_001.fastq.gz"

fastq_dir="fastq"
index_dir="bowtie2-index"
output_dir="bowtie2"

while (("$#"))
do
    case "$1" in
        --fastq-dir=*)
            fastq_dir="${1#*=}"
            shift 1
            ;;
        --fastq-dir)
            fastq_dir="$2"
            shift 2
            ;;
        --index-dir=*)
            index_dir="${1#*=}"
            shift 1
            ;;
        --index-dir)
            index_dir="$2"
            shift 2
            ;;
        --output-dir=*)
            output_dir="${1#*=}"
            shift 1
            ;;
        --output-dir)
            output_dir="$2"
            shift 2
            ;;
        --r1-tail=*)
            r1_tail="${1#*=}"
            shift 1
            ;;
        --r1-tail)
            r1_tail="$2"
            shift 2
            ;;
        --r2-tail=*)
            r2_tail="${1#*=}"
            shift 1
            ;;
        --r2-tail)
            r2_tail="$2"
            shift 2
            ;;
        *)
            _koopa_invalid_arg "$1"
            ;;
    esac
done

fastq_dir="$(_koopa_strip_trailing_slash "$fastq_dir")"
index_dir="$(_koopa_strip_trailing_slash "$index_dir")"
output_dir="$(_koopa_strip_trailing_slash "$output_dir")"

_koopa_h1 "Running bowtie2."

_koopa_activate_conda_env bowtie2

_koopa_info "bowtie2: $(_koopa_which_realpath bowtie2)"

_koopa_assert_is_dir "$fastq_dir"
_koopa_assert_is_dir "$index_dir"
# > _koopa_assert_is_not_dir "$output_dir"

fastq_dir="$(realpath "$fastq_dir")"
index_dir="$(realpath "$index_dir")"

_koopa_info "fastq: ${fastq_dir}"
_koopa_info "index: ${index_dir}"

# Sample array from FASTQ files                                             {{{1
# ==============================================================================

# Resolve FASTQ directory symlink, if necessary.
fastq_dir="$(realpath "$fastq_dir")"

# Create a per-sample array from the R1 FASTQ files.
# Pipe GNU find into array.
array=()
while IFS= read -r -d $'\0'
do
    x="$REPLY"
    x="$(basename "$x")"
    x="${x/${r1_tail}/}"
    array+=("$x")
done < <( \
    find "$fastq_dir" \
        -maxdepth 1 \
        -mindepth 1 \
        -type f \
        -name "*${r1_tail}" \
        -print0 \
    | sort -z \
)

# Error on FASTQ match failure.
if [[ "${#array[@]}" -eq 0 ]]
then
    _koopa_stop "Failed to match FASTQs in '${fastq_dir}' with '${r1_tail}'."
fi

_koopa_info "${#array[@]} samples detected."

# Alignment                                                                 {{{1
# ==============================================================================

index_prefix="${index_dir}/bowtie2"

# Loop across the per-sample array and align.
for id in "${array[@]}"
do
    _koopa_info "Aligning '${id}'."
    sample_output_dir="${output_dir}/${id}"
    [ -d "$sample_output_dir" ] && continue
    mkdir -pv "$sample_output_dir"
    fastq_r1="${fastq_dir}/${id}${r1_tail}"
    fastq_r2="${fastq_dir}/${id}${r2_tail}"
    sam_file="${sample_output_dir}/${id}.sam"
    log_file="${sample_output_dir}/bowtie2.log"
    bowtie2 \
        --local \
        --rg "PL:illumina" \
        --rg "PU:${id}" \
        --rg "SM:${id}" \
        --rg-id "$id" \
        --sensitive-local \
        -1 "$fastq_r1" \
        -2 "$fastq_r2" \
        -S "$sam_file" \
        -X 2000 \
        -p "$threads" \
        -q \
        -x "$index_prefix" \
        2>&1 | tee "$log_file"
done
