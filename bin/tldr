#!/usr/bin/env bash

KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_PREFIX}/shell/bash/include/header.sh"

# """
# Modified version of tldr client by Ray Lee
# http://github.com/raylee/tldr
# """

# FIXME Don't use echo here.

_koopa_assert_is_installed curl tput



# Functions  {{{1
# ==============================================================================

# Variables  {{{2
# ------------------------------------------------------------------------------

get_platform() {
    # """
    # Convert the local platorm name to tldr's version.
    #
    # @note Updated 2020-04-27.
    #
    # Supported tldr platforms:
    # https://github.com/tldr-pages/tldr/tree/master/pages
    # """
    local str
    case "$(uname -s)" in
        Darwin)
            str="osx"
            ;;
        Linux)
            str="linux"
            ;;
        SunOS)
            str="sunos"
            ;;
        CYGWIN*|MINGW32*|MSYS*)
            str="windows"
            ;;
        *)
            str="common"
            ;;
    esac
    _koopa_print "$str"
}

# Caching and indexing  {{{2
# ------------------------------------------------------------------------------

auto_update_index() {
    # """
    # Auto-update index.
    # @note Updated 2020-04-27.
    # """
    recent "$index" || update_index
    return 0
}

cache_tldr() {
    # """
    # Cache a local copy of the tldr-pages repo.
    #
    # @note Updated 2020-04-27.
    # """
    local tmp_dir
    tmp_dir="$(_koopa_tmp_dir)"
    (
        _koopa_cd_tmp_dir "$tmp_dir"
        local url
        url="https://github.com/tldr-pages/tldr/tarball/master"
        local file
        file="master.tar.gz"
        _koopa_download "$url" "$file"
        _koopa_extract "$file"
        rsync -a \
            "tldr-pages-tldr-"*"/pages/" \
            "${configdir}/"
    )
    rm -fr "$tmp_dir"
    update_index
    return 0
}

fetch_tldr() {
    # """
    # Fetch and individual tldr page.
    #
    # @note Updated 2020-04-27.
    # """
    curl -sf "https://raw.githubusercontent.com/tldr-pages/tldr/master/\
pages/{${platform},common}/${1}.md"
    return 0
}

get_tldr() {
    # """
    # Return the local cached copy of the tldrpage, or retrieve and cache from
    # GitHub.
    #
    # @note Updated 2020-04-27.
    # """
    p="$(path_for_cmd "$1")"
    cached="$configdir/$p"
    recent "$cached" || {
        mkdir -p "$(dirname "$cached")"
        curl -sf -o "$cached" "$base_url/$p"
    }
    # if the curl failed for some reason, keep cat from whinging
    cat "$cached" 2>/dev/null
}

# If the file exists and is more recent than '$cache_days' old.
recent() {
    exists="$(find "$1" -mtime "-${cache_days}" 2>/dev/null)"
    [[ -n "$exists" ]] && [[ -z "$force_update" ]]
}

update_index() {
    curl -sf -o "$index" "$index_url"
    res="$?"
    if [[ "$res" -eq 22 ]]
    then
        _koopa_stop "Could not download index from '${index_url}'."
    fi
    return 0
}

# Visual styles  {{{2
# ------------------------------------------------------------------------------

code() {
    # """
    # Code block.
    #
    # @note Updated 2020-04-27.
    #
    # Take everything between two backticks, capture it, and surround it with
    # styling.
    # """
    _koopa_print "$*" \
        | sed "s/\`\([^\`]*\)\`/  ${scode}\1${reset}/g"
}

# FIXME Switch to using _koopa_h1 or something instead?
heading() {
    printf '%s\n' "${sheader}${*#??}$reset"
}

list_item() {
    _koopa_print "${sdescription}$*$reset"
}

quotation() {
    _koopa_print "${squote}${*#??}$reset"
}

style_params() {
    printf '%s' "$*" \
        | sed "s/{{/${sparam}/g;s/}}/${eparam}/g"
}

text() {
    _koopa_print "$*"
}









# FIXME NEED TO CLEAN THIS ONE UP.
# Extract the platform key from index.json, return preferred subpath to tldrpage
path_for_cmd() {
    override="${configdir}/local/${1}.md"
    if [[ -f "$override" ]]
    then
        echo "local/${1}.md"
        return 0
    fi

    # results in, eg, "name":"netstat","platform":["linux","osx"]},
    desc=$(tr '{' '\n' < $index | grep "\"name\":\"$1\"")
    [ -z "$desc" ] && echo "-- not found --" && return

    # use the platform specific version of the tldr first
    if _koopa_grepl "$desc" "$platform"
    then
        echo "$platform/$1.md"
    elif _koopa_grepl "$desc" "common"
    then
        echo "common/$1.md"
    else
        # take the first one so we can show something, but warn the user
        p=$(echo "$desc" | cut -d '"' -f 8)
        >&2 printf "${red}tldr page $1 not found in $platform or common, using page from platform $p instead$reset\n"
        echo "$p/$1.md"
    fi

    return 0
}

# Runners  {{{1
# ------------------------------------------------------------------------------

# FIXME This parser isn't currently working.

# An idiot-level recognition of tldr's markdown. Needs improvement, or
# subcontracting out to a markdown -> ANSI formatting command
display_tldr() {
    last_token=''
    page="$1"
    page=$(style_params "$page")

    # Read one line at a time, don't strip whitespace ('IFS='), and process
    # last line even if it doesn't have a newline at the end.
    printf %s "$page" | while IFS= read -r line || [ -n "$line" ]; do
        # omit empty lines after list items
        # FIXME IMPROVE THE NAME / STANDARDIZE THIS FUNCTION
        trimmed=$(_koopa_trim_ws "$line")
        [ -z "$trimmed" ] && [ "$last_token" = "list_item" ] && continue

        case "$line" in
            \#*)
                heading "$line"
                last_token="heading"
                ;;
            \>*)
                quotation "$line"
                last_token="quotation"
                ;;
            -*)
                list_item "$line"
                last_token="list_item"
                ;;
            \`*)
                code "$line"
                last_token="code"
                ;;
            *)
                text "$line"
                last_token="text"
                ;;
        esac
    done
}

list_pages() {
    # """
    # List locally cached tldr pages.
    # @note Updated 2020-04-27.
    # """
    _koopa_h1 "Listing known tldr pages."
    local pages
    pages=()
    while IFS= read -r -d $'\0'
    do
        pages+=("$REPLY")
    done < <( \
        find "$configdir" \
            -mindepth 1 \
            -type f \
            -iname "*.md" \
            -print0 \
        | sort -uz
    )
    _koopa_basename_sans_ext "${pages[@]}"
    return 0
}



# Argument parsing  {{{1
# ==============================================================================

# FIXME Switch to other approach used in bash scripts.
while [ $# -gt 0 ]
do
    case "$1" in
        -l|--list)
            list_pages
            exit 0
            ;;
        -n)
            TLDR_CACHE=no
            ;;
        -u|-c|--cache|--update)
            cache_tldr
            exit 0
            ;;
        *)
            # There are pages with hypens in them, such as 'git-tag'.
            # This converts 'tldr git tag' to the hyphenated version.
            hyphenated=$(printf %s "$*" | tr ' ' '-')
            page=${hyphenated:-''}
            break
            ;;
    esac
    shift
done



# Configuration  {{{1
# ==============================================================================

# Colors  {{{2
# ------------------------------------------------------------------------------

# Contents via http://mywiki.wooledge.org/BashFAQ/037.
reset="$(    tput sgr0   || tput me      )"  # Reset cursor
bold="$(     tput bold   || tput md      )"  # Start bold
underline="$(tput smul   || tput us      )"  # Start underline

default="$(  tput op                     )"
back="$(     printf '\b' )"

case "$TERM" in
    *-m) ;;
    *)
        black="$(    tput setaf 0 || tput AF 0    )"
        red="$(      tput setaf 1 || tput AF 1    )"
        green="$(    tput setaf 2 || tput AF 2    )"
        yellow="$(   tput setaf 3 || tput AF 3    )"
        blue="$(     tput setaf 4 || tput AF 4    )"
        magenta="$(  tput setaf 5 || tput AF 5    )"
        cyan="$(     tput setaf 6 || tput AF 6    )"
        white="$(    tput setaf 7 || tput AF 7    )"

        onblue="$(   tput setab 4 || tput AB 4    )"
        ongrey="$(   tput setab 7 || tput AB 7    )"
        ;;
esac

# Italics  {{{2
# ------------------------------------------------------------------------------

# macOS termcap doesn't have italics. This adds support for iTerm2 and is
# harmless on Terminal.app.
if [[ "$(get_platform)" == "osx" ]]
then
    italic="$(printf "\033[3m")"                        # Start italic
    eitalic="$(printf "\033[23m")"                      # End italic
else
    italic="$(   tput sitm   || tput ZH      )"         # Start italic
    eitalic="$(  tput ritm   || tput ZH      )"         # End italic
fi

# FIXME JUST PASS THE VARIABLE IN DIRECTLY HERE.
# Custom styling if set in environment variables.
sheader="$red"
squote="$underline"
sdescription="$reset"
scode="$bold"
sparam="$italic"
eparam="$eitalic"

# Local configuration.
configdir="${XDG_CONFIG_HOME}/tldr"
index="${configdir}/index.json"

# tldr URLs.
base_url="https://raw.githubusercontent.com/tldr-pages/tldr/master/pages"
index_url="https://raw.githubusercontent.com/tldr-pages/tldr-pages.github.io/master/assets/index.json"

platform="$(get_platform)"



# Cache / index  {{{1
# ==============================================================================

# Note that these are currently hard-coded.
cache_days=14
force_update=''

# Check if config folder exists, otherwise create it.
if [[ ! -d "$configdir" ]]
then
    mkdir -p "$configdir"
    cache_tldr
fi

[[ ! -f "$index" ]] && update_index
auto_update_index



# Display tldr page  {{{1
# ==============================================================================

# If the environment variable 'TLDR_CACHE=no', then fetch the page directly from
# GitHub; otherwise, use the cache.
if [[ "${TLDR_CACHE-unset}" == "no" ]]
then
    tldr="$(fetch_tldr "$page")"
else
    tldr="$(get_tldr "$page")"
fi

if [[ -z "$tldr" ]]
then
    _koopa_stop "tldr page for command ${page} not found."
fi

display_tldr "$tldr"
