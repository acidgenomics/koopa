#!/usr/bin/env bash
set -Eeu -o pipefail

# """
# Push a local build.
# Updated 2020-02-16.
#
# Useful if GPG agent causes push failure.
#
# @examples
# docker-push acidgenomics/debian:latest
# """

KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_PREFIX}/shell/bash/include/header.sh"

image="${1:?}"
server="docker.io"

_koopa_h1 "Pushing images matching '${image}'."

_koopa_assert_is_matching_regex "$image" '^.+/.+$'


# https://docs.docker.com/config/formatting/

# > docker image inspect "${image}"
# > docker image inspect --format '{{json .RepoTags}}' "$image"
# docker image inspect acidgenomics/alpine

json="$( \
    docker inspect \
    --format='{{json .RepoTags}}' \
    "$image" \
)"

echo "$json"

awk 'BEGIN{FS=",";OFS=","}{$1=""; print}' file_name


exit 0

# > docker inspect \
# >     --format='{{println .RepoTags}}' \
# >     "$image"


exit 0

# FIXME Can we just use cut here?
mapfile -t strings < <( \
    docker image ls \
        --filter reference="$image" \
)


if ! _koopa_is_array_non_empty "${strings[@]}"
then
    docker image ls
    _koopa_stop "'${image}' failed to match any images."
fi

echo "${strings[@]}"
exit 0

# FIXME Get the name from the ID.

for string in "${strings[@]}"
do
    echo "$string"
    image="$string"
    continue
    # FIXME
    docker push "${server}/${image}"
done
