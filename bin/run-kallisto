#!/usr/bin/env bash

KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_PREFIX}/shell/bash/include/header.sh"

_koopa_assert_has_args "$@"

fastq_dir="fastq"
output_dir="kallisto"
r1_tail="_R1_001.fastq.gz"
r2_tail="_R2_001.fastq.gz"

while (("$#"))
do
    case "$1" in
        --fasta-file=*)
            fasta_file="${1#*=}"
            shift 1
            ;;
        --fasta-file)
            fasta_file="$2"
            shift 2
            ;;
        --fastq-dir=*)
            fastq_dir="${1#*=}"
            shift 1
            ;;
        --fastq-dir)
            fastq_dir="$2"
            shift 2
            ;;
        --index-file=*)
            index_file="${1#*=}"
            shift 1
            ;;
        --index-file)
            index_file="$2"
            shift 2
            ;;
        --output-dir=*)
            output_dir="${1#*=}"
            shift 1
            ;;
        --output-dir)
            output_dir="$2"
            shift 2
            ;;
        --r1-tail=*)
            r1_tail="${1#*=}"
            shift 1
            ;;
        --r1-tail)
            r1_tail="$2"
            shift 2
            ;;
        --r2-tail=*)
            r2_tail="${1#*=}"
            shift 1
            ;;
        --r2-tail)
            r2_tail="$2"
            shift 2
            ;;
        *)
            _koopa_invalid_arg "$1"
            ;;
    esac
done

if [[ -z "${fasta_file:-}" ]] && [[ -z "${index_file:-}" ]]
then
    _koopa_stop "Specify 'fasta-file' or 'index-file'."
elif [[ -n "${fasta_file:-}" ]] && [[ -n "${index_file:-}" ]]
then
    _koopa_stop "Specify 'fasta-file' or 'index-file', but not both."
elif [[ -z "${fastq_dir:-}" ]] || [[ -z "${output_dir:-}" ]]
then
    _koopa_missing_arg
fi

fastq_dir="$(_koopa_strip_trailing_slash "$fastq_dir")"
output_dir="$(_koopa_strip_trailing_slash "$output_dir")"

_koopa_h1 "Running kallisto."

_koopa_activate_conda_env kallisto
_koopa_dl "kallisto" "$(_koopa_which_realpath kallisto)"

fastq_dir="$(realpath "$fastq_dir")"
_koopa_dl "fastq dir" "$fastq_dir"

# Sample array from FASTQ files {{{1
# ==============================================================================

# Create a per-sample array from the R1 FASTQ files.
# Pipe GNU find into array.
readarray -t fastq_r1_files <<< "$( \
    find "$fastq_dir" \
        -maxdepth 1 \
        -mindepth 1 \
        -type f \
        -name "*${r1_tail}" \
        -print \
    | sort \
)"

# Error on FASTQ match failure.
if [[ "${#fastq_r1_files[@]}" -eq 0 ]]
then
    _koopa_stop "Failed to match FASTQs in '${fastq_dir}' with '${r1_tail}'."
fi

_koopa_info "${#fastq_r1_files[@]} samples detected."
mkdir -pv "$output_dir"

# Index {{{1
# ==============================================================================

# Generate the genome index on the fly, if necessary.
if [[ -n "${index_file:-}" ]]
then
    index_file="$(realpath "$index_file")"
else
    index_file="${output_dir}/kallisto.idx"
    _koopa_kallisto_index \
        --fasta-file="$fasta_file" \
        --index-file="$index_file"
fi

_koopa_dl "index" "$index_file"

# Quantify {{{1
# ==============================================================================

# Loop across the per-sample array and quantify.
for fastq_r1 in "${fastq_r1_files[@]}"
do
    fastq_r2="${fastq_r1/${r1_tail}/${r2_tail}}"
    _koopa_kallisto_quant \
        --fastq-r1="$fastq_r1" \
        --fastq-r2="$fastq_r2" \
        --index-file="$index_file" \
        --output-dir="$output_dir" \
        --r1-tail="$r1_tail" \
        --r2-tail="$r2_tail"
done
