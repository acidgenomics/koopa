#!/usr/bin/env bash
set -Eeu -o pipefail

# shellcheck source=/dev/null
source "$(koopa header bash)"

# Run kallisto.
# Updated 2019-09-11.

# Note that GTF file is only required for pseudobam generation, which we're
# skipping here in this simple, fast mode script.

# Regarding bash arrays:
# - https://unix.stackexchange.com/questions/263883
# - https://github.com/koalaman/shellcheck/wiki/SC2206
# - http://mywiki.wooledge.org/ParsingLs
# - https://stackoverflow.com/questions/1951506

# Array sorting:
# - https://stackoverflow.com/questions/7442417
# - https://stackoverflow.com/a/7442583/3911732



# Variables                                                                 {{{1
# ==============================================================================

# Note that bcbio currently uses 30 bootstraps.
# Uma's nextflow script currently uses 100.
bootstraps=30

threads="$CPU_COUNT"

r1_tail="_R1_001.fastq.gz"
r2_tail="_R2_001.fastq.gz"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
usage: run-kallisto [-h] --fasta-file --index-file
    --fastq-dir="fastq/" --output-dir="kallisto/"

This script supports quick analysis of multiple paired-end FASTQ samples inside
a directory. It builds a kallisto index on the fly, if necessary (unless
'--index-file' argument is set), and outputs per sample automatically.

The script will intentionally error if the output directory specified by
'--output-dir' already exists, to prevent accidental overwrite.

required arguments:
    --fasta-file
        Transcriptome-level (i.e. cDNA) FASTA file.
        Ensembl or GENCODE reference is recommended over RefSeq or UCSC.
        Example: Homo_sapiens.GRCh38.cdna.all.fa.gz
        This will generate a new kallisto index, which gets saved in the output
        directory specified by '--output-dir'.
    [OR]
    --index-file
        Kallisto index, previously generated using 'kallisto index'.
        Example: kallisto.idx
        If '--fasta-file' is defined, this gets generated on the fly.

required arguments, with defaults:
    --fastq-dir
        Directory path containing paired-end FASTQ files.
        Defaults to 'fastq/'.
    --output-dir
        Kallisto output directory path.
        Defaults to 'kallisto/'.

optional arguments:
    -h, --help
        Show this help message and exit.

internal variables:
    bootstraps: ${bootstraps}
    threads: ${threads}
    r1_tail: ${r1_tail}
    r2_tail: ${r2_tail}
EOF
}

[[ -z "${1:-}" ]] && usage && exit 0



# Parse arguments                                                           {{{1
# ==============================================================================

while (("$#"))
do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        --fasta-file)
            fasta_file="$2"
            shift 2
            ;;
        --fastq-dir)
            fastq_dir="${2:-fastq/}"
            shift 2
            ;;
        --index-file)
            index_file="$2"
            shift 2
            ;;
        --output-dir)
            output_dir="${2:-kallisto/}"
            shift 2
            ;;
        --)
            # End argument parsing.
            shift
            break
            ;;
        --*|-*)
            # Unsupported flags.
            >&2 printf "Error: Invalid flag '%s'\n" "$1"
            exit 1
            ;;
        *)
            shift
            ;;
    esac
done

# FASTA or kallisto index file is required.
if [[ -z "${fasta_file:-}" ]] && [[ -z "${index_file:-}" ]]
then
    >&2 printf "Error: Specify 'fasta-file' or 'index-file'.\n\n"
    usage
    exit 1
fi
if [[ -n "${fasta_file:-}" ]] && [[ -n "${index_file:-}" ]]
then
    >&2 printf "Error: Specify 'fasta-file' or 'index-file', but not both.\n\n"
    usage
    exit 1
fi

# Directories are required.
if [[ -z "${fastq_dir:-}" ]] ||
    [[ -z "${output_dir:-}" ]]
then
    >&2 printf "Error: Missing required argument.\n\n"
    usage
    exit 1
fi

unset -f usage






# Preflight checks                                                          {{{1
# ==============================================================================

# Check that FASTQ directory exists.
if [[ ! -d "$fastq_dir" ]]
then
    >&2 printf "Error: FASTQ directory missing: %s\n" "$fastq_dir"
    exit 1
fi

# Check that output directory doesn't exist.
if [[ -d "$output_dir" ]]
then
    >&2 printf "Error: Output directory exists: %s\n" "$output_dir"
    exit 1
fi

# Check for kallisto, and show version.
_koopa_assert_is_installed kallisto
kallisto version



# Sample array from FASTQ files                                             {{{1
# ==============================================================================

# Create a per-sample array from the R1 FASTQ files.
array=()
for x in "${fastq_dir}/"*"${r1_tail}"
do
    x="$(basename "$x")"
    x="${x/${r1_tail}/}"
    array+=("$x")
done

# FIXME Error if the array is empty.



# kallisto index                                                            {{{1
# ==============================================================================

# Generate the kallisto index on the fly, if necessary.
if [[ -z "${index_file:-}" ]]
then
    index_file="${output_dir}/kallisto.idx"
    kallisto index -i "$index_file" "$fasta_file"
fi



# kallisto quant                                                            {{{1
# ==============================================================================

# Loop across the per-sample array and quantify with kallisto.
for x in "${array[@]}"
do
    printf "kallisto quant: %s\n" "$x"
    sample_output_dir="${output_dir}/${x}"
    rm -fr "$output_dir"
    mkdir -p "$output_dir"
    fastq_r1="${fastq_dir}/${x}${r1_tail}"
    fastq_r2="${fastq_dir}/${x}${r2_tail}"
    kallisto quant \
        --output-dir="$sample_output_dir" \
        --index="$index_file" \
        --threads="$threads" \
        --bootstrap-samples="$bootstraps" \
        "$fastq_r1" "$fastq_r2"
done
