#!/usr/bin/env bash
set -Eeu -o pipefail

# shellcheck source=/dev/null
source "$(koopa header bash)"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
usage: dotfile [--help|-h] [--config] [--force] [--private] [--quiet]
    RELATIVE_PATH [SYMLINK_NAME]

Symlink a dot file.

required positional arguments:
    1.  relative_path
        Relative file path in dotfiles repo.

optional positional arguments:
    2.  symlink_name
        Name of target symlink (without '.' prefix).

optional arguments:
    --help, -h
        Show this help message and exit.
    --config
        Symlink into XDG config directory instead of user home.
        This path is defined by 'XDG_CONFIG_HOME' and defaults to '~/.config/'.
    --force
        Force overwrite.
        Applies to symlinks only.
    --private
        Link a private dot file.
        Checks in 'scripts-private/' directory in koopa config.
        Defaults to '~/.config/koopa/scripts-private/'.

details:
    The relative file path in dotfiles repo can be used as input. The target
    file should be specified without a leading period.

    By default, this script is designed to work with the 'acidgenomics/dotfiles'
    repository available on GitHub.

note:
    Bash script.
    Updated 2019-09-24.

examples:
    dotfile zshrc
    dotfile --config doom
EOF
}

[[ -z "$*" ]] && usage && exit 0



# Parse arguments                                                           {{{1
# ==============================================================================

config=0
force=0
private=0

POSITIONAL=()
for i in "$@"
do
    case "$i" in
        --help|-h)
            usage
            exit 0
            ;;
        --config)
            config=1
            shift 1
            ;;
        --force)
            force=1
            shift 1
            ;;
        --private)
            private=1
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
        --*|-*)
            >&2 printf "Error: Invalid argument: '%s'\n" "$i"
            exit 1
            ;;
        *)
            POSITIONAL+=("$i")
            shift 1
            ;;
    esac
done
set -- "${POSITIONAL[@]}"

source_name="$1"
symlink_name="${2:-}"



# Script                                                                    {{{1
# ==============================================================================

# Note that we're creating a symlink in local user config.
dot_dir="$(_koopa_config_dir)/dotfiles"

# Create a dotfile symlink in config dir, if necessary.
dot_repo="$(_koopa_home)/dotfiles"
if [[ -d "$dot_repo"  ]] && [[ ! -d "$dot_dir" ]]
then
    rm -frv "$dot_dir"
    ln -fnsv "$dot_repo" "$dot_dir"
fi

# Private file.
if [[ "$private" -eq 1 ]]
then
    dot_dir="${dot_dir}-private"
fi
_koopa_assert_is_dir "$dot_dir"

if [[ "$config" -eq 1 ]]
then
    source_path="${dot_dir}/config/${source_name}"
else
    source_path="${dot_dir}/${source_name}"
fi
_koopa_assert_is_existing "$source_path"

# Define optional target symlink name.
if [[ -z "$symlink_name" ]]
then
    symlink_name="$(basename "$source_path")"
fi

# Add link either in HOME (default) or XDG_CONFIG_HOME.
if [[ "$config" -eq 1 ]]
then
    symlink_path="${XDG_CONFIG_HOME}/${symlink_name}"
else
    symlink_path="${HOME}/.${symlink_name}"
fi

# Inform the user when nuking a broken symlink.
if [[ -L "$symlink_path" ]] && [[ ! -e "$symlink_path" ]]
then
    printf "Overwriting broken link: '%s'.\n" "$symlink_path"
    rm -fv "$symlink_path"
fi

# We're allowing force overwrite of existing symlinks only.
if [[ -L "$symlink_path" ]] &&
    [[ -f "$symlink_path" || -d "$symlink_path" ]] &&
    [[ "$force" -eq 0 ]]
then
    >&2 printf "Error: Existing symlink: '%s'.\n" "$symlink_path"
    exit 1
elif [[ ! -L "$symlink_path" ]] && [[ -e "$symlink_path" ]]
then
    >&2 printf "Error: Existing file: '%s'.\n" "$symlink_path"
    exit 1
fi

printf "Symlinking '%s'.\n" "$(basename "$symlink_path")"
rm -fv "$symlink_path"
ln -fnsv "$source_path" "$symlink_path"
