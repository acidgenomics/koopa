#!/usr/bin/env bash
set -Eeu -o pipefail

# shellcheck source=/dev/null
source "$(koopa header bash)"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
usage: dotfile [-h|--help] [--config] [--force] [--private] [--quiet]
    RELATIVE_PATH [SYMLINK_NAME]

Symlink a dot file.
Updated 2019-09-20.

Note that relative file path in dotfiles repo can be used as input.
The destination file should be specified without a leading period.

required positional arguments:
    1: relative_path
        Relative file path in dotfiles repo.

optional positional arguments:
    2: symlink_name
        Name of destination symlink (without '.' prefix).

optional arguments:
    -h, --help
        Show this help message and exit.
    --config
        Symlink into XDG config directory instead of user home.
        This path is defined by 'XDG_CONFIG_HOME' and defaults to '~/.config/'.
    --force
        Force overwrite.
        Applies to symlinks only.
    --private
        Link a private dot file.
        Checks in 'scripts-private/' directory in koopa config.
        Defaults to '~/.config/koopa/scripts-private/'.
EOF
}

[[ -z "$*" ]] && usage && exit 0



# Parse arguments                                                           {{{1
# ==============================================================================

# Using flags and positional arguments.
# https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f

PARAMS=""

config=0
force=0
private=0

while (("$#"))
do
    case "$1" in
        --config)
            config=1
            shift 1
            ;;
        --force)
            force=1
            shift 1
            ;;
        --help)
            usage
            exit 0
            ;;
        --private)
            private=1
            shift 1
            ;;
        --)
            # End argument parsing.
            shift
            break
            ;;
        --*|-*)
            # Unsupported flags.
            >&2 printf "Error: Invalid flag %s\n" "$1"
            exit 1
            ;;
        *)
            # Preserve positional arguments.
            PARAMS="${PARAMS} ${1}"
            shift
            ;;
    esac
done

# Set positional arguments in their proper place.
eval set -- "$PARAMS"

unset -f usage

source_name="$1"
symlink_name="${2:-}"



# Script                                                                    {{{1
# ==============================================================================

# Note that we're creating a symlink in local user config.
dot_dir="$(_koopa_config_dir)/dotfiles"

# Create a dotfile symlink in config dir, if necessary.
dot_repo="$(_koopa_home)/dotfiles"
if [[ -d "$dot_repo"  ]] && [[ ! -d "$dot_dir" ]]
then
    rm -frv "$dot_dir"
    ln -fnsv "$dot_repo" "$dot_dir"
fi

# Private file.
if [[ "$private" -eq 1 ]]
then
    dot_dir="${dot_dir}-private"
fi

# Error if the dotfiles directory can't be found.
if [[ ! -d "$dot_dir" ]]
then
    >&2 printf "Error: Directory missing: '%s'.\n" "$dot_dir"
    exit 1
fi

# Error if the source file can't be found.
if [[ "$config" -eq 1 ]]
then
    source_path="${dot_dir}/config/${source_name}"
else
    source_path="${dot_dir}/${source_name}"
fi
if [[ ! -f "$source_path" && ! -d "$source_path" ]]
then
    >&2 printf "Error: Source file missing: '%s'.\n" "$source_path"
    exit 1
fi

# Define optional destination name.
if [[ -z "$symlink_name" ]]
then
    symlink_name="$(basename "$source_path")"
fi

# Add link either in HOME (default) or XDG_CONFIG_HOME.
if [[ "$config" -eq 1 ]]
then
    symlink_path="${XDG_CONFIG_HOME}/${symlink_name}"
else
    symlink_path="${HOME}/.${symlink_name}"
fi

# Inform the user when nuking a broken symlink.
if [[ -L "$symlink_path" ]] && [[ ! -e "$symlink_path" ]]
then
    printf "Overwriting broken link: '%s'.\n" "$symlink_path"
    rm -fv "$symlink_path"
fi

# We're allowing force overwrite of existing symlinks only.
if [[ -L "$symlink_path" ]] &&
    [[ -f "$symlink_path" || -d "$symlink_path" ]] &&
    [[ "$force" -eq 0 ]]
then
    >&2 printf "Error: Existing symlink: '%s'.\n" "$symlink_path"
    exit 1
elif [[ ! -L "$symlink_path" ]] && [[ -e "$symlink_path" ]]
then
    >&2 printf "Error: Existing file: '%s'.\n" "$symlink_path"
    exit 1
fi

printf "Symlinking '%s'.\n" "$(basename "$symlink_path")"
rm -fv "$symlink_path"
ln -fnsv "$source_path" "$symlink_path"
