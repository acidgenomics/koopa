#!/usr/bin/env bash

KOOPA_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_HOME}/shell/bash/include/header.sh"



# Variables                                                                 {{{1
# ==============================================================================

dir=""



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
$(_koopa_help_header)
    --host="HOST" --user="USER" [--dir="${dir}"]

Recursively download (mirror) over FTP using wget.

required arguments:
    --host
        Remote host name (e.g. ftp.acidgenomics.com). Leave out the protocol
        here (e.g. 'ftp://'). We're assuming it's a standard FTP transfer.
    --user
        Remote user name. This script is intended to only perform an
        authenticated transfer. Otherwise you can simply call 'wget' with the
        '--mirror' flag.

optional arguments:
    --dir
        Remote directory path. Note that this script always mirrors to the
        current working directory path on the local machine.
        Defaults to '${dir}'.

$(_koopa_help_args)

details:
    For secure transfers, just use rsync or scp instead.

note:
    Bash script.
    Updated 2019-07-30.
EOF
}

[[ -z "$*" ]] && usage && exit 0
_koopa_help "$@"



# Arguments                                                                 {{{1
# ==============================================================================

while (("$#"))
do
    case "$1" in
        --dir=*)
            dir="${1#*=}"
            shift 1
            ;;
        --dir)
            dir="$2"
            shift 2
            ;;
        --host=*)
            host="${1#*=}"
            shift 1
            ;;
        --host)
            host="$2"
            shift 2
            ;;
        --user=*)
            user="${1#*=}"
            shift 1
            ;;
        --user)
            user="$2"
            shift 2
            ;;
        *)
            >&2 printf "Error: Invalid argument: '%s'\n" "$1"
            exit 1
            ;;
    esac
done

if [[ -z "${host:-}" ]] ||
    [[ -z "${user:-}" ]]
then
    >&2 printf "Error: Missing argument.\n\n"
    exit 1
fi



# Script                                                                    {{{1
# ==============================================================================

if [[ -n "$dir" ]]
then
    path="${host}/${dir}"
else
    path="${host}"
fi

wget --ask-password --mirror "ftp://${user}@${path}/"*
