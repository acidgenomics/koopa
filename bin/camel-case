#!/usr/bin/env bash

KOOPA_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_HOME}/shell/bash/include/header.sh"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
$(_koopa_help_header)
    [--rename] [--prefix] [--strict]
    string|file...

Convert input into camel case.

required positional arguments:
    ... Character strings or file names to sanitize.

optional arguments:
    --rename
        Rename input files. Assumes we're renaming files in current working
        directory but also supports explicit and/or mixed file paths. Errors
        intentionally if requested input does not exist on disk. Disabled by
        default.
    --prefix
        Include "x" prefix for names that are syntactically invalid in R. This
        includes files that begin with a number. Disabled by default.
    --strict
        Enforce strict camel syntax. Applies primarily to acronyms.
        For example, "ID" becomes "Id".
        Disabled by default.

$(_koopa_help_args)

details:
    Runs in string mode by default.
    File rename mode can be enabled by setting '--rename' flag.

see also:
    - 'syntactic::camelCase()' in R.
    - make-names

examples:
    camel-case "hello world" "foo bar"
    ## helloWorld fooBar

    camel-case --strict "gene ID"
    ## geneId

    camel-case --files "foo-bar.fastq.gz"
    ## ./fooBar.fastq.gz

    camel-case --files --prefix 1-control-A.fastq.gz
    ## ./x1ControlA.fastq.gz

note:
    Bash script that calls Rscript internally.
    Requires the syntactic package to be installed.
    Updated 2019-10-09.
EOF
}

_koopa_help "$@"



# Arguments                                                                 {{{1
# ==============================================================================

prefix="FALSE"
rename=0
strict="FALSE"

POSITIONAL=()
while (("$#"))
do
    case "$1" in
        --prefix)
            prefix="TRUE"
            shift 1
            ;;
        --rename)
            rename=1
            shift 1
            ;;
        --strict)
            strict="TRUE"
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
        --*|-*)
            >&2 printf "Error: Invalid argument: '%s'\n" "$1"
            exit 1
            ;;
        *)
            POSITIONAL+=("$1")
            shift 1
            ;;
    esac
done
set -- "${POSITIONAL[@]}"



# Script                                                                    {{{1
# ==============================================================================

script_name="$(basename "$0")"

# Rename file mode                                                          {{{2
# ------------------------------------------------------------------------------

if [[ "$rename" -eq 1 ]]
then
    flags=()
    if [[ "$prefix" == "TRUE" ]]
    then
        flags+=("--prefix")
    fi
    if [[ "$strict" == "TRUE" ]]
    then
        flags+=("--strict")
    fi
    source_arr=("$@")
    source_dn_arr=()
    source_bn_arr=()
    source_ext_arr=()
    for x in "${source_arr[@]}"
    do
        source_dn_arr+=("$(dirname "$x")")
        source_bn_arr+=("$(_koopa_basename_sans_ext2 "$x")")
        source_ext_arr+=("$(_koopa_file_ext2 "$x")")
    done
    target_arr=()
    read -r -a target_bn_arr <<< \
        "$("$script_name" "${flags[@]}" "${source_bn_arr[@]}")"
    for i in "${!source_arr[@]}"
    do
        target_dn="${source_dn_arr[$i]}"
        target_bn="${target_bn_arr[$i]}"
        target_ext="${source_ext_arr[$i]}"
        if [[ -n "$target_ext" ]]
        then
            target_ext=".${target_ext}"
        fi
        target_arr+=( \
            "$(printf "%s/%s%s" \
                "$target_dn" "$target_bn" "$target_ext" \
            )" \
        )
    done
    for i in "${!source_arr[@]}"
    do
        if _koopa_is_darwin
        then
            flags=("-v")
        else
            flags=("--no-target-directory" "--verbose")
        fi
        mv "${flags[@]}" "${source_arr[$i]}" "${target_arr[$i]}"
    done
    exit 0
fi

# String mode                                                               {{{2
# ------------------------------------------------------------------------------

object="$(_koopa_array_to_r_vector "$@")"
Rscript -e " \
    cat(
        syntactic::camelCase(
            object = ${object},
            strict = ${strict},
            prefix = ${prefix}
        ),
        '\n',
        sep = ' '
    ) \
"
