#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

from argparse import RawTextHelpFormatter

description = "Download GENCODE genome annotations in GTF format."
epilog = """
details:
    Downloads to the current working directory.

    Only Homo sapiens and Mus musculus genomes are supported.

    GTF file:
    (e.g. ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_30/
        gencode.v30.annotation.gtf.gz)

    Legacy GRCh37 mapped release is not supported.
    https://www.gencodegenes.org/releases/grch37_mapped_releases.html

    See also:
    - https://www.gencodegenes.org/pages/faq.html
    - tximeta Bioconductor package.

note:
    Python script.
    Updated 2019-09-18.
"""

parser = argparse.ArgumentParser( \
    description = description, \
    epilog = epilog, \
    formatter_class = RawTextHelpFormatter
)
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')
required.add_argument( \
    "--organism", \
    required=True, \
    choices=['Homo sapiens', 'Mus musculus'], \
    help="latin name (e.g. \"Homo sapiens\")" \
)
optional.add_argument( \
    "--release", \
    type=str, \
    help="release version (e.g. \"30\")" \
)
optional.add_argument( \
    "--decompress", \
    action='store_true', \
    help="Decompress (but keep) the original file." \
)
parser._action_groups.append(optional)
# Show help when no arguments are declared.
if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(1)
args = parser.parse_args()

# Parsed arguments.
decompress = args.decompress
organism = args.organism
release = args.release

# Coerce full latin organism name to short name used on GENCODE.
if organism == "Homo sapiens":
    organism_short = "human"
    build = "GRCh38"
elif organism == "Mus musculus":
    organism_short = "mouse"
    build = "GRCm38"

# Set the release automatically, if necessary.
# e.g. human = 31; mouse = M22
if release is None:
    release = subprocess.check_output( \
        "koopa variable gencode_" + organism_short + "_release_version", \
        shell=True, universal_newlines=True \
    )
    release = release.rstrip()

base_url = "ftp://ftp.ebi.ac.uk/pub/databases/gencode/" + \
    "Gencode_" + organism_short + "/release_" + release + "/"
file = "gencode.v" + release + ".annotation.gtf.gz"
url = base_url + file

# Error if the file exists.
if os.path.isfile(file):
    print(file + " has already been downloaded.")
    sys.exit(0)

print("Downloading " + file + ".")
try:
    subprocess.check_call(["wget", url])
except subprocess.CalledProcessError as e:
    print("Failed to download " + file + ".")
    sys.exit(1)

# Decompress, but also keep the original compressed file.
if decompress is True:
    print("Decompressing " + file + ".")
    unzip_file = os.path.splitext(file)[0]
    os.system("gunzip -c " + file + " > " + unzip_file)
