#!/usr/bin/env python3
# pylint: disable=invalid-name,redefined-outer-name
# pylint: enable=invalid-name
"""
Download Ensembl genome.
"""

import argparse
import os
import sys

from textwrap import dedent

# pylint: disable=wrong-import-position

sys.path.insert(0, os.getenv("KOOPA_HOME"))
from pykoopa.genome import ensembl_version, tx2gene_from_fasta
from pykoopa.syntactic import kebab_case
from pykoopa.sys import eprint, paste_url, wget

# pylint: enable=wrong-import-position


# Usage                                                                     {{{1
# ==============================================================================

DESCRIPTION = "Download Ensembl genome."
EPILOG = """
details:
    Creates a new directory in the current working directory.

    Important! When working in R, be sure to match the Ensembl release version
    to the latest version supported by AnnotationHub.

    The legacy Homo sapiens GRCh37 (hg19) genome build is supported.
    If requested, the release version is set internally automatically.

    Verify checksums in shell with:
    > grep "$(sum *.gz)" "CHECKSUMS"

see also:
    - https://useast.ensembl.org/
    - ftp://ftp.ensembl.org/pub/

    Which Homo sapiens genome assembly FASTA to use?
    - https://steinbaugh.com/posts/bcbio-homo-sapiens-genome.html
    - https://lh3.github.io/2017/11/13/which-human-reference-genome-to-use
    - https://bioinformatics.stackexchange.com/questions/540/

    Using STAR aligner for RNA-seq?
    Here's a relevant section from the manual:
    ## 2.2.1 Which chromosomes/scaffolds/patches to include?
    ## It is strongly recommended to include major chromosomes (e.g., for human
    ## chr1-22,chrX,chrY,chrM,) as well as un-placed and un-localized scaffolds.
    ## Typically, un-placed/un-localized scaffolds add just a few MegaBases to
    ## the genome length, however, a substantial number of reads may map to
    ## ribosomal RNA (rRNA) repeats on these scaffolds. These reads would be
    ## reported as unmapped if the scaffolds are not included in the genome, or,
    ## even worse, may be aligned to wrong loci on the chromosomes. Generally,
    ## patches and alternative haplotypes should not be included in the genome.
    ## Examples of acceptable genome sequence files:
    ## ENSEMBL: files marked with '.dna.primary.assembly'.

    GRCh38 alternatives to Ensembl primary assembly:
    (consider using GENCODE also)
    - ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/
          GCA_000001405.15_GRCh38/
          seqs_for_alignment_pipelines.ucsc_ids/
          GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz
    - ftp://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/
          vertebrates_mammals/Homo_sapiens/GRCh38/seqs_for_alignment_pipelines/
          GCA_000001405.15_GRCh38_full_plus_hs38d1_analysis_set.fna
    - http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/reference/
          GRCh38_reference_genome/GRCh38_full_analysis_set_plus_decoy_hla.fa

    GRCh37 alternatives to Ensembl primary assembly:
    - ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/technical/reference/
          human_g1k_v37.fasta.gz

    Note that Ensembl GTF is missing annotations for some transcripts defined
    in transcriptome FASTA (human and mouse).
    In this case, use '*.chr_patch_hapl_scaff.gtf.gz' GTF file for annotations.

    See related issues:
    - https://github.com/COMBINE-lab/salmon/issues/122
    - https://github.com/COMBINE-lab/salmon/issues/336

note:
    Python script.
    Updated 2019-10-09.
"""


# Arguments                                                                 {{{1
# ==============================================================================

# pylint: disable=invalid-name,protected-access,redefined-builtin

parser = argparse.ArgumentParser(
    description=DESCRIPTION,
    epilog=EPILOG,
    formatter_class=argparse.RawTextHelpFormatter,
)
optional = parser._action_groups.pop()
required = parser.add_argument_group("required arguments")
required.add_argument(
    "--organism",
    required=True,
    type=str,
    help="latin name (e.g. 'Homo sapiens')",
)
required.add_argument(
    "--build", required=True, type=str, help="genome build (e.g. 'GRCh38')"
)
optional.add_argument(
    "--type",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "genome", "transcriptome", "none"],
    help=dedent(
        """\
        'all': download all reference types
        'genome': primary assembly (DNA)
        'transcriptome': transcripts (cDNA/RNA)
        'none': skip download
    """
    ),
)
optional.add_argument(
    "--annotation",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "gtf", "gff", "none"],
    help=dedent(
        """\
        'all': download all annotation formats
        'gtf': GTF (GFFv2)
        'gff': GFF3
        'none': skip download
    """
    ),
)
optional.add_argument("--release", type=str, help="release version (e.g. '97')")
optional.add_argument(
    "--decompress",
    action="store_true",
    help="decompress, but keep the compressed file",
)
parser._action_groups.append(optional)
if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(1)
args = parser.parse_args()

annotation = args.annotation
build = args.build
decompress = args.decompress
organism = args.organism
release = args.release
type = args.type

if type == "none" and annotation == "none":
    eprint("Error: 'type' or 'annotation' are required.")

organism = organism.replace(" ", "_")

base_url = "ftp://ftp.ensembl.org/pub"
grch37_base_url = paste_url(base_url, "grch37")
grch37_release = "87"

if build == "GRCh37":
    base_url = grch37_base_url
    release = grch37_release
if release is None:
    release = ensembl_version()

release_url = paste_url(base_url, "release-" + release)
output_dir = kebab_case(
    organism + " " + build + " " + "ensembl" + " " + release
)

# pylint: enable=invalid-name,protected-access,redefined-builtin


# Script                                                                    {{{1
# ==============================================================================


def download_genome(release_url, output_dir, decompress):
    """
    Download genome FASTA.
    """
    output_dir = os.path.join(output_dir, "genome")
    base_url = paste_url(release_url, "fasta", organism.lower(), "dna")
    readme_url = paste_url(base_url, "README")
    checksums_url = paste_url(base_url, "CHECKSUMS")
    if organism in ("Homo_sapiens", "Mus_musculus"):
        assembly = "primary_assembly"
    else:
        assembly = "toplevel"
    fasta_url = paste_url(
        base_url, organism + "." + build + ".dna." + assembly + ".fa.gz"
    )
    wget(url=readme_url, output_dir=output_dir)
    wget(url=checksums_url, output_dir=output_dir)
    wget(url=fasta_url, output_dir=output_dir, decompress=decompress)


def download_transcriptome(release_url, output_dir, decompress):
    """
    Download transcriptome FASTA.
    """
    output_dir = os.path.join(output_dir, "transcriptome")
    base_url = paste_url(release_url, "fasta", organism.lower(), "cdna")
    readme_url = paste_url(base_url, "README")
    checksums_url = paste_url(base_url, "CHECKSUMS")
    fasta_url = paste_url(base_url, organism + "." + build + ".cdna.all.fa.gz")
    wget(url=readme_url, output_dir=output_dir)
    wget(url=checksums_url, output_dir=output_dir)
    wget(url=fasta_url, output_dir=output_dir, decompress=decompress)


def download_gtf(release_url, output_dir, decompress):
    """
    Download GTF file.
    """
    output_dir = os.path.join(output_dir, "gtf")
    base_url = paste_url(release_url, "gtf", organism.lower())
    readme_url = paste_url(base_url, "README")
    checksums_url = paste_url(base_url, "CHECKSUMS")
    gtf_url = paste_url(
        base_url, organism + "." + build + "." + release + ".gtf.gz"
    )
    wget(url=readme_url, output_dir=output_dir)
    wget(url=checksums_url, output_dir=output_dir)
    wget(url=gtf_url, output_dir=output_dir, decompress=decompress)
    if organism in ("Homo_sapiens", "Mus_musculus"):
        gtf_patch_url = paste_url(
            base_url,
            organism
            + "."
            + build
            + "."
            + release
            + ".chr_patch_hapl_scaff.gtf.gz"
        )
        wget(url=gtf_patch_url, output_dir=output_dir, decompress=decompress)


def download_gff(release_url, output_dir, decompress):
    """
    Download GFF3 file.
    """
    output_dir = os.path.join(output_dir, "gff")
    base_url = paste_url(release_url, "gff3", organism.lower())
    readme_url = paste_url(base_url, "README")
    checksums_url = paste_url(base_url, "CHECKSUMS")
    gff_url = paste_url(
        base_url, organism + "." + build + "." + release + ".gff3.gz"
    )
    wget(url=readme_url, output_dir=output_dir)
    wget(url=checksums_url, output_dir=output_dir)
    wget(url=gff_url, output_dir=output_dir, decompress=decompress)
    if organism in ("Homo sapiens", "Mus musculus"):
        gtf_patch_url = paste_url(
            base_url,
            organism
            + "."
            + build
            + "."
            + release
            + ".chr_patch_hapl_scaff.gff3.gz"
        )
        wget(url=gtf_patch_url, output_dir=output_dir, decompress=decompress)


if type == "genome":
    download_genome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif type == "transcriptome":
    download_transcriptome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif type == "all":
    download_genome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
    download_transcriptome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )

if annotation == "gtf":
    download_gtf(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif annotation == "gff":
    download_gff(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif annotation == "all":
    download_gtf(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
    download_gff(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )

if type != "genome":
    tx2gene_from_fasta(source_name="ensembl", output_dir=output_dir)

print("Genome downloaded successfully to '" + output_dir + "'.")
