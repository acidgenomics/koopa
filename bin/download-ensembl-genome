#!/usr/bin/env python3

import argparse
import os
import sys
import textwrap

sys.path.insert(0, os.getenv("KOOPA_HOME"))
import pykoopa
from pykoopa.genome import ensembl_version
from pykoopa.syntactic import kebab_case
from pykoopa.sys import eprint, wget


# Variables                                                                 {{{1
# ==============================================================================

base_url = "ftp://ftp.ensembl.org/pub/"
grch37_base_url = base_url + "grch37/"
grch37_release = "87"


# Usage                                                                     {{{1
# ==============================================================================

description = "Download Ensembl genome."
epilog = """
details:
    Creates a new directory in the current working directory.

    Important! When working in R, be sure to match the Ensembl release version
    to the latest version supported by AnnotationHub.

    The legacy Homo sapiens GRCh37 (hg19) genome build is supported.
    If requested, the release version is set internally automatically.

    Verify checksums in shell with:
    > grep "$(sum *.gz)" "CHECKSUMS"

see also:
    - https://useast.ensembl.org/
    - ftp://ftp.ensembl.org/pub/

note:
    Python script.
    Updated 2019-10-05.
"""


# Arguments                                                                 {{{1
# ==============================================================================

parser = argparse.ArgumentParser(
    description=description,
    epilog=epilog,
    formatter_class=argparse.RawTextHelpFormatter,
)
optional = parser._action_groups.pop()
required = parser.add_argument_group("required arguments")
required.add_argument(
    "--organism",
    required=True,
    type=str,
    help="latin name (e.g. 'Homo sapiens')",
)
required.add_argument(
    "--build", required=True, type=str, help="genome build (e.g. 'GRCh38')"
)
optional.add_argument(
    "--type",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "genome", "transcriptome", "none"],
    help=textwrap.dedent(
        """\
        'all': download all reference types
        'genome': primary assembly (DNA)
        'transcriptome': transcripts (cDNA/RNA)
        'none': skip download
    """
    ),
)
optional.add_argument(
    "--annotation",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "gtf", "gff", "none"],
    help=textwrap.dedent(
        """\
        'all': download all annotation formats
        'gtf': GTF (GFFv2)
        'gff': GFF3
        'none': skip download
    """
    ),
)
optional.add_argument("--release", type=str, help="release version (e.g. '97')")
optional.add_argument(
    "--decompress",
    action="store_true",
    help="decompress, but keep the compressed file",
)
parser._action_groups.append(optional)
if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(1)
args = parser.parse_args()

annotation = args.annotation
build = args.build
decompress = args.decompress
organism = args.organism
release = args.release
type = args.type

if type == "none" and annotation == "none":
    eprint("Error: 'type' or 'annotation' are required.")

organism = organism.replace(" ", "_")


# Script                                                                    {{{1
# ==============================================================================

if build == "GRCh37":
    base_url = grch37_base_url
    release = grch37_release
if release is None:
    release = ensembl_version()

release_url = base_url + "release-" + release + "/"
output_dir = kebab_case(
    organism + " " + build + " " + "ensembl" + " " + release
)


def download_genome(release_url, output_dir, decompress):
    output_dir = os.path.join(output_dir, "genome")
    base_url = release_url + "fasta/" + organism.lower() + "/dna/"
    readme_url = base_url + "README"
    checksums_url = base_url + "CHECKSUMS"
    fasta_url = (
        base_url + organism + "." + build + ".dna.primary_assembly.fa.gz"
    )
    wget(url=readme_url, output_dir=output_dir)
    wget(url=checksums_url, output_dir=output_dir)
    wget(url=fasta_url, output_dir=output_dir, decompress=decompress)


def download_transcriptome(release_url, output_dir, decompress):
    output_dir = os.path.join(output_dir, "transcriptome")
    base_url = release_url + "fasta/" + organism.lower() + "/cdna/"
    readme_url = base_url + "README"
    checksums_url = base_url + "CHECKSUMS"
    fasta_url = base_url + organism + "." + build + ".cdna.all.fa.gz"
    wget(url=readme_url, output_dir=output_dir)
    wget(url=checksums_url, output_dir=output_dir)
    wget(url=fasta_url, output_dir=output_dir, decompress=decompress)


def download_gtf(release_url, output_dir, decompress):
    output_dir = os.path.join(output_dir, "gtf")
    base_url = release_url + "gtf/" + organism.lower() + "/"
    readme_url = base_url + "README"
    checksums_url = base_url + "CHECKSUMS"
    gtf_url = base_url + organism + "." + build + "." + release + ".gtf.gz"
    wget(url=readme_url, output_dir=output_dir)
    wget(url=checksums_url, output_dir=output_dir)
    wget(url=gtf_url, output_dir=output_dir, decompress=decompress)


def download_gff(release_url, output_dir, decompress):
    output_dir = os.path.join(output_dir, "gff")
    base_url = release_url + "gff3/" + organism.lower() + "/"
    readme_url = base_url + "README"
    checksums_url = base_url + "CHECKSUMS"
    gff_url = base_url + organism + "." + build + "." + release + ".gff3.gz"
    wget(url=readme_url, output_dir=output_dir)
    wget(url=checksums_url, output_dir=output_dir)
    wget(url=gff_url, output_dir=output_dir, decompress=decompress)


if type == "genome":
    download_genome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif type == "transcriptome":
    download_transcriptome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif type == "all":
    download_genome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
    download_transcriptome(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )

if annotation == "gtf":
    download_gtf(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif annotation == "gff":
    download_gff(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
elif annotation == "all":
    download_gtf(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )
    download_gff(
        release_url=release_url, output_dir=output_dir, decompress=decompress
    )

print("Genome downloaded successfully to '" + output_dir + "'.")
