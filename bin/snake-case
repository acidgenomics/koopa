#!/usr/bin/env bash
set -Eeu -o pipefail

# shellcheck source=/dev/null
source "$(koopa header bash)"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
$(_koopa_help_header) [--files] [--strict]
    string...

Convert input into snake case.

required positional arguments:
    ... Character strings to sanitize.

optional arguments:
    --files
        File name mode. Preserves file extensions. In this case, we're
        preserving anything after the first '.' in the file name. This makes
        supporting complex file names (e.g. '*.fastq.gz') easier. Note that this
        flag on its own does not rename input.
    --rename
        Rename input files. Sets '--files' flag automatically. Assumes we're
        renaming files in current working directory but also supports explicit
        and/or mixed file paths.

$(_koopa_help_args)

details:
    Note that strings beginning with a number will be prefixed with 'x'.

see also:
    - 'syntactic::snakeCase()' in R.
    - make-names

examples:
    snake-case "hello world" "foo bar" "geneID"
    ## hello_world foo_bar gene_id

    snake-case --files "foo-bar.fastq.gz"
    ## ./foo_bar.fastq.gz

    snake-case --files 1-control-A.fastq.gz
    ## ./x1_control_a.fastq.gz

note:
    Bash script that calls Rscript internally.
    Requires the syntactic package to be installed.
    Updated 2019-09-26.
EOF
}

_koopa_help "$@"



# Arguments                                                                 {{{1
# ==============================================================================

files=0
rename=0

POSITIONAL=()
while (("$#"))
do
    case "$1" in
        --files)
            files=1
            shift 1
            ;;
        --rename)
            files=1
            rename=1
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
        --*|-*)
            >&2 printf "Error: Invalid argument: '%s'\n" "$1"
            exit 1
            ;;
        *)
            POSITIONAL+=("$1")
            shift 1
            ;;
    esac
done
set -- "${POSITIONAL[@]}"



# Script                                                                    {{{1
# ==============================================================================

# String mode                                                               {{{2
# ------------------------------------------------------------------------------

if [[ "$files" -eq 0 ]]
then
    object="$(_koopa_array_to_r_vector "$@")"
    Rscript -e "cat(syntactic::snakeCase(object = ${object}), '\n', sep = ' ')"
    exit 0
fi

# File mode                                                                 {{{2
# ------------------------------------------------------------------------------

if [[ "$files" -eq 1 ]]
then
    source=("$@")
    dirname=()
    basename=()
    ext=()

    # Mapply-style approach, looping across the file input.
    for x in "${source[@]}"
    do
        dirname+=("$(dirname "$x")")
        basename+=("$(_koopa_basename_sans_ext2 "$x")")
        ext+=("$(_koopa_file_ext2 "$x")")
    done

    # Sanitize the base name.
    snake="$(snake-case "${basename[@]}")"
    # SC2206: Split robustly with mapfile or read -a.
    read -r -a snake <<< "$snake"

    target=()
    for i in "${!source[@]}"
    do
        target+=( \
            "$(printf "%s/%s.%s" \
                "${dirname[$i]}" "${snake[$i]}" "${ext[$i]}" \
            )" \
        )
    done
fi

# Rename mode                                                               {{{2
# ------------------------------------------------------------------------------

if [[ "$rename" -eq 1 ]]
then
    for i in "${!source[@]}"
    do
        mv -v "${source[$i]}" "${target[$i]}"
    done
else
    echo "${target[@]}"
fi
