#!/usr/bin/env bash
set -Eeu -o pipefail

KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_PREFIX}/shell/bash/include/header.sh"

_koopa_assert_has_args "$@"
_koopa_assert_is_installed salmon

bootstraps=30
threads="$(_koopa_cpu_count)"

r1_tail="_R1_001.fastq.gz"
r2_tail="_R2_001.fastq.gz"

fastq_dir="fastq"
output_dir="salmon"

while (("$#"))
do
    case "$1" in
        --fasta-file=*)
            fasta_file="${1#*=}"
            shift 1
            ;;
        --fasta-file)
            fasta_file="$2"
            shift 2
            ;;
        --fastq-dir=*)
            fastq_dir="${1#*=}"
            shift 1
            ;;
        --fastq-dir)
            fastq_dir="$2"
            shift 2
            ;;
        --index-file=*)
            index_file="${1#*=}"
            shift 1
            ;;
        --index-file)
            index_file="$2"
            shift 2
            ;;
        --output-dir=*)
            output_dir="${1#*=}"
            shift 1
            ;;
        --output-dir)
            output_dir="$2"
            shift 2
            ;;
        *)
            _koopa_invalid_arg "$1"
            ;;
    esac
done

if [[ -z "${fasta_file:-}" ]] && [[ -z "${index_file:-}" ]]
then
    _koopa_stop "Specify 'fasta-file' or 'index-file'."
elif [[ -n "${fasta_file:-}" ]] && [[ -n "${index_file:-}" ]]
then
    _koopa_stop "Specify 'fasta-file' or 'index-file', but not both."
elif [[ -z "${fastq_dir:-}" ]] || [[ -z "${output_dir:-}" ]]
then
    _koopa_missing_arg
fi

fastq_dir="$(_koopa_strip_trailing_slash "$fastq_dir")"
output_dir="$(_koopa_strip_trailing_slash "$output_dir")"

_koopa_assert_is_dir "$fastq_dir"
_koopa_assert_is_not_dir "$output_dir"

salmon --version



# Sample array from FASTQ files                                             {{{1
# ==============================================================================

# Resolve FASTQ directory symlink, if necessary.
fastq_dir="$(realpath "$fastq_dir")"

# Create a per-sample array from the R1 FASTQ files.
array=()
while IFS= read -r -d $'\0'
do
    x="$REPLY"
    x="$(basename "$x")"
    x="${x/${r1_tail}/}"
    array+=("$x")
done < <(find "$fastq_dir" -name "*${r1_tail}" -print0)

# Error on FASTQ match failure.
if [[ "${#array[@]}" -eq 0 ]]
then
    _koopa_stop "Failed to match FASTQs in '${fastq_dir}' with '${r1_tail}'."
fi

_koopa_message "${#array[@]} samples detected."



# Index                                                                     {{{1
# ==============================================================================

mkdir -pv "$output_dir"

# Generate the genome index on the fly, if necessary.
if [[ -z "${index_file:-}" ]]
then
    _koopa_assert_is_file "$fasta_file"
    index_file="${output_dir}/salmon.idx"
    salmon index \
        -k 31 \
        -p "$threads" \
        -i "$index_file" \
        -t "$fasta_file" \
        2>&1 | tee "${output_dir}/salmon-index.log"
fi



# Quantify                                                                  {{{1
# ==============================================================================

# Loop across the per-sample array and quantify with kallisto.
for x in "${array[@]}"
do
    _koopa_message "salmon quant: ${x}"
    sample_output_dir="${output_dir}/${x}"
    rm -frv "$sample_output_dir"
    mkdir -pv "$sample_output_dir"
    fastq_r1="${fastq_dir}/${x}${r1_tail}"
    fastq_r2="${fastq_dir}/${x}${r2_tail}"
    salmon quant \
        --gcBias \
        --index="$index_file" \
        --libType="A" \
        --mates1="$fastq_r1" \
        --mates2="$fastq_r2" \
        --numBootstraps="$bootstraps" \
        --output="$sample_output_dir" \
        --seqBias \
        --threads="$threads" \
        2>&1 | tee "${sample_output_dir}/salmon-quant.log"
done
