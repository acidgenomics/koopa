#!/usr/bin/env bash
set -Eeu -o pipefail

# shellcheck source=/dev/null
source "$(koopa header bash)"



# Variables                                                                 {{{1
# ==============================================================================

# Note that bcbio currently uses 30 bootstraps.
bootstraps=30
threads="$CPU_COUNT"

r1_tail="_R1_001.fastq.gz"
r2_tail="_R2_001.fastq.gz"

fastq_dir="fastq/"
output_dir="salmon/"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
$(_koopa_help_header)
    --fasta-file --index-file
    [--fastq-dir="${fastq_dir}"] [--output-dir="${output_dir}"]

Run salmon on multiple samples.

required arguments:
    --fasta-file
        Transcriptome-level (i.e. cDNA) FASTA file.
        Ensembl or GENCODE reference is recommended over RefSeq or UCSC.
        Example: Homo_sapiens.GRCh38.cdna.all.fa.gz
        This will generate a new salmon index, which gets saved in the output
        directory specified by '--output-dir'.
    [OR]
    --index-file
        Salmon index, previously generated using 'salmon index'.
        Example: salmon.idx
        If '--fasta-file' is defined, this gets generated on the fly.

required arguments with defaults:
    --fastq-dir
        Directory path containing paired-end FASTQ files.
        Defaults to '${fastq_dir}'.
    --output-dir
        Output directory path.
        Defaults to '${output_dir}'.

$(_koopa_help_args)

details:
    This script supports quick analysis of multiple paired-end FASTQ samples
    inside a directory. It builds a salmon index on the fly, if necessary
    (unless the '--index-file' argument is set), and outputs per sample
    automatically.

    The script will intentionally error if the output directory specified by
    '--output-dir' already exists, to prevent accidental overwrite.

    Strandedness:
    Illumina TruSeq stranded library prep is fr-firststrand.
    This corresponds to 'ISR' for salmon quant.

                    | Paired-end | Single-end |
    ----------------|------------|------------|
    fr-unstranded   | -l IU      | -l U       |
    fr-firststrand  | -l ISR     | -l SR      |
    fr-secondstrand | -l ISF     | -l SF      |

    The '--libType A' option will allow Salmon to automatically infer the
    library type. Check the running log for the strand information.

internal variables:
    bootstraps: ${bootstraps}
    threads: ${threads}
    r1_tail: ${r1_tail}
    r2_tail: ${r2_tail}

see also:
    - salmon quant --help-reads
    - https://salmon.readthedocs.io/en/latest/library_type.html
    - https://github.com/bcbio/bcbio-nextgen/blob/master/bcbio/rnaseq/salmon.py
    - https://fishycat.netlify.com/en/2017/08/strandness_in_rnaseq/

note:
    Bash script.
    Updated 2019-09-25.
EOF
}

[[ -z "${1:-}" ]] && usage && exit 0
_koopa_help "$@"



# Parse arguments                                                           {{{1
# ==============================================================================

for i in "$@"
do
    case "$i" in
        --fasta-file=*)
            fasta_file="${i#*=}"
            shift
            ;;
        --fastq-dir=*)
            fastq_dir="${i#*=}"
            shift
            ;;
        --index-file=*)
            index_file="${i#*=}"
            shift
            ;;
        --output-dir=*)
            output_dir="${i#*=}"
            shift
            ;;
        *)
            # Invalid argument.
            >&2 printf "Error: Invalid arg: '%s'\n" "$i"
            exit 1
            ;;
    esac
done

if [[ -z "${fasta_file:-}" ]] && [[ -z "${index_file:-}" ]]
then
    >&2 printf "Error: Specify 'fasta-file' or 'index-file'.\n\n"
    exit 1
elif [[ -n "${fasta_file:-}" ]] && [[ -n "${index_file:-}" ]]
then
    >&2 printf "Error: Specify 'fasta-file' or 'index-file', but not both.\n\n"
    exit 1
elif [[ -z "${fastq_dir:-}" ]] || [[ -z "${output_dir:-}" ]]
then
    >&2 printf "Error: Missing required argument.\n\n"
    exit 1
fi



# Preflight checks                                                          {{{1
# ==============================================================================

_koopa_assert_is_dir "$fastq_dir"
_koopa_assert_is_not_dir "$output_dir"
_koopa_assert_is_installed salmon
salmon --version



# Sample array from FASTQ files                                             {{{1
# ==============================================================================

# Create a per-sample array from the R1 FASTQ files.
array=()
while IFS= read -r -d $'\0'
do
    x="$REPLY"
    x="$(basename "$x")"
    x="${x/${r1_tail}/}"
    array+=("$x")
done < <(find "$fastq_dir" -name "*${r1_tail}" -print0)

# Error on FASTQ match failure.
if [[ "${#array[@]}" -eq 0 ]]
then
    >&2 printf "Error: Failed to match FASTQ files in '%s' with '%s'.\n" \
        "$fastq_dir" "$r1_tail"
    exit 1
fi

printf "%d samples detected.\n" "${#array[@]}"



# Index                                                                     {{{1
# ==============================================================================

mkdir -pv "$output_dir"

# Generate the genome index on the fly, if necessary.
if [[ -z "${index_file:-}" ]]
then
    _koopa_assert_is_file "$fasta_file"
    index_file="${output_dir}/salmon.idx"
    salmon index \
        -k 31 \
        -p "$threads" \
        -i "$index_file" \
        -t "$fasta_file"
fi



# Quantify                                                                  {{{1
# ==============================================================================

# Loop across the per-sample array and quantify with kallisto.
for x in "${array[@]}"
do
    printf "salmon quant: %s\n" "$x"
    sample_output_dir="${output_dir}/${x}"
    rm -frv "$sample_output_dir"
    mkdir -pv "$sample_output_dir"
    fastq_r1="${fastq_dir}/${x}${r1_tail}"
    fastq_r2="${fastq_dir}/${x}${r2_tail}"
    salmon quant \
        --output="$sample_output_dir" \
        --libType="A" \
        --index="$index_file" \
        --threads="$threads" \
        --numBootstraps="$bootstraps" \
        --gcBias \
        --seqBias \
        --mates1="$fastq_r1" \
        --mates2="$fastq_r2"
done
