#!/usr/bin/env bash
set -Eeu -o pipefail

KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_PREFIX}/shell/bash/include/header.sh"

force=0

while (("$#"))
do
    case "$1" in
        --force)
            force=1
            shift 1
            ;;
        *)
            _koopa_invalid_arg "$1"
            ;;
    esac
done

_koopa_h1 "Building all Docker images."

docker login
images=()

# Lightweight informatics images.
images+=(
    acidgenomics/miniconda3
    acidgenomics/biocontainers
)

# Full Linux images.
images+=(
    acidgenomics/debian
    acidgenomics/fedora
    acidgenomics/ubuntu
)

# Lightweight Linux images.
images+=(
    acidgenomics/alpine
    acidgenomics/amzn
    acidgenomics/arch
    acidgenomics/centos
    acidgenomics/kali
    acidgenomics/opensuse
)

# R images.
images+=(
    acidgenomics/bioconductor
    acidgenomics/basejump
    acidgenomics/bcbiornaseq
    acidgenomics/bcbiosinglecell
    acidgenomics/rnaseq
    acidgenomics/singlecell
)

# AWS batch images.
prefix="${HOME}/.config/koopa/docker"
batch_dirs="$( \
    find "$prefix" \
        -name "aws-batch*" \
        -type d \
        | sort \
)"
batch_dirs="$(_koopa_sub "$batch_dirs" "${prefix}/" '')"
mapfile -t batch_arr <<< "$(_koopa_print "$batch_dirs")"
images=("${images[@]}" "${batch_arr[@]}")

# Full bioinformatics software.
# These don't need to be updated frequently and can be built manually instead.
# > images+=(
# >     acidgenomics/bcbio-nextgen
# >     acidgenomics/rnaeditingindexer
# >     acidgenomics/maestro
# > )

for image in "${images[@]}"
do
    docker system prune --all --force

    # Skip image if pushed already today.
    if [[ "$force" -ne 1 ]]
    then
        docker pull "$image"
        json="$( \
            docker inspect \
            --format='{{json .Created}}' \
            "$image" \
        )"
        # Note that we need to convert UTC to local time.
        utc_timestamp="$( \
            _koopa_print "$json" \
                | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}' \
                | sed 's/T/ /' \
                | sed 's/$/ UTC/'
        )"
        timestamp="$(date -d "$utc_timestamp" '+%Y-%m-%d')"
        today=$(date '+%Y-%m-%d')
        if [[ "$timestamp" == "$today" ]]
        then
            _koopa_note "'${image}' image already pushed today."
            continue
        fi
    fi

    # Build outdated images automatically.
    docker-build-all-tags "$image"
done

docker system prune --all --force

_koopa_success "All Docker images built successfully."
