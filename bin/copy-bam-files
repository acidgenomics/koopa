#!/usr/bin/env bash
set -Eeu -o pipefail

# shellcheck source=/dev/null
source "$(koopa header bash)"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
usage: copy-bam-files [--help|-h] source_dir target_dir

Copy BAM and BAI index sidecar files from a source to a target directory.

details:
    Supports transfers on file systems with non-standard permissions, including
    Azure Files and Windows CIFS/SMB shares.

required positional arguments:
    1.  Source directory path, containing BAM files.
    2.  Target directory path.

optional arguments:
    --help, -h
        Show this help message and exit.

note:
    Bash script.
    Updated 2019-06-26.

examples:
    copy-bam-files bam/ /data00/bam/
EOF
}

[[ -z "${1:-}" ]] && usage && exit 0



# Parse arguments                                                           {{{1
# ==============================================================================

case "$1" in
    --help|-h)
        usage
        exit
        ;;
esac

source_dir="$1"
target_dir="$2"



# Script                                                                    {{{1
# ==============================================================================

# Source directory.
source_dir="$(realpath "$source_dir")"
if [[ ! -d "$source_dir" ]]
then
    printf "\nDoes not exist:\n%s\n\n" "$source_dir"
    exit 1
fi

# Target directory.
target_dir="$(realpath "$target_dir")"
if [[ ! -d "$target_dir" ]]
then
    printf "\nDoes not exist:\n%s\n\n" "$target_dir"
    exit 1
fi

printf "\nSource:\n%s\n\nTarget:\n%s\n\n" "$source_dir" "$target_dir"

# Note that we're allowing symlinks in the search path.
# `-L`: Follow symbolic links.

# Note that we're ignoring some bcbio output cruft here.
# Skip transferring any BAM files in the work directory, and don't copy any
# of the transcriptome BAMs automatically.
# Ignore:
# - `work/`
# - `*-transcriptome.bam`

# rsync works more reliably for resuming interrupted transfers.
# Currently using this to transfer to Azure Files, which doesn't support
# the rsync `-av` flags.
# > cp -iruv {} "$target_dir/".
# > rsync --size-only

find -L "$source_dir" \
    -maxdepth 4 \
    -type f \
    \( -name "*.bam" -or -name "*.bam.bai" \) \
    ! -name "*-transcriptome.bam" \
    ! -path "*/work/*" \
    -print0 | xargs -0 -I {} \
    rsync --size-only --progress {} "${target_dir}/"
