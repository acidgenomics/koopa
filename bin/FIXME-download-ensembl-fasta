#!/usr/bin/env python3
"""Download Ensembl genome annotations in FASTA format.
"""

# See also:
# - https://docs.python.org/2/howto/argparse.html
# - https://stackoverflow.com/questions/24180527

import argparse
import os
import sys

# Get the organism specified by the user.
parser = argparse.ArgumentParser()
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')
required.add_argument("--organism", required=True, help="full latin organism name (e.g. 'Homo sapiens')")
required.add_argument("--build", required=True, help="genome build (e.g. 'GRCh38')")
required.add_argument("--type", required=True, help="'dna': genome; 'cdna': transcriptome")
optional.add_argument("--release", help="release version (e.g. '96'); defaults to latest supported release")
parser._action_groups.append(optional)
args = parser.parse_args()

organism = args.organism
build = args.build
type = args.type

release = args.release
if release is None:
    release = os.environ["ENSEMBL_RELEASE_VERSION"]

print(organism)
print(build)
print(type)
print(release)

sys.exit()


# Inform and exit on legacy "transcriptome" usage.
if type == "transcriptome":
    print("Use `cdna` instead of `transcriptome`.")
    sys.exit(1)

# Get the Ensembl release information from shell global variables.

# FIXME Read these from genomes.txt file, instead of using global variables.
ensembl_release = os.environ["ENSEMBL_RELEASE_VERSION"]
ensembl_release_url = os.environ["ENSEMBL_RELEASE_URL"]
base_url = ensembl_release_url + "/fasta"

# FIXME Add help argument -h, --help
# FIXME Need to add handling for GRCh37.
# FIXME Need to require "build" argument.
# FIXME Default to latest release, but allow user to pass in value.

# FIXME Take this out.
# export ENSEMBL_RELEASE_URL="ftp://ftp.ensembl.org/pub/release-${ENSEMBL_RELEASE_VERSION}"

# Get the file path of either genome or transcriptome FASTA.
print("Homo sapiens (Ensembl GRCh38)")
if type == "dna":
    url = base_url + "/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz"
elif type == "cdna":
    url = base_url + "/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz"

file = os.path.basename(url)

# Error if the file exists.
if os.path.isfile(file):
    print(file + " has already been downloaded.")
    sys.exit(0)

print("Downloading " + file + ".")
os.system("curl -O " + url)

# Decompress, but also keep the original compressed file.
print("Decompressing " + file + ".")
unzip_file = os.path.splitext(file)[0]
os.system("gunzip -c " + file + " > " + unzip_file)
