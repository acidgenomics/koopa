#!/usr/bin/env python3
"""
Download GENCODE genome annotations in FASTA format.

Only *Homo sapiens* and *Mus musculus* are currently supported.

DNA FASTA:
Using primary assembly, like Ensembl.
ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M21/
    GRCm38.primary_assembly.genome.fa.gz

Transcript (cDNA) FASTA:
ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_30/
    gencode.v30.transcripts.fa.gz

Legacy GRCh37 mapped release (not supported):
https://www.gencodegenes.org/releases/grch37_mapped_releases.html

GTF:
ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_30/
    gencode.v30.annotation.gtf.gz

See also:
- https://www.gencodegenes.org/pages/faq.html
- https://github.com/mikelove/tximeta/blob/master/inst/script/metatximeta.R
"""

import argparse
import os
import subprocess
import sys

parser = argparse.ArgumentParser()
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')
required.add_argument( \
    "--organism", required=True, \
    choices=['Homo sapiens', 'Mus musculus'], \
    help="latin name (e.g. \"Homo sapiens\")" \
)
required.add_argument( \
    "--type", required=True, \
    choices=['dna', 'cdna'], \
    help="\"dna\" (genome) or \"cdna\" (transcriptome)" \
)
optional.add_argument( \
    "--release", \
    type=str, \
    help="release version (e.g. \"30\")" \
)
optional.add_argument( \
    "--decompress", \
    action='store_true', \
    # default=False, \
    help="Decompress (but keep) the original file." \
)
parser._action_groups.append(optional)
args = parser.parse_args()

organism = args.organism
type = args.type
release = args.release
decompress = args.decompress

# Coerce full latin organism name to short name used on GENCODE.
if organism == "Homo sapiens":
    organism_short = "human"
    build = "GRCh38"
elif organism == "Mus musculus":
    organism_short = "mouse"
    build = "GRCm38"

# Set the release automatically, if necessary.
# e.g. human = 31; mouse = M22
if release is None:
    release = subprocess.check_output( \
        "koopa variable gencode_" + organism_short + "_release_version", \
        shell=True, universal_newlines=True \
    )
    release = release.rstrip()

base_url = "ftp://ftp.ebi.ac.uk/pub/databases/gencode/" + \
    "Gencode_" + organism_short + "/release_" + release + "/"

# Get the file path of either genome or transcriptome FASTA.
if type == "dna":
    file = build + ".primary_assembly.genome.fa.gz"
elif type == "cdna":
    file = "gencode.v" + release + ".annotation.gtf.gz"

url = base_url + file
print(url)

# Error if the file exists.
if os.path.isfile(file):
    print(file + " has already been downloaded.")
    sys.exit(0)

print("Downloading " + file + ".")
try:
    subprocess.check_call(["wget", url])
except subprocess.CalledProcessError as e:
    print("Failed to download " + file + ".")
    sys.exit(1)

# Decompress, but also keep the original compressed file.
if decompress is True:
    print("Decompressing " + file + ".")
    unzip_file = os.path.splitext(file)[0]
    os.system("gunzip -c " + file + " > " + unzip_file)
