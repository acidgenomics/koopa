#!/usr/bin/env bash

KOOPA_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_HOME}/shell/bash/include/header.sh"

_koopa_help "$@"
_koopa_assert_has_args "$@"



# Arguments                                                                 {{{1
# ==============================================================================

config=0
force=0
private=0

POSITIONAL=()
while (("$#"))
do
    case "$1" in
        --config)
            config=1
            shift 1
            ;;
        --force)
            force=1
            shift 1
            ;;
        --private)
            private=1
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
        --*|-*)
            _koopa_invalid_arg "$1"
            ;;
        *)
            POSITIONAL+=("$1")
            shift 1
            ;;
    esac
done
set -- "${POSITIONAL[@]}"

source_name="$1"
symlink_name="${2:-}"



# Script                                                                    {{{1
# ==============================================================================

# Note that we're creating a symlink in local user config.
dot_dir="$(_koopa_config_dir)/dotfiles"

# Create a dotfile symlink in config dir, if necessary.
dot_repo="$(_koopa_home)/dotfiles"
if [[ -d "$dot_repo"  ]] && [[ ! -d "$dot_dir" ]]
then
    rm -frv "$dot_dir"
    ln -fnsv "$dot_repo" "$dot_dir"
fi

# Private file.
if [[ "$private" -eq 1 ]]
then
    dot_dir="${dot_dir}-private"
fi
_koopa_assert_is_dir "$dot_dir"

source_path="${dot_dir}/${source_name}"
_koopa_assert_is_existing "$source_path"

# Define optional target symlink name.
if [[ -z "$symlink_name" ]]
then
    symlink_name="$(basename "$source_path")"
fi

# Add link either in HOME (default) or XDG_CONFIG_HOME.
if [[ "$config" -eq 1 ]]
then
    if [[ -z "${XDG_CONFIG_HOME:-}" ]]
    then
        _koopa_warning "'XDG_CONFIG_HOME' is unset."
        XDG_CONFIG_HOME="${HOME}/.config"
    fi
    symlink_path="${XDG_CONFIG_HOME}/${symlink_name}"
else
    symlink_path="${HOME}/.${symlink_name}"
fi

# Inform the user when nuking a broken symlink.
if [[ -L "$symlink_path" ]] && [[ ! -e "$symlink_path" ]]
then
    _koopa_message "Overwriting broken link: '${symlink_path}'."
    rm -fv "$symlink_path"
fi

# We're allowing force overwrite of existing symlinks only.
if [[ -L "$symlink_path" ]] &&
    [[ -f "$symlink_path" || -d "$symlink_path" ]] &&
    [[ "$force" -eq 0 ]]
then
    _koopa_stop "Existing symlink: '${symlink_path}'."
    exit 1
elif [[ ! -L "$symlink_path" ]] && [[ -e "$symlink_path" ]]
then
    _koopa_stop "Existing file: '${symlink_path}'."
    exit 1
fi

_koopa_message "Symlinking '$(basename "$symlink_path")'."
rm -fv "$symlink_path"
ln -fnsv "$source_path" "$symlink_path"
