#!/usr/bin/env bash
set -Eeu -o pipefail

KOOPA_PREFIX="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_PREFIX}/shell/bash/include/header.sh"

_koopa_assert_has_args "$@"

config=0
force=0
private=0

pos=()
while (("$#"))
do
    case "$1" in
        --config)
            config=1
            shift 1
            ;;
        --force)
            force=1
            shift 1
            ;;
        --private)
            private=1
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
        --*|-*)
            _koopa_invalid_arg "$1"
            ;;
        *)
            pos+=("$1")
            shift 1
            ;;
    esac
done
set -- "${pos[@]}"

source_name="$1"
symlink_name="${2:-}"

dot_dir="$(_koopa_dotfiles_config_link)"

# Note that this step automatically links into koopa config for users.
if [[ ! -d "$dot_dir" ]]
then
    dot_repo="$(_koopa_dotfiles_source_repo)"
    rm -frv "$dot_dir"
    ln -fnsv "$dot_repo" "$dot_dir"
fi

# Private file.
if [[ "$private" -eq 1 ]]
then
    dot_dir="$(_koopa_dotfiles_private_config_link)"
fi

_koopa_assert_is_dir "$dot_dir"

source_path="${dot_dir}/${source_name}"
_koopa_assert_is_existing "$source_path"

# Define optional target symlink name.
if [[ -z "$symlink_name" ]]
then
    symlink_name="$(basename "$source_path")"
fi

# Add link either in HOME (default) or XDG_CONFIG_HOME.
if [[ "$config" -eq 1 ]]
then
    if [[ -z "${XDG_CONFIG_HOME:-}" ]]
    then
        XDG_CONFIG_HOME="${HOME}/.config"
    fi
    symlink_path="${XDG_CONFIG_HOME}/${symlink_name}"
else
    symlink_path="${HOME}/.${symlink_name}"
fi

# Inform the user when nuking a broken symlink.
# SC2235: Use { ..; } instead of (..) to avoid subshell overhead.
# This is the recommended approach for grouping multiple test commands.
if [[ "$force" -eq 1 ]] ||
    { [[ -L "$symlink_path" ]] && [[ ! -e "$symlink_path" ]]; }
then
    rm -frv "$symlink_path"
elif [[ -e "$symlink_path" ]]
then
    _koopa_stop "Existing dotfile: '${symlink_path}'."
    exit 1
fi

_koopa_info "Symlinking '$(basename "$symlink_path")'."

# Note that 'ln -fnsv' fails to create subdirectories automatically.
symlink_dn="$(dirname "$symlink_path")"
if [[ "$symlink_dn" != "$HOME" ]]
then
    mkdir -pv "$symlink_dn"
fi

ln -fnsv "$source_path" "$symlink_path"
