#!/usr/bin/env python3

import argparse
import os
import sys
import textwrap

sys.path.insert(0, os.getenv("KOOPA_HOME"))
import pykoopa
from pykoopa.genome import flybase_dmel_version, flybase_version
from pykoopa.syntactic import kebab_case
from pykoopa.sys import decompress_but_keep_original, eprint, wget


# Variables                                                                 {{{1
# ==============================================================================

organism = "Drosophila melanogaster"
build = "BDGP6"


# Usage                                                                     {{{1
# ==============================================================================

description = "Download FlyBase genome."
epilog = """
details:
    Creates a new directory in the current working directory.
    Currently only supports Drosophila melanogaster genome.
    Support for this resource could be removed in the future, due to paywall.

see also:
    - https://flybase.org/
    - ftp://ftp.flybase.net/releases
    - https://flybase.org/cgi-bin/get_static_page.pl?file=release_notes.html

note:
    Python script.
    Updated 2019-10-05.
"""


# Arguments                                                                 {{{1
# ==============================================================================

parser = argparse.ArgumentParser(
    description=description,
    epilog=epilog,
    formatter_class=argparse.RawTextHelpFormatter,
)
parser.add_argument(
    "--type",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "genome", "transcriptome", "none"],
    help=textwrap.dedent(
        """\
        'all': download all reference types
        'genome': primary assembly (DNA)
        'transcriptome': transcripts (cDNA/RNA)
        'none': skip download
    """
    ),
)
parser.add_argument(
    "--annotation",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "gtf", "gff", "none"],
    help=textwrap.dedent(
        """\
        'all': download all annotation formats
        'gtf': GTF (GFFv2)
        'gff': GFF3
        'none': skip download
    """
    ),
)
parser.add_argument(
    "--release", type=str, help="flybase release version (e.g. 'FB2019_04')"
)
parser.add_argument(
    "--dmel",
    type=str,
    help="drosophila melanogaster release version (e.g. 'r6.29')",
)
parser.add_argument(
    "--decompress",
    action="store_true",
    help="decompress, but keep the compressed file",
)
args = parser.parse_args()

annotation = args.annotation
decompress = args.decompress
dmel = args.dmel
release = args.release
type = args.type

if type == "none" and annotation == "none":
    eprint("Error: 'type' or 'annotation' are required.")


# Script                                                                    {{{1
# ==============================================================================

if release is None:
    release = flybase_version()
if dmel is None:
    dmel = flybase_dmel_version()

base_url = "ftp://ftp.flybase.net/"
release_url = base_url + "releases/" + release + "/dmel_" + dmel + "/"
output_dir = kebab_case(
    organism + " " + build + " " + "flybase" + " " + release
)


def download_genome(release_url, output_dir, decompress, dmel):
    output_dir = os.path.join(output_dir, "genome")
    wget(url=release_url + "fasta/" + "md5sum.txt", output_dir=output_dir)
    wget(
        url=release_url + "fasta/" + "dmel-all-aligned-" + dmel + ".fasta.gz",
        output_dir=output_dir,
        decompress=decompress,
    )


def download_transcriptome(release_url, output_dir, decompress, dmel):
    output_dir = os.path.join(output_dir, "transcriptome")
    cat_dir = os.path.join(output_dir, "cat")
    output_fasta_file = (
        output_dir + "/" + "dmel-transcriptome-" + dmel + ".fasta.gz"
    )
    wget(url=release_url + "fasta/" + "md5sum.txt", output_dir=cat_dir)
    wget(
        url=release_url
        + "fasta/"
        + "dmel-all-transcript-"
        + dmel
        + ".fasta.gz",
        output_dir=cat_dir,
    )
    wget(
        url=release_url + "fasta/" + "dmel-all-miRNA-" + dmel + ".fasta.gz",
        output_dir=cat_dir,
    )
    wget(
        url=release_url + "fasta/" + "dmel-all-miscRNA-" + dmel + ".fasta.gz",
        output_dir=cat_dir,
    )
    wget(
        url=release_url + "fasta/" + "dmel-all-ncRNA-" + dmel + ".fasta.gz",
        output_dir=cat_dir,
    )
    wget(
        url=release_url
        + "fasta/"
        + "dmel-all-pseudogene-"
        + dmel
        + ".fasta.gz",
        output_dir=cat_dir,
    )
    wget(
        url=release_url + "fasta/" + "dmel-all-tRNA-" + dmel + ".fasta.gz",
        output_dir=cat_dir,
    )
    if not os.path.isfile(output_fasta_file):
        print("Concatenating '" + output_fasta_file + "'.")
        os.system(
            "cat "
            + cat_dir
            + "/"
            + "dmel-all-*-"
            + dmel
            + ".fasta.gz > "
            + output_fasta_file
        )
        if decompress is True:
            decompress_but_keep_original(output_fasta_file)


def download_gtf(release_url, output_dir, decompress, dmel):
    output_dir = os.path.join(output_dir, "gtf")
    wget(url=release_url + "gtf/" + "md5sum.txt", output_dir=output_dir)
    wget(
        url=release_url + "gtf/" + "dmel-all-" + dmel + ".gtf.gz",
        output_dir=output_dir,
        decompress=decompress,
    )


def download_gff(release_url, output_dir, decompress, dmel):
    output_dir = os.path.join(output_dir, "gff")
    wget(url=release_url + "gff/" + "md5sum.txt", output_dir=output_dir)
    wget(
        url=release_url + "gff/" + "dmel-all-" + dmel + ".gff.gz",
        output_dir=output_dir,
        decompress=decompress,
    )


if type == "genome":
    download_genome(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
elif type == "transcriptome":
    download_transcriptome(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
elif type == "all":
    download_genome(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
    download_transcriptome(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )

if annotation == "gtf":
    download_gtf(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
elif annotation == "gff":
    download_gff(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
elif annotation == "all":
    download_gtf(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
    download_gff(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )

print("Genome downloaded successfully to '" + output_dir + "'.")
