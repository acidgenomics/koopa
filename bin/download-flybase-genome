#!/usr/bin/env python3
# pylint: disable=invalid-name,redefined-outer-name
# pylint: enable=invalid-name
"""
Download FlyBase genome.
"""

import argparse
import os
import sys

from textwrap import dedent

# pylint: disable=wrong-import-position

KOOPA_PREFIX = os.path.realpath(os.path.join(__file__, "..", ".."))
PYTHON_PREFIX = os.path.join(KOOPA_PREFIX, "lang", "python")
sys.path.insert(0, PYTHON_PREFIX)

from koopa.argparse import dir_path  # noqa:E402
from koopa.genome import tx2gene_from_fasta  # noqa:E402
from koopa.genome.flybase import (
    download_flybase_genome,
    download_flybase_gff,
    download_flybase_gtf,
    download_flybase_transcriptome,
    flybase_dmel_version,
    flybase_version,
)  # noqa:E402
from koopa.syntactic import kebab_case  # noqa:E402
from koopa.sys import (
    eprint,
    paste_url,
)  # noqa:E402

# pylint: enable=wrong-import-position

DESCRIPTION = "Download FlyBase genome."
EPILOG = """
details:
    Creates a new directory in the current working directory.
    Currently only supports Drosophila melanogaster genome.
    Support for this resource could be removed in the future, due to paywall.

see also:
    - https://flybase.org/
    - ftp://ftp.flybase.net/releases
    - https://flybase.org/cgi-bin/get_static_page.pl?file=release_notes.html

note:
    Python script.
    Updated 2020-02-09.
"""

# pylint: disable=invalid-name,protected-access,redefined-builtin

parser = argparse.ArgumentParser(
    description=DESCRIPTION,
    epilog=EPILOG,
    formatter_class=argparse.RawTextHelpFormatter,
)
parser.add_argument(
    "--type",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "genome", "transcriptome", "none"],
    help=dedent(
        """\
        'all': download all reference types
        'genome': primary assembly (DNA)
        'transcriptome': transcripts (cDNA/RNA)
        'none': skip download
    """
    ),
)
parser.add_argument(
    "--annotation",
    default="all",
    const="all",
    nargs="?",
    choices=["all", "gtf", "gff", "none"],
    help=dedent(
        """\
        'all': download all annotation formats
        'gtf': GTF (GFFv2)
        'gff': GFF3
        'none': skip download
    """
    ),
)
parser.add_argument(
    "--release", type=str, help="flybase release version (e.g. 'FB2019_04')"
)
parser.add_argument(
    "--dmel",
    type=str,
    help="drosophila melanogaster release version (e.g. 'r6.29')",
)
parser.add_argument(
    "--output-dir", type=dir_path, default=".", help="output directory"
)
parser.add_argument(
    "--decompress",
    action="store_true",
    help="decompress, but keep the compressed file",
)
args = parser.parse_args()

annotation = args.annotation
decompress = args.decompress
dmel = args.dmel
output_dir = args.output_dir
release = args.release
type = args.type

if type == "none" and annotation == "none":
    eprint("Error: 'type' or 'annotation' are required.")

organism = "Drosophila melanogaster"
build = "BDGP6"

if release is None:
    release = flybase_version()
if dmel is None:
    dmel = flybase_dmel_version()

base_url = "ftp://ftp.flybase.net"
release_url = paste_url(base_url, "releases", release, "dmel_" + dmel)

output_basename = kebab_case(
    organism + " " + build + " " + "flybase" + " " + release
)
output_dir = os.path.join(os.path.realpath(output_dir), output_basename)

if type == "genome":
    download_flybase_genome(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
elif type == "transcriptome":
    download_flybase_transcriptome(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
elif type == "all":
    download_flybase_genome(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
    download_flybase_transcriptome(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )

if annotation == "gtf":
    download_flybase_gtf(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
elif annotation == "gff":
    download_flybase_gff(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
elif annotation == "all":
    download_flybase_gtf(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )
    download_flybase_gff(
        release_url=release_url,
        output_dir=output_dir,
        decompress=decompress,
        dmel=dmel,
    )

if type != "genome":
    tx2gene_from_fasta(source_name="flybase", output_dir=output_dir)

print("Genome downloaded successfully to '" + output_dir + "'.")
