#!/usr/bin/env bash

KOOPA_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." \
    >/dev/null 2>&1 && pwd -P)"
# shellcheck source=/dev/null
source "${KOOPA_HOME}/shell/bash/include/header.sh"



# Usage                                                                     {{{1
# ==============================================================================

usage() {
cat << EOF
$(_koopa_help_header)
    [--rename] [--prefix]
    string|file...

Convert input into kebab case.

required positional arguments:
    ... Character strings or file names to sanitize.

optional arguments:
    --rename
        Rename input files. Assumes we're renaming files in current working
        directory, but also supports explicit and/or mixed file paths. Doesn't
        work recursively.
    --prefix
        Include "x" prefix for names that are syntactically invalid in R.
        Note that this includes strings beginning with a number.
        Disabled by default.

$(_koopa_help_args)

details:
    Runs in string mode by default.
    File rename mode can be enabled by setting '--rename' flag.

see also:
    - 'syntactic::kebabCase()' in R.

examples:
    kebab-case "hello world" "foo bar" "geneID"
    ## hello-world foo-bar gene-id

    kebab-case --rename "foo_bar.fastq.gz"
    ## ./foo-bar.fastq.gz

    kebab-case --rename --prefix 1_control_A.fastq.gz
    ## ./x1-control-a.fastq.gz

note:
    Bash script that calls Rscript internally.
    Requires the syntactic package to be installed.
    Updated 2019-10-23.
EOF
}

[[ -z "$*" ]] && usage && exit 0
_koopa_help "$@"



# Arguments                                                                 {{{1
# ==============================================================================

rename="FALSE"
prefix="FALSE"

POSITIONAL=()
while (("$#"))
do
    case "$1" in
        --prefix)
            prefix="TRUE"
            shift 1
            ;;
        --rename)
            rename="TRUE"
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
        --*|-*)
            _koopa_invalid_arg "$1"
            ;;
        *)
            POSITIONAL+=("$1")
            shift 1
            ;;
    esac
done
set -- "${POSITIONAL[@]}"



# Script                                                                    {{{1
# ==============================================================================

_koopa_assert_is_r_package_installed "syntactic"

object="$(_koopa_array_to_r_vector "$@")"
Rscript -e " \
    cat(
        syntactic::kebabCase(
            object = ${object},
            rename = ${rename},
            prefix = ${prefix}
        ),
        '\n',
        sep = ' '
    ) \
"
