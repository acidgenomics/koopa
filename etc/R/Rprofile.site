## """
## Shared R profile configuration.
## Updated 2021-04-09.
##
## See `help(Startup)` for documentation on `~/.Rprofile` and `Rprofile.site`.
## """



## Notes {{{1
## =============================================================================

## Tested on Linux and macOS.

## > help(topic = "Rprofile")

## Never set `options(stringsAsFactors = FALSE)`.
## Code will be non-portable.

## Restart R clean inside RStudio project with:
##     Session -> Restart R (Ctrl + Shift + F10).
##
## `.rs.restartR()` will reload but not detach packages, which isn't helpful.
##
## See also:
## - https://stackoverflow.com/questions/6313079
## - https://support.rstudio.com/hc/en-us/community/posts/200653076

## If devtools runs into an unzip error, set option: `unzip = "/usr/bin/unzip"`.

## Check floating point (decimal) handling with `str(.Machine)`.
## https://twitter.com/MazdakS/status/1201937547116589062



## Examples {{{1
## =============================================================================

## - Stephen Turner's profile
##   http://gettinggeneticsdone.blogspot.com/2013/07/customize-rprofile.html
## - Jim Hester's profile
##   https://github.com/jimhester/dotfiles/blob/master/R/Rprofile
## - Mike Love's profile
##   https://gist.github.com/mikelove/c3f7ff05ce18541b8b92
## - Efficient R programming
##   https://csgillespie.github.io/efficientR/set-up.html
## - Debian example config file by Dirk Eddelbuettel.



## Pre-flight {{{1
## =============================================================================

## Run these configuration options outside of `.First()` call, so user-specific
## `~/.Rprofile` file will pick them up.

## Hidden environment {{{2
## -----------------------------------------------------------------------------

.rprofile <- new.env()

## Seed value {{{3
## -----------------------------------------------------------------------------

## Set seed for reproducibility. Using Fibonacci sequence.
assign(x = "seed", value = 1123581321L, envir = .rprofile)
set.seed(.rprofile[["seed"]])

## Functions {{{3
## -----------------------------------------------------------------------------

## Check if a package is installed.
assign(
    x = "isInstalled",
    value = function(pkg) {
        stopifnot(requireNamespace("utils", quietly = TRUE))
        pkg %in% rownames(utils::installed.packages())
    },
    envir = .rprofile
)

## Platform {{{3
## -----------------------------------------------------------------------------

## Linux and macOS (Darwin) are currently supported.
local({
    os <- R.Version()[["os"]]
    sysname <- Sys.info()[["sysname"]]
    linux <- identical(sysname, "Linux")
    macos <- identical(sysname, "Darwin")
    assign(x = "linux", value = linux, envir = .rprofile)
    assign(x = "macos", value = macos, envir = .rprofile)
    assign(x = "os", value = os, envir = .rprofile)
})

## R version strings {{{3
## -----------------------------------------------------------------------------

## Get the full R version, including patch (e.g. 3.6.1).
local({
    rVersionFull <- numeric_version(paste(
        R.version[["major"]],
        R.version[["minor"]],
        sep = "."
    ))
    assign(x = "rVersionFull", value = rVersionFull, envir = .rprofile)
})

## Get the short R version without patch (e.g. 3.6).
## Use "devel" instead for development release.
local({
    if (identical(R.version[["status"]], "Under development (unstable)")) {
        rVersionShort <- "devel"
    } else {
        rVersionShort <- numeric_version(paste(
            R.version[["major"]],
            substr(x = R.version[["minor"]], start = 1L, stop = 1L),
            sep = "."
        ))
    }
    assign(x = "rVersionShort", value = rVersionShort, envir = .rprofile)
})

## Conda {{{3
## -----------------------------------------------------------------------------

local({
    if (isTRUE(nzchar(Sys.getenv("CONDA_DEFAULT_ENV")))) {
        conda <- TRUE
    } else {
        conda <- FALSE
    }
    assign(x = "conda", value = conda, envir = .rprofile)
})

## RStudio {{{3
## -----------------------------------------------------------------------------

local({
    if (isTRUE(nzchar(Sys.getenv("RSTUDIO_USER_IDENTITY")))) {
        rstudio <- TRUE
    } else {
        rstudio <- FALSE
    }
    assign(x = "rstudio", value = rstudio, envir = .rprofile)
})

## No longer attaching hidden environment into search path.
## > attach(.rprofile)



## Initialization at start of an R session {{{1
## =============================================================================

## > help(topic = "Startup", package = "base")

.First <- function() {  # nolint
    isInstalled <- .rprofile[["isInstalled"]]

    ## Compiler settings {{{2
    ## -------------------------------------------------------------------------

    ## Warn on active conda environment.
    ## Conda can cause compilation issues due to GCC version mismatch.

    local({
        if (isTRUE(interactive()) && isTRUE(.rprofile[["conda"]])) {
            message(sprintf(
                fmt = paste(
                    "conda '%s' environment detected.",
                    "Don't install packages from source with conda active.",
                    sep = "\n"
                ),
                Sys.getenv("CONDA_DEFAULT_ENV")
            ))
        }
    })

    ## Check that the compiler is expected GCC version on Linux or expected
    ## Clang version on macOS.
    ##
    ## Do not compile packages from source on macOS using Apple LLVM Clang/GCC.
    ##
    ## Instead, install specific Clang and GNU Fortran binaries:
    ## https://cran.r-project.org/bin/macosx/tools/

    local({
        if (!isTRUE(.rprofile[["conda"]])) {
            if (isTRUE(.rprofile[["macos"]])) {
                ## Check that Xcode command line tools (CLT) are installed.
                if (!isTRUE(dir.exists(file.path(
                    "/",
                    "Library",
                    "Developer",
                    "CommandLineTools",
                    "SDKs",
                    "MacOSX.sdk"
                )))) {
                    stop(paste(
                        "Failed to detect Xcode CLT.",
                        "This can happen after a macOS system update.",
                        "Run 'xcode-select --install' to install.",
                        sep = "\n"
                    ))
                }
                ## Use recommended CRAN compiler settings.
                clangVersion <- switch(
                    EXPR = as.character(.rprofile[["rVersionShort"]]),
                    "3.5" = "6",  # CRAN
                    "3.6" = "7",  # CRAN
                    "4.0" = "11"  # Xcode
                )
                clangVersion <- numeric_version(clangVersion)
                if (isTRUE(clangVersion >= 11L)) {
                    clangBinDir <- file.path("", "usr", "bin")
                } else {
                    clangBinDir <- file.path(
                        "", "usr", "local",
                        paste0("clang", clangVersion), "bin"
                    )
                }
                which <- c("clang", "clang++", "gfortran")
                current <- Sys.which(which)
                expected <- c(
                        "clang"    = file.path(clangBinDir, "clang"),
                        "clang++"  = file.path(clangBinDir, "clang++"),
                        "gfortran" = file.path(
                            "", "usr", "local",
                            "gfortran", "bin", "gfortran"
                        )
                    )
                if (!identical(current, expected)) {
                    stop(paste(
                        "Failed to detect CRAN clang and gfortran.",
                        "",
                        "Current:",
                        paste(
                            utils::capture.output(print(current)),
                            collapse = "\n"
                        ),
                        "",
                        "Expected:",
                        paste(
                            utils::capture.output(print(expected)),
                            collapse = "\n"
                        ),
                        "",
                        "Symlink of 'etc' may be required in R_HOME.",
                        "",
                        "Install development tools and libraries from:",
                        "  - http://mac.r-project.org/tools/",
                        "  - https://cran.r-project.org/bin/macosx/tools/",
                        "",
                        "This issue can happen after a system update.",
                        "Running 'koopa update r-config' may resolve.",
                        sep = "\n"
                    ))
                }
                assign(
                    x = "clangBinDir",
                    value = clangBinDir,
                    envir = .rprofile
                )
                assign(
                    x = "clangVersion",
                    value = clangVersion,
                    envir = .rprofile
                )
                ## Ensure that everything, including X11, is enabled.
                ## Note that 'cledit' will return false when non-interactive.
                ## This will launch XQuartz when running R directly.
                ## > if (isTRUE(interactive())) {
                ## >     x <- capabilities()
                ## >     if (!all(x)) {
                ## >         stop(sprintf(
                ## >             "Capability failure: %s.",
                ## >             toString(names(x)[!x])
                ## >         ))
                ## >     }
                ## > }
            } else if (isTRUE(.rprofile[["linux"]])) {
                which <- c("g++", "gcc", "gfortran")
                current <- Sys.which(which)
            }
            stopifnot(all(nzchar(current)))
        }
    })

    ## Library path {{{2
    ## -------------------------------------------------------------------------

    local({
        libs <- .libPaths()
        assign(x = "libs", value = libs, envir = .rprofile)
    })

    ## RStudio {{{2
    ## -------------------------------------------------------------------------

    ## Fix file permissions. RStudio doesn't pick up the system umask.
    ## Note that we're allowing group write here by default.
    ## > if (isTRUE(.rprofile[["rstudio"]])) {
    ## >     Sys.umask("0002")
    ## > }

    ## Inform user that session is running inside of RStudio.
    ## > if (isTRUE(rstudio) && isTRUE(interactive())) {
    ## >     message("RStudio detected.")
    ## > }

    ## Secrets {{{2
    ## -------------------------------------------------------------------------

    ## Load per-user secrets that we don't want to save in a shared Renviron.
    local({
        secretsFile <- file.path("~", ".Rsecrets")
        if (file.exists(secretsFile)) {
            source(secretsFile)
            ## > if (isTRUE(interactive())) {
            ## >     message(sprintf("Loaded '%s' file.", secretsFile))
            ## > }
            secretsFile <- normalizePath(secretsFile)
            assign(x = "secretsFile", value = secretsFile, envir = .rprofile)
        }
    })

    ## Package installation {{{2
    ## -------------------------------------------------------------------------

    ## Using a versioned RStudio Package Manager (RSPM) CRAN snapshot on Linux
    ## for increased reproducibility.
    ##
    ## Note that RSPM does not support binary packages for macOS.
    ##
    ## See also:
    ## - https://packagemanager.rstudio.com/
    ## - https://mran.microsoft.com/
    ## - https://hub.docker.com/r/rocker/r-ver/dockerfile
    ##
    ## CRAN latest options:
    ## - https://cloud.r-project.org
    ## - https://cran.rstudio.com
    ## - https://packagemanager.rstudio.com/all/latest
    ##
    ## Can enable missing R binaries for Homebrew on macOS.
    ## See also:
    ## - https://macos.rbind.io/
    ## - https://github.com/yihui/homebrew-cran-extra
    ## - https://github.com/yihui/homebrew-cran-extra/tree/gh-pages/bin/macosx
    ## - https://yihui.org/en/2018/06/homebrew-binary-r-packages/
    ##
    ## CRAN snapshots for previous Bioconductor releases:
    ## - Bioconductor 3.12 / R 4.0
    ##   https://packagemanager.rstudio.com/cran/2020-10-28
    ## - Bioconductor 3.11 / R 4.0
    ##   https://packagemanager.rstudio.com/cran/2020-04-30

    local({
        repos <- getOption("repos")
        if (isTRUE(.rprofile[["linux"]])) {
            ## Configure the RSPM CRAN snapshot.
            snapshot <- "2021-03-31"
            cran <- "https://packagemanager.rstudio.com/cran"
            ## Enable binary packages for Ubuntu 20.04 LTS (Focal Fossa).
            if (isTRUE(grepl(
                pattern = "Ubuntu 20.04",
                x = utils::osVersion,
                fixed = TRUE
            ))) {
                distro <- "focal"
                cran <- paste(cran, "__linux__", distro, sep = "/")
            }
            cran <- paste(cran, snapshot, sep = "/")
            repos[["CRAN"]] <- cran
            ## Configure the RSPM Bioconductor mirror repo.
            ## This is currently warning about new books repo, so disabled.
            ## > options(
            ## >    "BioC_mirror" =
            ## >        "https://packagemanager.rstudio.com/bioconductor"
            ## > )
        } else {
            ## Alternatively, can use:
            ## > repos[["CRAN"]] <-
            ## >     "https://cran.rstudio.com"
            ## > repos[["CRAN"]] <-
            ## >     "https://packagemanager.rstudio.com/cran/latest"
            repos[["CRAN"]] <-
                "https://cloud.r-project.org"
        }
        ## Always include our Acid Genomics repo.
        repos[["AcidGenomics"]] <-
            "https://r.acidgenomics.com"
        ## Yihui Xie's repo has some extra binary builds for macOS.
        ## > if (isTRUE(.rprofile[["macos"]])) {
        ## >    repos[["CRANextra"]] <-
        ## >        "https://macos.rbind.io"
        ## > }
        options("repos" = repos)
        ## Allow Bioconductor to work offline.
        ## Note that this will warn when enabled.
        ## > options("BIOCONDUCTOR_ONLINE_VERSION_DIAGNOSIS" = FALSE)
    })

    ## Always install from source on Linux.
    ## Allow binary install on macOS.
    if (isTRUE(.rprofile[["linux"]])) {
        options("pkgType" = "source")
    } else if (isTRUE(.rprofile[["macos"]])) {
        options("pkgType" = "both")
    }
    ## Stop nagging about whether to compile in an interactive session.
    ## https://stackoverflow.com/a/51530225
    options("install.packages.compile.from.source" = "always")

    ## How to set binary-only package mode, which doesn't work on Linux.
    ## > options(
    ## >     "install.packages.check.source" = "no",
    ## >     "install.packages.compile.from.source" = "binary",
    ## >     "pkgType" = "binary"
    ## > )

    ## Set custom compiler options.
    ## > options(
    ## >     "configure.args" = NULL,
    ## >     "configure.vars" = NULL
    ## > )

    ## Specify internal download method.
    ##
    ## This gets picked up by `install.packages()` and `BiocManager::install()`.
    ##
    ## Use "libcurl" (default), "curl", or "wget" on Linux/macOS; or can use
    ## "wininet" on Windows only.
    ##
    ## See also:
    ## - https://stat.ethz.ch/R-manual/R-devel/library/utils/html/
    ##       download.file.html
    ## - https://github.com/wch/r-source/blob/master/src/library/utils/R/unix/
    ##       download.file.R
    ##
    ## curl mode:
    ## This is buggy, try to use wget mode instead.
    ## > if (isTRUE(nzchar(Sys.which("curl")))) {
    ## >     options(
    ## >         "download.file.method" = "curl",
    ## >         "download.file.extra" = c(
    ## >             "--location",
    ## >             "--retry", "5"
    ## >         )
    ## >     )
    ## > }
    ##
    ## wget mode:
    ##
    ## This mode is a bit too verbose and shows HTTP redirect headers.
    ##
    ## Also shows this warning:
    ## "WARNING: timestamping does nothing in combination with -0.
    ## See the manual for details.
    ##
    ## See also:
    ## - https://github.com/YuLab-SMU/wget/blob/master/R/wget.R
    ## > if (isTRUE(nzchar(Sys.which("wget")))) {
    ## >     options(
    ## >         "download.file.method" = "wget",
    ## >         "download.file.extra" = c(
    ## >             "--continue",
    ## >             "--max-redirect=20",
    ## >             "--timeout=60"
    ## >         )
    ## >     )
    ## > }

    ## Default packages {{{2
    ## -------------------------------------------------------------------------

    ## Attach BiocManager automatically.
    ## > if (interactive()) {
    ## >     if (isInstalled("BiocManager")) {
    ## >         options(
    ## >             defaultPackages = c(
    ## >                 getOption("defaultPackages"),
    ## >                 "BiocManager"
    ## >             )
    ## >         )
    ## >     }
    ## > }

    ## Console and interface {{{2
    ## -------------------------------------------------------------------------

    options(
        "browserNLdisabled" = TRUE,
        ## Remove "+" line prefix in output, making code easier to copy.
        "continue" = " ",
        "max.print" = 1000L,
        "menu.graphics" = FALSE,
        "show.signif.stars" = FALSE,
        "verbose" = FALSE,
        "width" = 80L
    )

    if (!isTRUE(.rprofile[["rstudio"]])) {
        options("prompt" = "> ")
    }

    ## Turn on auto-completion of installed package names.
    if (isTRUE(interactive())) {
        utils::rc.settings(ipck = TRUE)
    }

    ## Debugging {{{2
    ## -------------------------------------------------------------------------

    ## warn: sets the handling of warning messages. If warn is negative, all
    ## warnings are ignored. If warn is 0 (the default), warnings are stored
    ## until the top–level function returns. If fewer than 10 warnings were
    ## signalled, they will be printed, otherwise a message saying how many
    ## (max 50) were signalled. An object called `last.warning` is created, and
    ## can be printed through the function warnings. If warn is 1, warnings are
    ## printed as they occur. If warn is 2 or larger, all warnings are turned
    ## into errors.
    options("warn" = 1L)

    ## Improve the verbosity of errors and/or warnings.
    options(
        "deparse.max.lines" = 3L,
        "showErrorCalls" = TRUE,
        "showWarnCalls" = TRUE,
        ## Set to maximum supported length.
        "warning.length" = 8170L
    )

    ## Note that edgeR and pheatmap currently fail these checks.
    options(
        "warnPartialMatchAttr" = TRUE,
        "warnPartialMatchDollar" = TRUE
    )

    ## Timeouts default to 60 seconds, which can be too long.
    ## Note that this applies to `download.file()` calls as well.
    ## > options("timeout" = 30L)

    ## Improve stack traces for error messages.
    ##
    ## Use either:
    ## - `rlang::entrace` (recommended)
    ## - `utils::recover`
    ##
    ## See also:
    ## - https://twitter.com/krlmlr/status/1086995664591044608
    ## - https://gist.github.com/krlmlr/33ec72d196b1542b9c4f9497d981de49
    ##
    ## Verbose error debugging is currently crashing RStudio 1.2 unless
    ## `rstudio.errors.suppressed` is defined.
    ##
    ## Related issues:
    ## - https://github.com/rstudio/rstudio/issues/4723
    ## - https://github.com/rstudio/rstudio/pull/4726

    if (isInstalled("rlang")) {
        options(
            "error" = quote(rlang::entrace()),
            "rlang_backtrace_on_error" = "full",
            "rstudio.errors.suppressed" = FALSE
        )
    } else {
        options("error" = utils::recover)
    }

    ## Quiet down about registered S3 method collisons.
    ## See also:
    ## - https://svn.r-project.org/R/trunk/src/library/base/R/namespace.R
    ## - https://github.com/wch/r-source/blob/master/src/library/base/R/
    ##       namespace.R
    Sys.setenv("_R_S3_METHOD_REGISTRATION_NOTE_OVERWRITES_" = "0")

    ## Package-specific options {{{2
    ## -------------------------------------------------------------------------

    if (isInstalled("BiocManager")) {
        ## Overriding the annoying message about manual CRAN configuration.
        ## Check BiocManager repo config with `BiocManager::repositories()`.
        options("BiocManager.check_repositories" = FALSE)

        ## Enable use of historical snapshots ('MRAN' or 'RSPM') via
        ## `options(BiocManager.snapshots=)` to install CRAN packages for
        ## out-of-date Bioconductor versions.
    }

    if (isInstalled("crayon")) {
        options(
            "crayon.enabled" = TRUE,
            "crayon.colors" = 256L
        )
    }

    if (isInstalled("future")) {
        ## If we have a large dataset, then we might need to adjust the limit
        ## for allowable object sizes within R.
        ##
        ## (Default is 500 * 1024 ^ 2 = 500 Mb)
        ##
        ## https://hbctraining.github.io/scRNA-seq/lessons/
        ##     06_SC_SCT_and_integration.html
        ##
        ## Increase default limit to 4 GB.
        options("future.globals.maxSize" = 4000L * (1024L ^ 2L))
    }

    if (isInstalled("httr")) {
        ## Enable OAuth token generation using httr on a remote R server.
        ## This is used by googlesheets, for example.
        options("httr_oob_default" = TRUE)
    }

    if (isInstalled("parallel")) {
        local({
            ## Improve the default multi-core settings.
            ## `BiocParallel::MulticoreParam()` should inherit this setting.
            cores <- Sys.getenv("CPU_COUNT")
            if (!isTRUE(nzchar(cores))) {
                cores <- max(1L, parallel::detectCores() - 1L)
            }
            cores <- as.integer(cores)
            ## `install.packages()` looks for "Ncpus" global.
            options(
                "Ncpus" = cores,
                "mc.cores" = cores
            )
        })
    }

    if (isInstalled("readr")) {
        options(
            "readr.num_columns" = 0L,
            "readr.show_progress" = FALSE
        )
    }

    if (isInstalled("testthat")) {
        ## Stop on the first check failure.
        options("testthat.progress.max_fails" = 1L)
    }

    if (isInstalled("tidyverse")) {
        ## Suppress annoying tidyverse startup message.
        options("tidyverse.quiet" = TRUE)
    }

    ## Session info {{{2
    ## -------------------------------------------------------------------------

    ## Only display session information when R is running interactively
    ## and not in quiet mode.
    if (
        isTRUE(interactive()) &&
        isFALSE(length(intersect(
            x = commandArgs(),
            y = c("-q", "--quiet", "--silent")
        )) > 0L)
    ) {
        local({
            pathString <- paste0("  %.", getOption("width") - 2L, "s")
            msg <- sprintf(
                fmt = paste(
                    "%s",
                    "Home:", pathString,
                    "Package Library:", pathString,
                    "Working Directory:", pathString,
                    "",
                    sep = "\n"
                ),
                R.version[["version.string"]],
                normalizePath(R.home(), mustWork = TRUE),
                normalizePath(.libPaths()[[1L]], mustWork = TRUE),
                normalizePath(getwd(), mustWork = TRUE)
            )
            cat(msg)
        })
    }

    rm(isInstalled)
}



## Initialization at end of an R session {{{1
## =============================================================================

.Last <- function() {  # nolint
    if (interactive()) {
        message(sprintf("Goodbye at %s.", date()))
    }
}
